<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-07-10T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b530bb3b-5db9-4f41-94ea-5ddd5b3ff7a5" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E52Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ContainsSameDigits_TestCase_True()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E52&lt;/span&gt;.ContainsSameDigits(125874,251748);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ContainsSameDigits_TestCaseBad_False()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E52&lt;/span&gt;.ContainsSameDigits(125873, 251748);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.False(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ContainsSameDigits_EdgeBad_False()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E52&lt;/span&gt;.ContainsSameDigits(111, 11);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.False(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ContainsSameDigits_EdgeBadb_False()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E52&lt;/span&gt;.ContainsSameDigits(1111, 1112);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.False(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DoubleContainsSameDigits_GivenGood_True()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E52&lt;/span&gt;.DoesFactor(125874,2);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.True(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindSmallestInt_Given_Answer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E52&lt;/span&gt;.FindSmallestInt();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(142857, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E52&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; FindSmallestInt()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 10; i &amp;lt; 1000000; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (DoesFactor(i, 2))&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (DoesFactor(i, 3))&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (DoesFactor(i, 4))&lt;br&gt;                     {&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (DoesFactor(i, 5))&lt;br&gt;                         {&lt;br&gt;                             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (DoesFactor(i, 6))&lt;br&gt;                             {&lt;br&gt;                                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; i;&lt;br&gt;                             }&lt;br&gt;                         }&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; -1;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; DoesFactor(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; multiple)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; multiplied = a*multiple;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!ContainsSameDigits(a, multiplied)) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; ContainsSameDigits(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; b)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;char&lt;/span&gt;[] arrayA = a.ToString().ToCharArray();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;char&lt;/span&gt;[] arrayB = b.ToString().ToCharArray();&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (arrayA.Length != arrayB.Length) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; character &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; arrayA)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!arrayB.Contains(character)) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; character &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; arrayB)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!arrayA.Contains(character)) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;using GitHib again &lt;a href="https://github.com/djhmateer/Euler52"&gt;https://github.com/djhmateer/Euler52&lt;/a&gt;&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Good to be using TDD and have testable methods&lt;/li&gt; &lt;/ul&gt;</Content>
      <Created>2012-07-11T16:42:54.3847689-04:00</Created>
      <Modified>2012-07-11T16:43:03.5844188-04:00</Modified>
      <EntryId>8d078fba-96f2-4d72-bf92-4cf8fce853d8</EntryId>
      <Description />
      <Title>Euler 52–Multiples with same digits</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;A tough one to understand the problem.&lt;/p&gt;  &lt;p&gt;“Find the smallest prime which, by changing the same part of that number can form eight different primes”   &lt;br /&gt;&lt;/p&gt;  &lt;p&gt;I went for the simplest solution to start with&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:95eee173-d938-473b-a094-2356494e0f9d" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;  &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E51Tests&lt;/span&gt;&lt;br&gt;  {&lt;br&gt;      &lt;span style="color:#008000"&gt;//Find the smallest prime which, by changing the same part of that number&lt;/span&gt;&lt;br&gt;      &lt;span style="color:#008000"&gt;//can form eight different primes&lt;/span&gt;&lt;br&gt;      &lt;span style="color:#008000"&gt;//x2x3x3: 929393 828383 626363 525353 424343 323333 222323 121313&lt;/span&gt;&lt;br&gt;      [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;      &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindSmallestPrime_Given_Return()&lt;br&gt;      {&lt;br&gt;          &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E51&lt;/span&gt;.FindSmallestPrime();&lt;br&gt;          &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(121313, result);&lt;br&gt;      }&lt;br&gt;  }&lt;br&gt; &lt;br&gt;  &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E51&lt;/span&gt;&lt;br&gt;  {&lt;br&gt;      &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; FindSmallestPrime()&lt;br&gt;      {&lt;br&gt;          &lt;span style="color:#008000"&gt;//assume 6 digits will be required&lt;/span&gt;&lt;br&gt;          &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a = 100003; a &amp;lt;= 999999; a = a + 2)&lt;br&gt;          {&lt;br&gt;              &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsPrime(a))&lt;br&gt;              {&lt;br&gt;                  &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; s = a.ToString();&lt;br&gt;                  &lt;span style="color:#0000ff"&gt;char&lt;/span&gt;[] array = s.ToCharArray();&lt;br&gt;                  &lt;span style="color:#008000"&gt;//pick a digit to use..but not last digit as this wouldn&amp;#39;t allow 8 primes&lt;/span&gt;&lt;br&gt;                  &lt;span style="color:#008000"&gt;//leading 0&amp;#39;s not permitted&lt;/span&gt;&lt;br&gt;                  &lt;span style="color:#008000"&gt;//looking through for a triplet of numbers in the first 5 digits&lt;/span&gt;&lt;br&gt;                  &lt;span style="color:#008000"&gt;//that would be exchanged for a total of 8 primes&lt;/span&gt;&lt;br&gt;                  &lt;span style="color:#008000"&gt;//0 means don&amp;#39;t change the digit&lt;/span&gt;&lt;br&gt;                  &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt;= 1; i++)&lt;br&gt;                  {&lt;br&gt;                      &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; j = 0; j &amp;lt;= 1; j++)&lt;br&gt;                      {&lt;br&gt;                          &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; k = 0; k &amp;lt;= 1; k++)&lt;br&gt;                          {&lt;br&gt;                              &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; n = 0; n &amp;lt;= 1; n++)&lt;br&gt;                              {&lt;br&gt;                                  &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; p = 0; p &amp;lt;= 1; p++)&lt;br&gt;                                  {&lt;br&gt;                                      &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; q = 0; q &amp;lt;= 1; q++)&lt;br&gt;                                      {&lt;br&gt;                                          &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listPrimesInFamily = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt; &lt;br&gt;                                          &lt;span style="color:#008000"&gt;//try changing digits&lt;/span&gt;&lt;br&gt;                                          &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; m = 0; m &amp;lt;= 9; m++)&lt;br&gt;                                          {&lt;br&gt;                                              &lt;span style="color:#008000"&gt;//reset the array&lt;/span&gt;&lt;br&gt;                                              s = a.ToString();&lt;br&gt;                                              array = s.ToCharArray();&lt;br&gt; &lt;br&gt;                                              &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i == 1) array[0] = (&lt;span style="color:#0000ff"&gt;char&lt;/span&gt;)(m + 48);&lt;br&gt;                                              &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (j == 1) array[1] = (&lt;span style="color:#0000ff"&gt;char&lt;/span&gt;)(m + 48);&lt;br&gt;                                              &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (k == 1) array[2] = (&lt;span style="color:#0000ff"&gt;char&lt;/span&gt;)(m + 48);&lt;br&gt;                                              &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (n == 1) array[3] = (&lt;span style="color:#0000ff"&gt;char&lt;/span&gt;)(m + 48);&lt;br&gt;                                              &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (p == 1) array[4] = (&lt;span style="color:#0000ff"&gt;char&lt;/span&gt;)(m + 48);&lt;br&gt;                                              &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (q == 1) array[5] = (&lt;span style="color:#0000ff"&gt;char&lt;/span&gt;)(m + 48);&lt;br&gt; &lt;br&gt;                                              &lt;span style="color:#008000"&gt;//Console.WriteLine(&amp;quot;{0},{1},{2},{3},{4},{5}&amp;quot;,i,j,k,n,p,q);&lt;/span&gt;&lt;br&gt;                                              &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; num = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;(array);&lt;br&gt;                                              &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numChanged = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(num);&lt;br&gt;                                              &lt;span style="color:#008000"&gt;//Console.WriteLine(&amp;quot;c:{0}&amp;quot;,num);&lt;/span&gt;&lt;br&gt;                                              &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsPrime(numChanged))&lt;br&gt;                                              {&lt;br&gt;                                                  &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (numChanged &amp;gt; 100000)&lt;br&gt;                                                  {&lt;br&gt;                                                      &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!listPrimesInFamily.Contains(numChanged))&lt;br&gt;                                                      {&lt;br&gt;                                                          listPrimesInFamily.Add(numChanged);&lt;br&gt;                                                      }&lt;br&gt;                                                  }&lt;br&gt;                                              }&lt;br&gt;                                          }&lt;br&gt;                                          &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (listPrimesInFamily.Count == 8)&lt;br&gt;                                          {&lt;br&gt;                                              &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;, {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, listPrimesInFamily.Count, a);&lt;br&gt;                                              &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; i1 &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; listPrimesInFamily)&lt;br&gt;                                              {&lt;br&gt;                                                  &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;  {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, i1);&lt;br&gt;                                              }&lt;br&gt;                                              &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; listPrimesInFamily.OrderBy(x =&amp;gt; x).FirstOrDefault();&lt;br&gt;                                          }&lt;br&gt;                                      }&lt;br&gt;                                  }&lt;br&gt;                              }&lt;br&gt;                          }&lt;br&gt;                      }&lt;br&gt;                  }&lt;br&gt;              }&lt;br&gt;          }&lt;br&gt;          &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; -1;&lt;br&gt;      }&lt;br&gt; &lt;br&gt;      &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsPrime(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; a)&lt;br&gt;      {&lt;br&gt;          &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a == 0) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;          &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a == 1) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;          &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a == 2) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;          &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 2; i &amp;lt;= &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(a); i++)&lt;br&gt;          {&lt;br&gt;              &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a % i == 0)&lt;br&gt;              {&lt;br&gt;                  &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;              }&lt;br&gt;          }&lt;br&gt;          &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;      }&lt;br&gt;  }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Euler-51_2_8590/image_2.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Euler-51_2_8590/image_thumb.png" width="416" height="299" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Using Github for windows was very useful as it allowed me to go back to previous versions of code, and to keep my current solution clean.&lt;/p&gt;  &lt;p&gt;In retrospect:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Difficult problem to grasp what was meant&lt;/li&gt;    &lt;li&gt;Didn’t use TDD as much and got bogged down with a simple error&lt;/li&gt;    &lt;li&gt;An interesting one&lt;/li&gt; &lt;/ul&gt;</Content>
      <Created>2012-07-11T11:07:41.6314829-04:00</Created>
      <Modified>2012-07-11T11:07:41.6314829-04:00</Modified>
      <EntryId>177d6f1b-eade-4451-b428-f3f20ce63743</EntryId>
      <Description />
      <Title>Euler 51_2 - 8 Family Primes</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>