<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-05-23T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2c4d7b79-5bc4-4757-864c-3e8b317fa5bf" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DisplayValues()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;/*&lt;/span&gt;&lt;br&gt;              &lt;span style="color:#008000"&gt;* float = System.Single (32 bits)..7 or 8&lt;/span&gt;&lt;br&gt;              &lt;span style="color:#008000"&gt;* double = System.Double (64 bits)...15 or 16&lt;/span&gt;&lt;br&gt;              &lt;span style="color:#008000"&gt;* decimal = System.Decimal (128 bits)..28 or 29 significant digits&lt;/span&gt;&lt;br&gt;              &lt;span style="color:#008000"&gt;* &lt;/span&gt;&lt;br&gt;              &lt;span style="color:#008000"&gt;* these are all floating point numbers..&lt;/span&gt;&lt;br&gt;              &lt;span style="color:#008000"&gt;* eg how to multiple 1234.5 by 10... move decimal point&lt;/span&gt;&lt;br&gt;              &lt;span style="color:#008000"&gt;* &lt;/span&gt;&lt;br&gt;              &lt;span style="color:#008000"&gt;* sign: 0 (positive/zer) or 1 (negative)&lt;/span&gt;&lt;br&gt;              &lt;span style="color:#008000"&gt;* exponent (or power) eg where the point ends up eg 2 gives 123.45&lt;/span&gt;&lt;br&gt;              &lt;span style="color:#008000"&gt;* mantissa eg 12345&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;*/&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;float&lt;/span&gt; v1 = 0.2f; &lt;span style="color:#008000"&gt;//the closest possible representation to 0.2..bause of binary arithmetic&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; v2 = 0.2d; &lt;span style="color:#008000"&gt;//dont need d really&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(50); &lt;span style="color:#008000"&gt;//default to int&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; half = 50/100; &lt;span style="color:#008000"&gt;//this is 0!! because it is int 50 / int 100;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;decimal&lt;/span&gt; v3 = 0.3m;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; v5 = v1; &lt;span style="color:#008000"&gt;//implicit conversion&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;float&lt;/span&gt; v6 = (&lt;span style="color:#0000ff"&gt;float&lt;/span&gt;)v3; &lt;span style="color:#008000"&gt;// has to be explicit&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; x =      0.1;&lt;br&gt;             x +=            0.000001;&lt;br&gt;             x +=            0.000001;&lt;br&gt;             x +=            0.000001;&lt;br&gt;             x +=            0.000001;&lt;br&gt;             x +=            0.000001;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//Assert.AreEqual(0.100005, x); //fails!&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(0.100005, x,0.001); &lt;span style="color:#008000"&gt;//passes &lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//if JonDecimal is only 3 digits&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//JonDecimal x = 1/3;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//x+x+x = 0.999&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//not a floating point, a decimal point&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//decimal x = 0.1m;&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(x.ToString(&lt;span style="color:#a31515"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;)); &lt;span style="color:#008000"&gt;//round trip.we want to be able to get back&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//when to use decimal&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//use floating point doubles for really big or really small numbers and very quick (&amp;gt; 386/387..floating point co-processors)&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//eg when we don&amp;#39;t really need super great precision eg distance sun to earth&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//use decimal when eg 2 pennies + 3 pennies = 5 pennies.. eg 0.05pounds&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//sometimes best way to think of money is ints.. ie 100 pence.&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//decimal twoDollcarsAndFivecents = 2.05m;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Console.WriteLine(&amp;quot;I have: {0:c}&amp;quot;, twoDollcarsAndFivecents); //I have: $2.05&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//decimal value = 2.05m;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//decimal diviedByTen = value*10;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Console.WriteLine(diviedByTen);&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; a = &lt;span style="color:#0000ff"&gt;double&lt;/span&gt;.NaN; &lt;span style="color:#008000"&gt;//Not a Number&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; b = &lt;span style="color:#0000ff"&gt;double&lt;/span&gt;.NaN;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(a == b); &lt;span style="color:#008000"&gt;//false&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Complex&lt;/span&gt; c1 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Complex&lt;/span&gt;(0,1); &lt;span style="color:#008000"&gt;// 0 + 1i&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(c1 * c1);&lt;span style="color:#008000"&gt;//complex and imaginery numbers&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//for natural numbers which are inherintly vauge eg distance from here to sun use float and double&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//man made quantity eg currency.. decimal is your friend&lt;/span&gt;&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-24T00:09:28.602875-04:00</Created>
      <Modified>2012-05-24T00:09:28.602875-04:00</Modified>
      <EntryId>6fd75505-15b5-46cf-9c66-a5c7cbb23ea4</EntryId>
      <Description />
      <Title>Tekpub–Numbers</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>