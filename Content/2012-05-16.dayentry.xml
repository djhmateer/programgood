<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-05-15T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;Why are interfaces important?&lt;/p&gt;  &lt;p&gt;not a pattern.. a language feature.&lt;/p&gt;  &lt;p&gt;time zone changes..&lt;/p&gt;  &lt;p&gt;We want to give the current Date and Time as a dependency.. so can test properly eg&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;what if our licence never expires in following 5 years.. want to inject what would happen in the future,&amp;#160; and using DateTime.Now in our licence code means can’t test that.&lt;/p&gt; &lt;/blockquote&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:37cf3646-5297-477a-8a95-56d4bb6adc17" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 500px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;   &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;LicenceTests&lt;/span&gt;&lt;br&gt;   {&lt;br&gt;       [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;       &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HasExpired_AnExpiredDate_ReturnFalse()&lt;br&gt;       {&lt;br&gt;           &lt;span style="color:#2b91af"&gt;Licence&lt;/span&gt; licence = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Licence&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt;(2000,1,1,0,0,0));&lt;br&gt;           &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(licence.HasExpired);&lt;br&gt;       }&lt;br&gt; &lt;br&gt;       [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;       &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HasExpired_AFutureDate_ReturnTrue()&lt;br&gt;       {&lt;br&gt;           &lt;span style="color:#2b91af"&gt;Licence&lt;/span&gt; licence = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Licence&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt;(2020, 1, 1, 0, 0, 0));&lt;br&gt;           &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(licence.HasExpired);&lt;br&gt;       }&lt;br&gt;   }&lt;br&gt; &lt;br&gt;   &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Licence&lt;/span&gt;&lt;br&gt;   {&lt;br&gt;       &lt;span style="color:#008000"&gt;//field&lt;/span&gt;&lt;br&gt;       &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt; expirey;&lt;br&gt; &lt;br&gt;       &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; Licence(&lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt; expirey)&lt;br&gt;       {&lt;br&gt;           &lt;span style="color:#008000"&gt;//expirey is a variable or local variable&lt;/span&gt;&lt;br&gt;           &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.expirey = expirey;&lt;br&gt;       }&lt;br&gt; &lt;br&gt;       &lt;span style="color:#008000"&gt;//property&lt;/span&gt;&lt;br&gt;       &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; HasExpired&lt;br&gt;       {&lt;br&gt;           &lt;span style="color:#008000"&gt;//a dependency on a static method&lt;/span&gt;&lt;br&gt;           &lt;span style="color:#008000"&gt;//nothing we can do to make it behave differtly in tests  &lt;/span&gt;&lt;br&gt;           &lt;span style="color:#0000ff"&gt;get&lt;/span&gt; { &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt;.UtcNow &amp;gt; expirey; }&lt;br&gt;       }&lt;br&gt;   }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;StubClock and SystemClock both implement IClock&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2e48b12c-81f3-4d58-ae75-af3164b41478" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px;"&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;interface&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IClock&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#808080"&gt;///&lt;/span&gt;&lt;span style="color:#008000"&gt; &lt;/span&gt;&lt;span style="color:#808080"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#808080"&gt;///&lt;/span&gt;&lt;span style="color:#008000"&gt; Gets the current &lt;/span&gt;&lt;span style="color:#808080"&gt;&amp;lt;see cref=&amp;quot;Instant&amp;quot;/&amp;gt;&lt;/span&gt;&lt;span style="color:#008000"&gt; on the time line according to this clock.&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#808080"&gt;///&lt;/span&gt;&lt;span style="color:#008000"&gt; &lt;/span&gt;&lt;span style="color:#808080"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Instant&lt;/span&gt; Now { &lt;span style="color:#0000ff"&gt;get&lt;/span&gt;; }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;so thats how this code uses interfaces.. for testing we’ve got a StubClock that we can set the time on.&amp;#160; For production we pass in the actual time.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:48795953-c173-4e7d-9d8f-25ad48f1637d" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;LicenceTests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HasExpired_AnExpiredDate_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Instant&lt;/span&gt; expirey = &lt;span style="color:#2b91af"&gt;Instant&lt;/span&gt;.FromUtc(2000, 1, 1, 0, 0, 0);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;StubClock&lt;/span&gt; clock = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;StubClock&lt;/span&gt;(expirey + &lt;span style="color:#2b91af"&gt;Duration&lt;/span&gt;.FromTicks(1));&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//injecting the dependency&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Licence&lt;/span&gt; licence = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Licence&lt;/span&gt;(expirey, clock);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(licence.HasExpired);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HasExpired_AFutureDate_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Instant&lt;/span&gt; expirey = &lt;span style="color:#2b91af"&gt;Instant&lt;/span&gt;.FromUtc(2000, 1, 1, 0, 0, 0);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;StubClock&lt;/span&gt; clock = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;StubClock&lt;/span&gt;(expirey - &lt;span style="color:#2b91af"&gt;Duration&lt;/span&gt;.FromTicks(1));&lt;br&gt; &lt;br&gt;         &lt;span style="color:#2b91af"&gt;Licence&lt;/span&gt; licence = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Licence&lt;/span&gt;(expirey, clock);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(licence.HasExpired);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HasExpired_AtExactInstant_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Instant&lt;/span&gt; expirey = &lt;span style="color:#2b91af"&gt;Instant&lt;/span&gt;.FromUtc(2000, 1, 1, 0, 0, 0);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;StubClock&lt;/span&gt; clock = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;StubClock&lt;/span&gt;(expirey);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#2b91af"&gt;Licence&lt;/span&gt; licence = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Licence&lt;/span&gt;(expirey, clock);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(licence.HasExpired);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HasExpired_NonExpiredLicenceBecomesExpires_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Instant&lt;/span&gt; expirey = &lt;span style="color:#2b91af"&gt;Instant&lt;/span&gt;.FromUtc(2000, 1, 1, 0, 0, 0);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;StubClock&lt;/span&gt; clock = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;StubClock&lt;/span&gt;(expirey - &lt;span style="color:#2b91af"&gt;Duration&lt;/span&gt;.FromTicks(1));&lt;br&gt; &lt;br&gt;         &lt;span style="color:#2b91af"&gt;Licence&lt;/span&gt; licence = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Licence&lt;/span&gt;(expirey, clock);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(licence.HasExpired);&lt;br&gt;         clock.AdvanceTicks(1);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(licence.HasExpired);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Licence&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Instant&lt;/span&gt; expirey;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IClock&lt;/span&gt; clock;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; Licence(&lt;span style="color:#2b91af"&gt;Instant&lt;/span&gt; expirey, &lt;span style="color:#2b91af"&gt;IClock&lt;/span&gt; clock)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//variables or local variables&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.expirey = expirey;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.clock = clock;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//property&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; HasExpired&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;get&lt;/span&gt; { &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; clock.Now &amp;gt;= expirey; }&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BigApplicatiion&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main ()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//a natural singleton!  there is only 1 system clock&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//but there is no way to test this business code...want dependency injection&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Licence&lt;/span&gt; licence = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Licence&lt;/span&gt;(&lt;span style="color:#2b91af"&gt;Instant&lt;/span&gt;.FromUtc(2012,4,19,0,0), &lt;span style="color:#2b91af"&gt;SystemClock&lt;/span&gt;.Instance);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (licence.HasExpired)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Licence expired&amp;quot;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-16T17:48:48.140625-04:00</Created>
      <Modified>2012-05-16T18:23:00.734375-04:00</Modified>
      <EntryId>5c06637b-c987-40bf-9c40-37f8336b9de1</EntryId>
      <Description />
      <Title>Tekpub–Jon Skeet–Interfaces</Title>
      <Categories>interfaces;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;&lt;a href="http://www.ncrunch.net/download.htm"&gt;http://www.ncrunch.net/download.htm&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/NCrunchAutomated-Testing_E97D/image_2.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/NCrunchAutomated-Testing_E97D/image_thumb.png" width="323" height="193" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Just sits there and runs any test that I change.&lt;/p&gt;</Content>
      <Created>2012-05-16T17:42:36.09375-04:00</Created>
      <Modified>2012-05-16T17:42:36.09375-04:00</Modified>
      <EntryId>d48a6ac1-12a9-4875-98f0-6cc524809337</EntryId>
      <Description />
      <Title>NCrunch–Automated Testing</Title>
      <Categories>NCrunch;Testing</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;Singleton: A class which only allows a single instance&lt;/p&gt;  &lt;p&gt;Very controversial in general. &lt;/p&gt;  &lt;p&gt;NodaTime – Jons open source library, which implements good practices&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:65ff6c4f-6de1-43c1-b4d4-423f67900240" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;namespace&lt;/span&gt; Sandbox&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DoSomething()&lt;br&gt;         {&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;SingletonClient&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; UseSingleton()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; s1 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;();&lt;br&gt;             s1.DoSomething();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; s2 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;();&lt;br&gt;             s2.DoSomething();&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Ahh – can make 2 of the singleton class!&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:48bc8eb5-9c1f-4e55-b89c-3024a30347ee" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DoSomething()&lt;br&gt;         {&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;SingletonClient&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; UseSingleton()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//Singleton s1 = new Singleton();&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//s1.DoSomething();&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Singleton s2 = new Singleton();&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//s2.DoSomething();&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;.DoSomething();&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;but want to instantiate class.. just not have 2 possible&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4b19a61d-d772-4c0a-9b82-a1c6bd759cf8" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;//global state - bad&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; instance;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; Singleton()&lt;br&gt;     {&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; CreateInstance()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (instance == &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;)&lt;br&gt;         {&lt;br&gt;             instance = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;();&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; instance;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//raison d&amp;#39;etre for the class&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DoSomething()&lt;br&gt;     {&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;SingletonClient&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; UseSingleton()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; s1 = &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;.CreateInstance();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; s2 = &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;.CreateInstance();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreSame(s1,s2);&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;However if on multiple threads this could be bad as both could get to the new Singleton() line at the same time.&lt;/p&gt;  &lt;p&gt;mutex locks..complex&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:33ed9973-021e-4a3e-8368-7e869d876038" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;//clr manages locking, mutex and volatile stuff&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; instance = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;();&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//empty static constructor - chaanges when the clr is allowed to initialise this...&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//will only initialise before it is first used.&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; Singleton() {}&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; Singleton()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//stuff that must only happen once&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Singleton constructor&amp;quot;&lt;/span&gt;);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; Instance { &lt;span style="color:#0000ff"&gt;get&lt;/span&gt; { &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; instance; } }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SayHi()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//raison d&amp;#39;etre for the class&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DoSomething()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;// This must be thread-safe... it can be got at from multiple threads... thats its purpose&lt;/span&gt;&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;SingletonClient&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; UseSingleton()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;.SayHi();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Start of test&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; s1 = &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;.Instance;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; s2 = &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;.Instance;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreSame(s1,s2);&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;asdf&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/TekPub-Design-Patterns-Jon-SkeetSingleto_CD1A/image_2.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/TekPub-Design-Patterns-Jon-SkeetSingleto_CD1A/image_thumb.png" width="244" height="220" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;but say we wanted real laziness ie only creating the singleton when needed:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9f37c262-15cf-4bd9-96a0-16725b1043c7" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//nested class&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;SingletonHolder&lt;/span&gt;&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;internal&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; instance = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;();&lt;br&gt;             &lt;span style="color:#008000"&gt;//empty static constructor - forces laziness!&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; SingletonHolder() {}&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; Singleton()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//stuff that must only happen once&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Singleton constructor&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; Instance { &lt;span style="color:#0000ff"&gt;get&lt;/span&gt; { &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#2b91af"&gt;SingletonHolder&lt;/span&gt;.instance; } }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SayHi()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//raison d&amp;#39;etre for the class&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DoSomething()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;// This must be thread-safe... it can be got at from multiple threads... thats its purpose&lt;/span&gt;&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;SingletonClient&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; UseSingleton()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;.SayHi();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Start of test&amp;quot;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; s1 = &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;.Instance;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; s2 = &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;.Instance;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreSame(s1,s2);&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;.NET4 could use Lazy&amp;lt;T&amp;gt;&lt;/p&gt;</Content>
      <Created>2012-05-16T15:52:47.171875-04:00</Created>
      <Modified>2012-05-16T16:49:51.078125-04:00</Modified>
      <EntryId>8b56021a-98e4-44b1-a138-0052459da335</EntryId>
      <Description />
      <Title>TekPub Design Patterns Jon Skeet–Singleton</Title>
      <Categories>Patterns;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>