<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-06-08T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;blockquote&gt;   &lt;p&gt;A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.&lt;/p&gt;    &lt;p&gt;A number &lt;var&gt;n&lt;/var&gt; is called deficient if the sum of its proper divisors is less than&lt;var&gt;n&lt;/var&gt; and it is called abundant if this sum exceeds &lt;var&gt;n&lt;/var&gt;.&lt;/p&gt;    &lt;p&gt;As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.&lt;/p&gt;    &lt;p&gt;Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;I solved this in a much different way than:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.mathblog.dk/project-euler-23-find-positive-integers-not-sum-of-abundant-numbers/"&gt;http://www.mathblog.dk/project-euler-23-find-positive-integers-not-sum-of-abundant-numbers/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I basically wrote a function:&amp;#160; CanBeWrittenAsASumOf2Abundantnumbers&lt;/p&gt;  &lt;p&gt;then called that from 1 to 28123 times.&lt;/p&gt;  &lt;p&gt;It took 11minutes and 33secs to run (compared to 110ms of his version).&amp;#160;&amp;#160;&amp;#160; So he basically uses a Sieve.&amp;#160; &lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b5e7d8a0-3a8e-446a-95aa-2ce892458c92" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E23Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsAbundant_Given12_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E23&lt;/span&gt;.IsAbundantNumber(12);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetAllAbundantNumbersUnder_Given12_Return12()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E23&lt;/span&gt;.GetAllAbundantNumbersUnder(13);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.Contains(result, 12);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CanBeWrittenAsSumOf2AbundantNumbers_Given24_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;E23&lt;/span&gt;.MakeAbundantNumbers();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E23&lt;/span&gt;.CanBeWrittenAsSumOf2AbundantNumbers(24);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; MakeAbundantNumbers_GivenNothing_ReturnAbundantNumbersListOfInts()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;E23&lt;/span&gt;.MakeAbundantNumbers();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E23&lt;/span&gt;.AllAbundantNumbers;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.IsNotEmpty(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Solve_GivenNothing_GetAnswer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E23&lt;/span&gt;.Solve();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(411, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E23&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; AllAbundantNumbers { &lt;span style="color:#0000ff"&gt;get&lt;/span&gt;; &lt;span style="color:#0000ff"&gt;set&lt;/span&gt;; }&lt;br&gt;     &lt;span style="color:#008000"&gt;//for all numbers between 1 and 28123&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//find which cannot be written as the sum of two abundant numbers&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; Solve()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;E23&lt;/span&gt;.MakeAbundantNumbers();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; sum = 0;&lt;br&gt;         &lt;span style="color:#008000"&gt;//28123&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; 2000; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!CanBeWrittenAsSumOf2AbundantNumbers(i))&lt;br&gt;             {&lt;br&gt;                 sum += i;&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;i: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, i);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; sum;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; MakeAbundantNumbers()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; listOfAbundantNumbers = GetAllAbundantNumbersUnder(28123);&lt;br&gt;         AllAbundantNumbers = listOfAbundantNumbers;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; CanBeWrittenAsSumOf2AbundantNumbers(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//only try the abundant numbers which are less than the number-11 (as the first abundant number is 12)&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; listOfAbundantNumbers = AllAbundantNumbers.Where(x =&amp;gt; x &amp;lt; number-11);&lt;br&gt;         &lt;br&gt;         &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; listOfAbundantNumbers)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//reverse the order?&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfAbundantNumbers2 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;(listOfAbundantNumbers);&lt;span style="color:#008000"&gt;//.Where(x =&amp;gt; x &amp;lt; number-i+1).OrderByDescending(x =&amp;gt; x);&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; j &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; listOfAbundantNumbers2)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; ((i + j) == number)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; GetAllAbundantNumbersUnder(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//isAbundant if the sum exceeds n&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfAbundantNumbers = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 12; i &amp;lt; number; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsAbundantNumber(i))&lt;br&gt;             {&lt;br&gt;                 listOfAbundantNumbers.Add(i);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; listOfAbundantNumbers;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsAbundantNumber(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; sum = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; number - 1; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (number % i == 0)&lt;br&gt;             {&lt;br&gt;                 sum += i;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (sum &amp;gt; number)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;else&lt;/span&gt;&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsPerfectNumber(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; sum = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; number-1; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (number % i == 0)&lt;br&gt;             {&lt;br&gt;                 sum += i;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (sum == number)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;else&lt;/span&gt;&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-06-08T22:02:41.90625-04:00</Created>
      <Modified>2012-06-08T22:02:41.90625-04:00</Modified>
      <EntryId>ccd3d875-5a70-457b-926c-eb477b62f134</EntryId>
      <Description />
      <Title>Euler 23–Abundant Numbers</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>