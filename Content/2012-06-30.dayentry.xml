<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-06-29T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;How to get the inverse of this function:&lt;/p&gt;  &lt;p&gt;x = n(3n-1)/2&lt;/p&gt;  &lt;p&gt;&lt;a href="http://math.stackexchange.com/questions/164645/steps-to-get-inverse-of-pentagonal"&gt;http://math.stackexchange.com/questions/164645/steps-to-get-inverse-of-pentagonal&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;How to create equations in Math.Stackexchange using TeX&lt;/p&gt;  &lt;p&gt;&lt;a href="http://meta.math.stackexchange.com/questions/107/faq-for-math-stackexchange"&gt;http://meta.math.stackexchange.com/questions/107/faq-for-math-stackexchange&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;So then I tried to get the inverse of Triangle and Hexagonal:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:16e41895-44ca-4ad5-ae6d-3cec86d2c997" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;    [&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E45Tests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsTriangle_GivenTriangleNumber_ReturnN()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E45&lt;/span&gt;.IsTriangle(40755);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(285, result);&lt;br&gt;         }&lt;br&gt;         &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsTriangle_GivenTriangleNumber6_ReturnN()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E45&lt;/span&gt;.IsTriangle(6);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(3, result);&lt;br&gt;             result = &lt;span style="color:#2b91af"&gt;E45&lt;/span&gt;.IsTriangle(15);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(5, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsTriangle_GivenBadTriangle_Return0()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E45&lt;/span&gt;.IsTriangle(9);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(0, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPentagonal_GivenPentNumber12_ReturnN()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E45&lt;/span&gt;.IsPentagonal(12);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(3, result);&lt;br&gt;         }&lt;br&gt;         &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPentagonal_GivenPentNumber35_ReturnN()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E45&lt;/span&gt;.IsPentagonal(35);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(5, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPentagonal_GivenPentNumber_ReturnN()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E45&lt;/span&gt;.IsPentagonal(40755);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(165, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPentagonal_GivenBadPentNumber_Return0()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E45&lt;/span&gt;.IsPentagonal(40756);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(0, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsHexagonal_GivenHexNumber15_ReturnN()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E45&lt;/span&gt;.IsHexagonal(15);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(3, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsHexagonal_GivenHexNumber_ReturnN()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E45&lt;/span&gt;.IsHexagonal(40755);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(143, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsHexagonal_GivenHexNumberBad_Return0()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E45&lt;/span&gt;.IsHexagonal(22);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(0, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Solve_Given_Return()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E45&lt;/span&gt;.Solve();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(1, result);&lt;br&gt;             &lt;span style="color:#008000"&gt;//1533776805&lt;/span&gt;&lt;br&gt; &lt;br&gt;         }&lt;br&gt; &lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E45&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; Solve()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; i = 40756; i &amp;lt; 9951140855; i++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsTriangle(i) != 0)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsHexagonal(i) != 0)&lt;br&gt;                     {&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsPentagonal(i) != 0)&lt;br&gt;                         {&lt;br&gt;                             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; i;&lt;br&gt;                         }&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 0;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; IsTriangle(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; i)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; t = (&lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(1 + 8 * i) - 1.0) / 2.0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (t == (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;)t)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;)t;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 0;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; IsPentagonal(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; i)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; t = (&lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(1 + 24 * i) + 1.0) / 6.0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (t == (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;)t)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;)t;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 0;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; IsHexagonal(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; i)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; t = (&lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(1 + 8 * i) + 1.0) / 4.0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (t == (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;)t)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;)t;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 0;&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Hardest part was working out the inverse of the quadratics.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.wikihow.com/Find-the-Inverse-of-a-Quadratic-Function"&gt;http://www.wikihow.com/Find-the-Inverse-of-a-Quadratic-Function&lt;/a&gt;&lt;/p&gt;</Content>
      <Created>2012-06-30T14:28:43.2526984-04:00</Created>
      <Modified>2012-06-30T14:28:43.2526984-04:00</Modified>
      <EntryId>d49c2b5d-bbe9-4fbf-87f4-b97863fb9079</EntryId>
      <Description />
      <Title>Euler 45</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>