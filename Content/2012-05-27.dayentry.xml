<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-05-26T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;Conditionals like if and else etc..&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c53207d5-05c5-44b4-8dd0-9a049456386f" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReturnTest()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;);&lt;br&gt;     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt;;&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;After return&amp;quot;&lt;/span&gt;); &lt;span style="color:#008000"&gt;//unreachable code detected warning&lt;/span&gt;&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; MethodReturningInt32() &lt;span style="color:#008000"&gt;//a friendly name for the alias int...which is actually an Int32&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;byte&lt;/span&gt; x = 10;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; x; &lt;span style="color:#008000"&gt;//implicit conversion to int&lt;/span&gt;&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IfElse()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x = 10;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (x &amp;gt; 5)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;x is greater than 5&amp;quot;&lt;/span&gt;);&lt;br&gt;     }&lt;br&gt;     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (x &amp;lt; 5)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;x is less than 5&amp;quot;&lt;/span&gt;);&lt;br&gt;     }&lt;br&gt;     &lt;span style="color:#0000ff"&gt;else&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;is greater than 5&amp;quot;&lt;/span&gt;);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//if (x) //wont compile ie if x isn&amp;#39;t null&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (x != 0)&lt;br&gt;     {&lt;br&gt;     }&lt;br&gt;     &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; y = &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!y)&lt;br&gt;     {&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; WhileTests()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x = 10;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;while&lt;/span&gt; (x &amp;lt; 15)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(x);&lt;br&gt;         x++;&lt;br&gt;     }&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Final value of x {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, x);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(15, x);&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DoWhileTests()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;//jon hardly ever uses..always runs once (set x to 20 and it will end up as 21)&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x = 10;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;do&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(x);&lt;br&gt;         x++;&lt;br&gt;     } &lt;span style="color:#0000ff"&gt;while&lt;/span&gt; (x &amp;lt; 15);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Final value of x: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, x);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(15, x);&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; BreakInWhile()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x = 10;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;while&lt;/span&gt; (x &amp;lt; 15)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (x % 3 == 0) &lt;span style="color:#008000"&gt;//multiple of 3&lt;/span&gt;&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;break&lt;/span&gt;; &lt;span style="color:#008000"&gt;//break out of nearest enclosing loop ie the while&lt;/span&gt;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(x);&lt;br&gt;         x++;&lt;br&gt;     }&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(12, x);&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ContinueInWhile()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x = 10;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;while&lt;/span&gt; (x &amp;lt; 15)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (x % 3 == 0) &lt;span style="color:#008000"&gt;//multiple of 3&lt;/span&gt;&lt;br&gt;         {&lt;br&gt;             x += 2;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;continue&lt;/span&gt;; &lt;span style="color:#008000"&gt;//skipping the x++&lt;/span&gt;&lt;br&gt;         }&lt;br&gt;         x++;&lt;br&gt;     }&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(15, x);&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ForLoops()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;//for(initialization; condition; action ;) &lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//action happens at end brace&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x = 0, y = 0; x + y &amp;lt; 10; x++, y += 2)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt; {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, x, y);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; BreakingInWhile()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; 4; i++)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; j = 0; j &amp;lt; 4; j++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt; {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, i, j);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i + j == 4)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;break&lt;/span&gt;; &lt;span style="color:#008000"&gt;//only will break out to end of j loop... so will always get i going from 0 to 3&lt;/span&gt;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ForEachTests()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] strings = { &lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Holly&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Robin&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;William&amp;quot;&lt;/span&gt; };&lt;br&gt;     &lt;span style="color:#008000"&gt;/*for (int i = 0; i &amp;lt; strings.Length; i++)&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;{&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;Console.WriteLine(strings[i]);&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;}*/&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; value &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; strings)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(value);&lt;br&gt;         &lt;span style="color:#008000"&gt;//value = &amp;quot;asfd&amp;quot;; readonly!&lt;/span&gt;&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ForEachOverList()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;//generic list.. a collection of strings&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; strings = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt;() { &lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Holly&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Robin&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;William&amp;quot;&lt;/span&gt; };&lt;br&gt;     &lt;span style="color:#008000"&gt;//foreach (string value in strings)&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    Console.WriteLine(value);&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//list of string implements IEnumerable of string&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//here is a translation as to what the compiler is doing under the hood&lt;/span&gt;&lt;br&gt;     { &lt;span style="color:#008000"&gt;//braces here to enclose scope&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; value;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;using&lt;/span&gt; (&lt;span style="color:#2b91af"&gt;IEnumerator&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; iterator = strings.GetEnumerator())&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;while&lt;/span&gt; (iterator.MoveNext())&lt;br&gt;             {&lt;br&gt;                 value = iterator.Current;&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(value);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-27T16:02:34.355875-04:00</Created>
      <Modified>2012-05-27T16:02:34.355875-04:00</Modified>
      <EntryId>61d6aa73-8cbc-4395-9eb2-ae73acfb13ac</EntryId>
      <Description />
      <Title>Tekpub 14–Control Flow</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9b27d6fa-38d5-4582-892d-e9cd68e7e38f" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; TimeSpanUsage()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;// System.DateTime (.NET 1.0)&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;// System.TimeSpan (.NET 1.0)&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;// System.DateTimeOffset (.NET 2.0SP1 / .NET 3.5)&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;// System.TimeZoneInfo (.NET 3.5)&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;// System.Timezone - rubbish.&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;// A timespan is a number of ticks.. where a tick is 10ns&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;// eg 2secs is a fixed amount of time&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;// whereas a month is not a fixed amount of time&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;TimeSpan&lt;/span&gt; fiveSeconds = &lt;span style="color:#2b91af"&gt;TimeSpan&lt;/span&gt;.FromSeconds(5);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;TimeSpan&lt;/span&gt; halfAMinute = &lt;span style="color:#2b91af"&gt;TimeSpan&lt;/span&gt;.FromMinutes(.5); &lt;span style="color:#008000"&gt;//a double.. floating point..&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#2b91af"&gt;TimeSpan&lt;/span&gt;.FromMilliseconds(35000), fiveSeconds + halfAMinute); &lt;span style="color:#008000"&gt;//timespan overloads + operator so can do this&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Assert.AreEqual(5000, fiveSeconds.Milliseconds); //gets the milliseconds component&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(5000d, fiveSeconds.TotalMilliseconds); &lt;span style="color:#008000"&gt;//gets the milliseconds component&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(0.5d, halfAMinute.TotalMinutes);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DateTimeUsage()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;// More widely used today than should be.. &lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;// Saying that this time is a local one.&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt; jonsTime = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt;(2011,4,1,21,24,0, &lt;span style="color:#2b91af"&gt;DateTimeKind&lt;/span&gt;.Local); &lt;span style="color:#008000"&gt;//April 1st 2011..but he is on  BST (British Summer Time)&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt; robsTime = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt;(2011,4,1,10,24,0, &lt;span style="color:#2b91af"&gt;DateTimeKind&lt;/span&gt;.Local);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt; davesTime = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt;(2011,4,1,15,24,0, &lt;span style="color:#2b91af"&gt;DateTimeKind&lt;/span&gt;.Local); &lt;span style="color:#008000"&gt;//As I&amp;#39;m in UTC-6 currently (Indiana)&lt;/span&gt;&lt;br&gt;             &lt;br&gt;             &lt;span style="color:#008000"&gt;//DateTime unspecifiedNine = new DateTime(2011,4,1,15,24,0, DateTimeKind.Unspecified); //hangover from .NET1.1..convert each way.&lt;/span&gt;&lt;br&gt;             &lt;br&gt;             &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt; utcTime = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt;(2011,4,1,20,24,0, &lt;span style="color:#2b91af"&gt;DateTimeKind&lt;/span&gt;.Utc); &lt;span style="color:#008000"&gt;// GMT and UTC roughly the same thing.. &lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//no way of saying robsTime and jonsTime represent the same instant&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(utcTime, davesTime.ToUniversalTime()); &lt;span style="color:#008000"&gt;// Assuming the systems default timezone (Indiana)&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(utcTime, utcTime.ToUniversalTime()); &lt;span style="color:#008000"&gt;// Said UTC already so wont convert anymore&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(davesTime, davesTime.ToLocalTime()); &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(davesTime, utcTime.ToLocalTime()); &lt;br&gt;             &lt;br&gt;             &lt;span style="color:#008000"&gt;//Assert.AreEqual(utcTime, unspecified.ToUniversalTime()); &lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//DateTime and TimeSpan are both value types - structs... immutable&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt; bedTime = jonsTime + &lt;span style="color:#2b91af"&gt;TimeSpan&lt;/span&gt;.FromHours(2);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt;(2011,4,1,23,24,0, &lt;span style="color:#2b91af"&gt;DateTimeKind&lt;/span&gt;.Local), bedTime);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//Daylight savings not working&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt; beforeTranstion = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt;(2011,3,27,0,0,0); &lt;br&gt;             &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt; afterTranstion = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt;(2011,3,27,3,0,0); &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#2b91af"&gt;TimeSpan&lt;/span&gt;.FromHours(3), afterTranstion - beforeTranstion); &lt;span style="color:#008000"&gt;//as far as jon was concerned.. only 2 hours had passed&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//do it in UTC is much easier..actually wont work on my machine as daylight savings happens at different date in the US.&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt; beforeTranstionUtc = beforeTranstion.ToUniversalTime();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt; afterTranstionUtc = afterTranstion.ToUniversalTime();&lt;br&gt;             &lt;span style="color:#008000"&gt;//Assert.AreEqual(TimeSpan.FromHours(2), afterTranstionUtc - beforeTranstionUtc); //as far as jon was concerned.. only 2 hours had passed&lt;/span&gt;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#008000"&gt;//another struct&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DateTimeOffsetTests()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;// .NET2.0SP1 / .NET3.5&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;DateTimeOffset&lt;/span&gt; jonsTime = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DateTimeOffset&lt;/span&gt;(2011,4,1,21,24,0,&lt;span style="color:#2b91af"&gt;TimeSpan&lt;/span&gt;.FromHours(1)); &lt;span style="color:#008000"&gt;//UTC+1&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(jonsTime);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(jonsTime.ToUniversalTime());&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;DateTimeOffset&lt;/span&gt; robsTime = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DateTimeOffset&lt;/span&gt;(2011,4,1,10,24,0,&lt;span style="color:#2b91af"&gt;TimeSpan&lt;/span&gt;.FromHours(-10));&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(jonsTime, robsTime);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(jonsTime.ToUniversalTime(), robsTime.ToUniversalTime()); &lt;span style="color:#008000"&gt;//important one&lt;/span&gt;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; TimeZoneInfoTests()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;// .NET3.5&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;// history..Argentina changed with 2 weeks notice not to change to daylight savings&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;TimeZoneInfo&lt;/span&gt; zone = &lt;span style="color:#2b91af"&gt;TimeZoneInfo&lt;/span&gt;.Local;&lt;br&gt;             &lt;span style="color:#008000"&gt;//TimeZoneInfo zone = TimeZoneInfo.FindSystemTimeZoneById(&amp;quot;Tokyo Standard Time&amp;quot;);&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Assert.AreEqual(TimeSpan.FromHours(0), zone.GetUtcOffset(new DateTime(2011,3,27,0,0,0))); //fails because I&amp;#39;m in CST&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt; {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt; {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;2}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, zone.Id, zone.DisplayName, zone.DaylightName);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//other months other than gregorian ie different cultures with 13 months.. &lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//DateTime.. cant have just a date&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//TimeSpan can give you time only...&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-27T15:16:05.27775-04:00</Created>
      <Modified>2012-05-27T15:16:05.27775-04:00</Modified>
      <EntryId>c4393cd6-9668-4a78-85d2-f1a35f95e949</EntryId>
      <Description />
      <Title>Tekpub 13–DateAndTime</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8c714f5f-d017-463f-a4d2-32942ee3048e" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CultureBug()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;//the Turkish test&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#2b91af"&gt;CultureInfo&lt;/span&gt; turkish = &lt;span style="color:#2b91af"&gt;CultureInfo&lt;/span&gt;.CreateSpecificCulture(&lt;span style="color:#a31515"&gt;&amp;quot;tr&amp;quot;&lt;/span&gt;);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Thread&lt;/span&gt;.CurrentThread.CurrentCulture = turkish;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; header = &lt;span style="color:#a31515"&gt;&amp;quot;mail&amp;quot;&lt;/span&gt;;&lt;br&gt;     &lt;span style="color:#008000"&gt;//Assert.AreEqual(header.ToUpper(), MailHeader); //puts a dot above the I&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//bool isMailHeader = header.Equals(MailHeader, StringComparison.CurrentCultureIgnoreCase);&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//bool isMailHeader = header.Equals(MailHeader, StringComparison.Ordinal);&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//Assert.IsTrue(isMailHeader);&lt;/span&gt;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(header.ToUpperInvariant(), MailHeader);&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-27T12:31:19.65275-04:00</Created>
      <Modified>2012-05-27T12:31:19.65275-04:00</Modified>
      <EntryId>acf4ced7-c1ce-4fd1-8b55-9be16ec4da8e</EntryId>
      <Description />
      <Title>C#–Tekpub 12–Cultures</Title>
      <Categories />
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>