<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-05-27T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:390cfca4-ee6f-4c67-95bc-31475949bb65" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; [&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;AnonymousTypes&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Demo()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//anonymous types are a C#3 feature&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//purely syntactic sugar..can use even if targeting .NET2&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//in C# is an immutable type with a bunch of properties&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//backtick a.. is the type when hover over&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; person = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; { FirstName = &lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;, LastName = &lt;span style="color:#a31515"&gt;&amp;quot;Skeet&amp;quot;&lt;/span&gt; };&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; person2 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; { FirstName = &lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;, LastName = &lt;span style="color:#a31515"&gt;&amp;quot;Skeet&amp;quot;&lt;/span&gt; };&lt;br&gt;             &lt;span style="color:#008000"&gt;//automatically overrides ToString to give { FirstName = Jon, LastName = Skeet }&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(person);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; person3 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt;&lt;br&gt;                               { &lt;br&gt;                                   FirstName = &lt;span style="color:#a31515"&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;,&lt;br&gt;                                   LastName = &lt;span style="color:#a31515"&gt;&amp;quot;Jones&amp;quot;&lt;/span&gt;,&lt;br&gt;                                   Address = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; {Town = &lt;span style="color:#a31515"&gt;&amp;quot;Tilehurst&amp;quot;&lt;/span&gt;, Country = &lt;span style="color:#a31515"&gt;&amp;quot;UK&amp;quot;}&lt;/span&gt;&lt;br&gt;                               };&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(person3); &lt;span style="color:#008000"&gt;//{ FirstName = Bob, LastName = Jones, Address = { Town = Tilehurst, Country = UK } }&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//also overrides GetHashCode and AreEquals&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(person, person2);&lt;br&gt;             &lt;span style="color:#008000"&gt;//gives nice debugging ToString in unit test&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Assert.AreEqual(person, person3); &lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(person.GetHashCode(), person2.GetHashCode());&lt;br&gt; &lt;br&gt;             person = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; {FirstName = &lt;span style="color:#a31515"&gt;&amp;quot;Dave&amp;quot;&lt;/span&gt;, LastName = &lt;span style="color:#a31515"&gt;&amp;quot;Skeet&amp;quot;}&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#008000"&gt;//cant convert&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//person = new { LastName = &amp;quot;Skeet&amp;quot;, FirstName=&amp;quot;Bob&amp;quot;};&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//immutable this wont work&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//person.FirstName = &amp;quot;Alan&amp;quot;;&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//makes property names of Length and LastName&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; person4 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; {person.FirstName.Length, person.LastName};&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; array = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[10];&lt;br&gt;             &lt;span style="color:#008000"&gt;//string[] array = {&amp;quot;asdf&amp;quot;, &amp;quot;as&amp;quot;};&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//implicitly typed arrays&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; people = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt;[]&lt;br&gt;                              {&lt;br&gt;                                  person,&lt;br&gt;                                  &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; {FirstName = &lt;span style="color:#a31515"&gt;&amp;quot;Rob&amp;quot;&lt;/span&gt;, LastName = &lt;span style="color:#a31515"&gt;&amp;quot;Conery&amp;quot;}&lt;/span&gt;&lt;br&gt;                              };&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; ints = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt;[] {1, 2, 3};&lt;br&gt;             &lt;span style="color:#008000"&gt;//int[] ints = {1, 2, 3};&lt;/span&gt;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//generic method&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DoSomething&amp;lt;T&amp;gt;(T value)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#0000ff"&gt;typeof&lt;/span&gt;(T));&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GenericMethod()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; person = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; {FirstName = &lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;, LastName = &lt;span style="color:#a31515"&gt;&amp;quot;Skeet&amp;quot;}&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#008000"&gt;//using type inference&lt;/span&gt;&lt;br&gt;             DoSomething(person);  &lt;span style="color:#008000"&gt;//&amp;lt;&amp;gt;f__AnonymousType0`2[System.String,System.String]..seeing the unspeakable name with angle brackets in it.&lt;/span&gt;&lt;br&gt; &lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/p&gt;</Content>
      <Created>2012-05-28T16:50:05.512125-04:00</Created>
      <Modified>2012-05-28T16:50:05.512125-04:00</Modified>
      <EntryId>1cae6a0d-ee96-45f5-b81b-ba7558865611</EntryId>
      <Description />
      <Title>Tekpub 22–Anonymous Types</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;AS of .NET2 and .NET3.5.. better way of creating delegates&lt;/p&gt;  &lt;p&gt;.NET2 – generics&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f0991d2a-17f2-424b-9361-2a22b5adbaa9" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;delegate&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Int32Action&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; value);&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//C#2 generics&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;delegate&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; &lt;span style="color:#2b91af"&gt;GenericAction&lt;/span&gt;&amp;lt;T&amp;gt;(T value);&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;AnonymousFunctionsTest&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; MethodTakingString(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; value)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(value);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; MethodGroupConversion()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;GenericAction&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; action = MethodTakingString;&lt;br&gt;             action(&lt;span style="color:#a31515"&gt;&amp;quot;Hi&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; SquareInt32(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//return x*x;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(x);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ListConversion()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; original = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 1, 2, 3 };&lt;br&gt;             &lt;span style="color:#008000"&gt;//ConvertAll takes a delegate and applies it to each item in the list&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//List&amp;lt;int&amp;gt; squares = original.ConvertAll(SquareInt32);&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt; squareRoots = original.ConvertAll(SquareInt32);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;double&lt;/span&gt; value &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; squareRoots)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(value);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; AnonymousMethods()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//faff - need to make a whole method just when we want to write something to the console  &lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Converter&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt; converter = &lt;span style="color:#0000ff"&gt;delegate&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x)&lt;br&gt;                                                    {&lt;br&gt;                                                        &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(x);&lt;br&gt;                                                    };&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; original = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 1, 2, 3 };&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt; squareRoots = original.ConvertAll(converter);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;double&lt;/span&gt; value &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; squareRoots)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(value);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; AnonymousMethods2()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; original = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 1, 2, 3 };&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt; squareRoots = original.ConvertAll(&lt;span style="color:#0000ff"&gt;delegate&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x)&lt;br&gt;                                 {&lt;br&gt;                                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(x);&lt;br&gt;                                 });&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;double&lt;/span&gt; value &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; squareRoots)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(value);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#008000"&gt;//anonymous method showing that it can accept variable changes&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ClosureAnonymousMethods()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; calls = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; power = 0.5; &lt;span style="color:#008000"&gt;//square root&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//a closure is some behaviour that can access the environment in which it is declared ie calls and power here&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//input, output&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Converter&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt; converter = &lt;span style="color:#0000ff"&gt;delegate&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x)&lt;br&gt;                                                    {&lt;br&gt;                                                        calls++;&lt;br&gt;                                                        &lt;span style="color:#008000"&gt;//power is a captured variable&lt;/span&gt;&lt;br&gt;                                                        &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Pow(x, power);&lt;br&gt;                                                    };&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; original = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 1, 2, 3 };&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt; squareRoots = original.ConvertAll(converter);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;double&lt;/span&gt; value &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; squareRoots)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(value);&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Total calls: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, calls);&lt;br&gt;             power = 2;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt; squares = original.ConvertAll(converter);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;double&lt;/span&gt; value &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; squares)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(value);&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Total calls: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, calls);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#008000"&gt;//lambda expressions have pretty much taken over from anonymous methods as of C#3&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ClosureLambda()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; power = 0.5;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Converter&amp;lt;int, double&amp;gt; converter = delegate(int x)&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//this is now a lambda expression.. =&amp;gt;  goes to&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Converter&amp;lt;int, double&amp;gt; converter = (int x) =&amp;gt;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//using type inference to just declare parameter name&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Converter&amp;lt;int, double&amp;gt; converter = (x) =&amp;gt;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//when only have one, don&amp;#39;t need brackets&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Converter&amp;lt;int, double&amp;gt; converter = x =&amp;gt;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//                                       {&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//                                           return Math.Pow(x, power);&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//                                       };&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//most people think of this as a lambda expressions..short and sweet..single expression on RHS&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//on LHS use type inference to work out types involved&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Converter&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt; converter = x =&amp;gt; &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Pow(x, power);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(converter); &lt;span style="color:#008000"&gt;//prints something horrible!&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; original = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 1, 2, 3 };&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt; squareRoots = original.ConvertAll(converter);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;double&lt;/span&gt; value &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; squareRoots)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(value);&lt;br&gt;             }&lt;br&gt;             power = 2;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt; squares = original.ConvertAll(converter);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;double&lt;/span&gt; value &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; squares)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(value);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#008000"&gt;//can build one from a lambda expression&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//it represents code as data&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//this is how linqtosql etc.. work&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ExpressionTrees()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//System.Linq.Expressions... ExpressionTree type which is a representation of some code&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Expression&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;Converter&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt;&amp;gt; converter = x =&amp;gt; &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Pow(x, 0.5);&lt;br&gt;             &lt;span style="color:#008000"&gt;//prints x =&amp;gt; Pow(Convert(x), 0.5)&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//representing code as data&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(converter);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//convert an expression tree into a delegate by compiling it&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Converter&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt; compiled = converter.Compile();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(compiled.Invoke(5));&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IgnoreParameters()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//cant do this in lambdas.. but rare to have to do this&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Converter&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt; converter = &lt;span style="color:#0000ff"&gt;delegate&lt;/span&gt; { &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 5.5; };&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(converter(10));&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DangerWillRobinson()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//predefined delegate types&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Action has a void return type&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Action&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; x1 = &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Action&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; x2 = &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Action&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;Guid&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; x3 = &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#008000"&gt;//returns an int&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Func&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; y = &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Func is a delegate which returns something... takes int, returning double here&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Func&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt; y1 = &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Func&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;double&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; y2 = Foo;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; a = y2(2, 3d);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;a is {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, a);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; Foo(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x, &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; y)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; x.ToString() + y.ToString();&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DangerWillRobinson2()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; words = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt;() { &lt;span style="color:#a31515"&gt;&amp;quot;Danger&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Will&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Robinson&amp;quot;&lt;/span&gt; };&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;Action&lt;/span&gt;&amp;gt; actions = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;Action&lt;/span&gt;&amp;gt;();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; word &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; words)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#008000"&gt;//Action that doesn&amp;#39;t take any paramaters and doesn&amp;#39;t return anything&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#008000"&gt;//actions.Add(() =&amp;gt; Console.WriteLine(word));&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; copy = word; &lt;span style="color:#008000"&gt;//**Easy to get bitten by this using lambada expressios.. and this is the fix to use a local variable&lt;/span&gt;&lt;br&gt;                 actions.Add(() =&amp;gt; &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(copy));&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//execute all the actions (delegates)&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#2b91af"&gt;Action&lt;/span&gt; action &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; actions)&lt;br&gt;             {&lt;br&gt;                 action(); &lt;span style="color:#008000"&gt;//prints Robinson Robinson robinson&lt;/span&gt;&lt;br&gt;             }&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-28T15:51:24.3715-04:00</Created>
      <Modified>2012-05-28T15:51:24.3715-04:00</Modified>
      <EntryId>baa52a71-4295-47df-adc3-35a332ee5357</EntryId>
      <Description />
      <Title>Tekpub 21–Delegates and Lambdas</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;Delegates have been in .NET since 1.0.. have got a bit better with every version of C#&lt;/p&gt;  &lt;p&gt;//a something that can do something with an integer! &lt;/p&gt;  &lt;p&gt;Delegate here are a bit like single method interfaces..they encapsulate a bit of behaviour&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:253c7ac1-df0d-4118-88fd-57b1389623f5" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; &lt;span style="color:#008000"&gt;//delegate type&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//behind the scenes compiler creates a class which inherits from System.MulticastDelegate&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;delegate&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Int32Action&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; value);&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//similar to:&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;interface&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IInt32Action&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DoIt(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; value);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Delegates&lt;/span&gt; : &lt;span style="color:#2b91af"&gt;IInt32Action&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; name;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; Delegates(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; name)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.name = name;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; Delegates(): &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;unknown&amp;quot;&lt;/span&gt;)&lt;br&gt;         {&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DoIt(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; value)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Interface implementation: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, value);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; RandomRob(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; value)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt; Delegate implementation: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, name, value);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//static means related to the type, and not any particular instance of the type&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; StaticRob(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; value)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Static method: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, value);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; StaticRob2(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; value)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Static method: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, value);&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:dba85f90-654e-4f32-97f0-5080a9126818" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DelegatesTest&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SingleMethodInterface()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//a something that can do something with an integer!&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;IInt32Action&lt;/span&gt; action = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Delegates&lt;/span&gt;();&lt;br&gt;         action.DoIt(10);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SimpleDelegateFromMethod()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//delegates have a target&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Delegates&lt;/span&gt; target = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Delegates&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#008000"&gt;//wiring an instance method up to a delegate, then invoking&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//C#1 way of writing ie new Int32Action&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//encapsulating - something we can invoke with an integer&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//can think of this as a method we are passing around&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Int32Action&lt;/span&gt; action = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Int32Action&lt;/span&gt;(target.RandomRob);&lt;br&gt; &lt;br&gt;         action.Invoke(5);&lt;br&gt;         &lt;span style="color:#008000"&gt;//same as Invoke above&lt;/span&gt;&lt;br&gt;         action(6);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DelegateFromStaticMethod()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Int32Action&lt;/span&gt; action = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Int32Action&lt;/span&gt;(&lt;span style="color:#2b91af"&gt;Delegates&lt;/span&gt;.StaticRob);&lt;br&gt;         action.Invoke(7);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; MultiCast()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Int32Action&lt;/span&gt; action1 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Int32Action&lt;/span&gt;(&lt;span style="color:#2b91af"&gt;Delegates&lt;/span&gt;.StaticRob);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Int32Action&lt;/span&gt; action2 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Int32Action&lt;/span&gt;(&lt;span style="color:#2b91af"&gt;Delegates&lt;/span&gt;.StaticRob2);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//single delegate instance that refers to 2 individual actions&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Int32Action&lt;/span&gt; action3 = action1 + action2;&lt;br&gt;         action3(20);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//all C#1 so far&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;h3&gt;Events&lt;/h3&gt;  &lt;p&gt;Events use delegates.&lt;/p&gt;  &lt;p&gt;Observer pattern – got something that happens… when something happens, I want to react.&lt;/p&gt;  &lt;p&gt;ie when user clicks on button, I want something to happen&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f16e70fa-7ea7-4187-b40b-b0bd987834a2" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;delegate&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; &lt;span style="color:#2b91af"&gt;FakeEventHandler&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; reason);&lt;br&gt;     &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;FakeEventRaiser&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#2b91af"&gt;FakeEventHandler&lt;/span&gt; currentHandler = &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; AddHandler(&lt;span style="color:#2b91af"&gt;FakeEventHandler&lt;/span&gt; handler)&lt;br&gt;         {&lt;br&gt;             currentHandler = currentHandler + handler;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; RemoveHandler(&lt;span style="color:#2b91af"&gt;FakeEventHandler&lt;/span&gt; handler)&lt;br&gt;         {&lt;br&gt;             currentHandler = currentHandler - handler;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DoSomething(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; text)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;FakeEventHandler&lt;/span&gt; tmp = currentHandler;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (tmp != &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;)&lt;br&gt;             {&lt;br&gt;                 tmp.Invoke(text);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:191c4bfa-b4e1-4e8a-8074-129beef451be" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;FakeEventRaiserTests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReportToConsole(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; text)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Called: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, text);    &lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; RaiseEvents()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//FakeEventHandler handler = new FakeEventHandler(ReportToConsole);&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//implicit method group conversions&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;FakeEventHandler&lt;/span&gt; handler = ReportToConsole;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;FakeEventRaiser&lt;/span&gt; raiser = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;FakeEventRaiser&lt;/span&gt;();&lt;br&gt;             raiser.DoSomething(&lt;span style="color:#a31515"&gt;&amp;quot;Not subscribed&amp;quot;&lt;/span&gt;);&lt;br&gt; &lt;br&gt;             raiser.AddHandler(handler);&lt;br&gt;             raiser.DoSomething(&lt;span style="color:#a31515"&gt;&amp;quot;Subscribed&amp;quot;&lt;/span&gt;);&lt;br&gt; &lt;br&gt;             raiser.AddHandler(handler);&lt;br&gt;             raiser.DoSomething(&lt;span style="color:#a31515"&gt;&amp;quot;Subscribed twice&amp;quot;&lt;/span&gt;);&lt;br&gt; &lt;br&gt;             raiser.RemoveHandler(handler);&lt;br&gt;             raiser.RemoveHandler(handler);&lt;br&gt;             raiser.DoSomething(&lt;span style="color:#a31515"&gt;&amp;quot;Unsubscribed&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;      &lt;p&gt;asdf&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a78425ab-1cea-4bab-866d-a6d6675b0e50" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;delegate&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ClickHandler&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;object&lt;/span&gt; sender, &lt;span style="color:#2b91af"&gt;EventArgs&lt;/span&gt; e);&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;LonghandEventRaiser&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ClickHandler&lt;/span&gt; currentHandler = &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//private void AddHandler(ClickHandler handler)&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    currentHandler = currentHandler + handler;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//private void RemoveHandler(ClickHandler handler)&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    currentHandler = currentHandler - handler;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; OnClick()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;ClickHandler&lt;/span&gt; tmp = currentHandler;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (tmp != &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;)&lt;br&gt;             {&lt;br&gt;                 tmp.Invoke(&lt;span style="color:#0000ff"&gt;this&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;EventArgs&lt;/span&gt;.Empty);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//longhand&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//public event ClickHandler Click&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    add { AddHandler(value); }&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    remove { RemoveHandler(value); }&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;event&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ClickHandler&lt;/span&gt; Click&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;add&lt;/span&gt; { currentHandler += &lt;span style="color:#0000ff"&gt;value&lt;/span&gt;; }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;remove&lt;/span&gt; {currentHandler -= &lt;span style="color:#0000ff"&gt;value&lt;/span&gt;;}&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0a24d82d-d0c2-4d42-b180-705a53db6e9c" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;LonghandeEventRaiserTests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReportToConsole(&lt;span style="color:#0000ff"&gt;object&lt;/span&gt; sender, &lt;span style="color:#2b91af"&gt;EventArgs&lt;/span&gt; e)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Report to console was called&amp;quot;&lt;/span&gt;);    &lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; RaiseEvents()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;ClickHandler&lt;/span&gt; handler = ReportToConsole;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; raiser = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;LonghandEventRaiser&lt;/span&gt;();&lt;br&gt;             raiser.OnClick();&lt;br&gt; &lt;br&gt;             raiser.Click += handler;&lt;br&gt;             raiser.OnClick();&lt;br&gt; &lt;br&gt;             raiser.Click += handler;&lt;br&gt;             raiser.OnClick();&lt;br&gt; &lt;br&gt;             raiser.Click -= handler;&lt;br&gt;             raiser.Click -= handler;&lt;br&gt;             raiser.OnClick();&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;asdf&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4195d54b-9c43-47ab-9768-0fc178ec862c" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ShorthandEventRaiser&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; OnClick()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//interestinglly this Click is referring to the field&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;ClickHandler&lt;/span&gt; tmp = Click;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (tmp != &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;)&lt;br&gt;             {&lt;br&gt;                 tmp.Invoke(&lt;span style="color:#0000ff"&gt;this&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;EventArgs&lt;/span&gt;.Empty);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//field like event - compiler generates&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;event&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ClickHandler&lt;/span&gt; Click;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//auto implemented property..&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//compiler generates backing field&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//and property accessor code&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; Name { &lt;span style="color:#0000ff"&gt;get&lt;/span&gt;; &lt;span style="color:#0000ff"&gt;set&lt;/span&gt;; }&lt;br&gt;         &lt;br&gt;         &lt;span style="color:#008000"&gt;//looks like a property&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//public event ClickHandler Click&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    add { currentHandler += value; }&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    remove { currentHandler -= value; }&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:475fcd31-1044-4be4-87e3-a101adb31dec" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; [&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ShorthandeEventRaiserTests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReportToConsole(&lt;span style="color:#0000ff"&gt;object&lt;/span&gt; sender, &lt;span style="color:#2b91af"&gt;EventArgs&lt;/span&gt; e)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Report to console was called&amp;quot;&lt;/span&gt;);    &lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; RaiseEvents()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;ClickHandler&lt;/span&gt; handler = ReportToConsole;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; raiser = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ShorthandEventRaiser&lt;/span&gt;();&lt;br&gt;             raiser.OnClick();&lt;br&gt; &lt;br&gt;             raiser.Click += handler;&lt;br&gt;             raiser.OnClick();&lt;br&gt; &lt;br&gt;             raiser.Click += handler;&lt;br&gt;             raiser.OnClick();&lt;br&gt; &lt;br&gt;             raiser.Click -= handler;&lt;br&gt;             raiser.Click -= handler;&lt;br&gt;             raiser.OnClick();&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-28T14:49:52.793375-04:00</Created>
      <Modified>2012-05-28T14:49:52.793375-04:00</Modified>
      <EntryId>d9f856c3-5bf8-4e45-b1fa-9152c7655c5d</EntryId>
      <Description />
      <Title>Tekpub 20–Delegates and Events</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:195c15ae-0fc5-4da6-8bfd-6eda0f1910b7" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;GenericCollectionTests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;//2 types of generics&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//generic types - only look at these today&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//generic methods&lt;/span&gt;&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ListBasics()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; names = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt;();&lt;br&gt;         names.Add(&lt;span style="color:#a31515"&gt;&amp;quot;fred&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;fred&amp;quot;&lt;/span&gt;, names[0]);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Generics()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//string is the generic type argument.. hi is the argument&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Fred&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; fred = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Fred&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt;(&lt;span style="color:#a31515"&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;, fred.Foo());&lt;br&gt;         &lt;br&gt;         &lt;span style="color:#008000"&gt;//var only used to declare local variables&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; fred2 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Fred&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;(100);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(100, fred2.Foo());&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DictionaryNastyness()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Dictionary&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;&amp;gt; map = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Dictionary&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;&amp;gt;();&lt;br&gt;         &lt;span style="color:#008000"&gt;//much more readable&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; map2 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Dictionary&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;&amp;gt;();&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;//T is a generic type parameter&lt;/span&gt;&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Fred&lt;/span&gt;&amp;lt;T&amp;gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;//field&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//string could be decimal.. all still compiles..&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//so can make it generic.. don&amp;#39;t care what the type is&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; T greeting;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//greeting is the parameter&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; Fred(T greeting)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.greeting = greeting;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; T Foo()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; greeting;&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;FredOld&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;//field&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//string could be decimal.. all still compiles..&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//so can make it generic.. don&amp;#39;t care what the type is&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; greeting;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; FredOld(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; greeting)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.greeting = greeting;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; Foo()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; greeting;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-27T23:10:51.074625-04:00</Created>
      <Modified>2012-05-27T23:10:51.074625-04:00</Modified>
      <EntryId>3a749a3f-f73a-413e-8b22-b0ba7e95a2c7</EntryId>
      <Description />
      <Title>Tekpub 16–List and Generics</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:cac6f281-c199-4dc0-8b30-2c0d3677adcd" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ArrayTest()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//integer array of size 10.. 10 integers - can&amp;#39;t change size once created&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//int is a value type, but as soon as its an array.. reference type&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[] array = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[10];&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; array1 = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; array2 = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; array3 = 0;&lt;br&gt;             &lt;span style="color:#008000"&gt;//...in an array, the values can accessed as variables&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//all arrays are reference types&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//have changed the reference to a new array here&lt;/span&gt;&lt;br&gt;             array = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[50];&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//initialized with null values&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] strings = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[10];&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ArrayTest2()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[] array = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[5];&lt;br&gt;             array[0] = 20;&lt;br&gt;             array[1] = 30;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; value = array[0];&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(20, value);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(5, array.Length);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; array.Length; i++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#008000"&gt;//Console.WriteLine(array[i]);&lt;/span&gt;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#008000"&gt;//compiler would actually do a for loop like above&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; tmp &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; array)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(tmp);&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//doing a foreach.. compiler would Enumerate&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//can do this assignment as array implements IEnumerable&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; sequence = array;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//initialize array very simply by giving it values&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[] Seeds = {10, 20, 30};&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ArrayMutable()&lt;br&gt;         {&lt;br&gt;             Seeds[0] = 100;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Assert.AreEqual(10, Seeds[0]); //always fails!  can&amp;#39;t have an immutable array&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//All other collections build on Array&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Unless want cracking performance, use greater level of abstraction ie more generic collections&lt;/span&gt;&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-27T23:10:42.809-04:00</Created>
      <Modified>2012-05-27T23:10:42.809-04:00</Modified>
      <EntryId>c7dc43c2-652d-407d-89bf-223d0156808b</EntryId>
      <Description />
      <Title>Tekpub 15–Arrays</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2db27a8d-c8fc-4523-accd-68f282d3a0a9" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;GenericListAndDictionaries&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#008000"&gt;//a list is a sequence.. which keeps its order&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ListBasics()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//list of T, and we&amp;#39;re using string as the type argument&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; names = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt;();&lt;br&gt;         names.Add(&lt;span style="color:#a31515"&gt;&amp;quot;fred&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;fred&amp;quot;&lt;/span&gt;, names[0]);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(1, names.Count);&lt;br&gt;         names.Add(&lt;span style="color:#a31515"&gt;&amp;quot;betty&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(2, names.Count);&lt;br&gt; &lt;br&gt;         names.RemoveAt(0);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(1, names.Count);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;betty&amp;quot;&lt;/span&gt;, names[0]);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//Jon tends not to use List.Sort or Array.Sort as he uses linq instead&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; names)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(x);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//behind the scenes.. the list actually has an array in it &lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//array is only partially used&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//when adding to a list.. it asks, do I have any spare capacity,.. if yes, put into the array... and increase internal counter for number elements used&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//if not enough room, create new array, copy everything into it&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//note havent passed anything to constructor or called it.. equivalent to ()&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; integers = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; {1, 2, 3};&lt;br&gt;         &lt;span style="color:#008000"&gt;//equivalent to:&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; tmp = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;         tmp.Add(1);&lt;br&gt;         tmp.Add(2);&lt;br&gt;         tmp.Add(3);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//a lot of list methods are superceeded now by linq&lt;/span&gt;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#008000"&gt;//myDictionary[key]= value&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//basically a way of looking something up really quickly&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//very efficient..uses a hashtable..basically a way of mapping any key to a number&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DictionaryBasics()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; map = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Dictionary&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;         map.Add(&lt;span style="color:#a31515"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;,10);&lt;br&gt;         &lt;span style="color:#008000"&gt;//an indexer&lt;/span&gt;&lt;br&gt;         map[&lt;span style="color:#a31515"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;] = 20;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; entry &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; map)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt; {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, entry.Key, entry.Value);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//common - fetching a value by its key&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; value = map[&lt;span style="color:#a31515"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;];&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(10, value);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//however if key doesnt exist above method will throw an exception&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; value2;&lt;br&gt;         &lt;span style="color:#008000"&gt;//out passes a value by reference and shouldn&amp;#39;t be used under normal circumstances&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; keyFound = map.TryGetValue(&lt;span style="color:#a31515"&gt;&amp;quot;blah&amp;quot;&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;out&lt;/span&gt; value2);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(keyFound);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(0,value2);&lt;br&gt; &lt;br&gt;         keyFound = map.TryGetValue(&lt;span style="color:#a31515"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;out&lt;/span&gt; value2);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(keyFound);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(20,value2);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(2, map.Count);&lt;br&gt; &lt;br&gt;         map = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Dictionary&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;&lt;br&gt;                   {&lt;br&gt;                       {&lt;span style="color:#a31515"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;, 50},&lt;br&gt;                       {&lt;span style="color:#a31515"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;, 70}&lt;br&gt;                   };&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-27T23:10:31.2465-04:00</Created>
      <Modified>2012-05-27T23:10:31.2465-04:00</Modified>
      <EntryId>0e11304e-4768-4941-944c-02cc2e64aacf</EntryId>
      <Description />
      <Title>Tekpub 17–Generic List and Dictionary</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b4f42ae2-5887-4a78-90bd-4cd3fba2d777" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BaseClass&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//field&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; name;&lt;br&gt;         &lt;span style="color:#008000"&gt;//property&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; Name { &lt;span style="color:#0000ff"&gt;get&lt;/span&gt; { &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; name; } }&lt;br&gt;         &lt;br&gt;         &lt;span style="color:#008000"&gt;//constructor chaining.. initializers to call each other in succession&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; BaseClass() : &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;)&lt;br&gt;         {&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; BaseClass(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; name)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.name = name;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//virtual means I can override it in my derived class&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;virtual&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; CalculateResult(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; x*2;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; TrebleInput(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; x*3;&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:093e38fd-c62d-4ad6-ac69-acf475ddb553" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#008000"&gt;//in java superclass and subclass&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//in c# it is base class and derived class&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//: inherits from, or derives from&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DerivedClass&lt;/span&gt; : &lt;span style="color:#2b91af"&gt;BaseClass&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//parameterless constructor&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; DerivedClass() : &lt;span style="color:#0000ff"&gt;base&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;Derived default&amp;quot;&lt;/span&gt;)&lt;br&gt;         {&lt;br&gt;         }&lt;br&gt;             &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; DerivedClass(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; localName) : &lt;span style="color:#0000ff"&gt;base&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;Derived &amp;quot;&lt;/span&gt; + localName)&lt;br&gt;         {&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;override&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; CalculateResult(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; x / 2;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; QuadrupleInt(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; x*4;&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8ae328dd-0293-4054-ba4d-8bf7780c9483" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BaseClassTests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CalculateResultDoublesInput()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;BaseClass&lt;/span&gt; test = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BaseClass&lt;/span&gt;();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(16, test.CalculateResult(8));&lt;br&gt;     }&lt;br&gt;     &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; TrebleResultTreblesInput()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;BaseClass&lt;/span&gt; test = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BaseClass&lt;/span&gt;();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(15, test.TrebleInput(5));&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; NameDefaultsToDefault()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;BaseClass&lt;/span&gt; test = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BaseClass&lt;/span&gt;();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;, test.Name);&lt;br&gt;     }&lt;br&gt;     &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SpecifiedNameIsPropogated()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;BaseClass&lt;/span&gt; test = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BaseClass&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;, test.Name);&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:829bfd96-d1b2-4606-883d-48a6c9059b51" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DerivedClassTests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DefaultName()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//assigning the reference of new DerivedClass, to a variable of type BaseClass&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//compile time type is baseclass, execution time type is derived class &lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;BaseClass&lt;/span&gt; test = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DerivedClass&lt;/span&gt;();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Derived default&amp;quot;&lt;/span&gt;, test.Name);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GivenName()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;BaseClass&lt;/span&gt; test = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DerivedClass&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;Dave&amp;quot;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Derived Dave&amp;quot;&lt;/span&gt;, test.Name);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; QuadrupleInput()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//compile time type is DerivedClass&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;DerivedClass&lt;/span&gt; test = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DerivedClass&lt;/span&gt;();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(16, test.QuadrupleInt(4));&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; TrebleResultTreblesInput()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;BaseClass&lt;/span&gt; test = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DerivedClass&lt;/span&gt;();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(15, test.TrebleInput(5));&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CalculateResultHalvesInput()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;BaseClass&lt;/span&gt; test = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DerivedClass&lt;/span&gt;();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(20, test.CalculateResult(40));&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//streams - eg file, http, memory, xml&lt;/span&gt;&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a40287cf-fc90-4f9f-8cdc-7c61e74c4c70" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;abstract&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Dancer&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;//readonly fields have to be assigned in the constructor&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; name;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; Name { &lt;span style="color:#0000ff"&gt;get&lt;/span&gt; { &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; name; } }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//doesn&amp;#39;t really need to be protected as can&amp;#39;t instantiate directly on abstract class&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;protected&lt;/span&gt; Dancer(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; name)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.name = name;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;abstract&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Dance();&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//a concrete method&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DanceTwice()&lt;br&gt;     {&lt;br&gt;         Dance();&lt;br&gt;         Dance();&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4beff844-7180-40f8-ae6e-b7ac15e45c23" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;TapDancer&lt;/span&gt; : &lt;span style="color:#2b91af"&gt;Dancer&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; TapDancer() : &lt;span style="color:#0000ff"&gt;base&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;My tap dancer&amp;quot;&lt;/span&gt;) {}&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;override&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Dance()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;drip drip&amp;quot;&lt;/span&gt;);       &lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b61cc12e-82ac-4007-a5e0-98263e9b7a99" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;TapDancerTests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DancerName()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Dancer&lt;/span&gt; dancer = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;TapDancer&lt;/span&gt;();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;My tap dancer&amp;quot;&lt;/span&gt;, dancer.Name);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DanceBabyDance()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Dancer&lt;/span&gt; dancer = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;TapDancer&lt;/span&gt;();&lt;br&gt;             dancer.Dance();&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DanceTwice()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Dancer&lt;/span&gt; dancer = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;TapDancer&lt;/span&gt;();&lt;br&gt;             dancer.DanceTwice();&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-27T23:10:19.65275-04:00</Created>
      <Modified>2012-05-27T23:10:19.65275-04:00</Modified>
      <EntryId>817d0cc6-44e7-4139-b492-11ab9ac864ea</EntryId>
      <Description />
      <Title>Tekpub 18 Inheritance</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ffd9c896-b04a-42c4-af14-08a5b4a7ceb0" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#008000"&gt;//sealed class you can&amp;#39;t derive from&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;sealed&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Chainsaw&lt;/span&gt; : &lt;span style="color:#2b91af"&gt;IControllable&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Start()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Brrrrrm&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Stop()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;da da da da&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;    &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c2ac8601-8f6a-47fe-9c14-4a7e3c93f7c6" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#008000"&gt;//a contract&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//typically interfaces define an ability&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//ending an interface name with able is usually a good idea&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;interface&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IControllable&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//members&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Start();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Stop();&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;    &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fc611a7f-69c1-4f94-a2e0-01c46f6f52f4" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;TapDancer&lt;/span&gt; : &lt;span style="color:#2b91af"&gt;Dancer&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; TapDancer() : &lt;span style="color:#0000ff"&gt;base&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;My tap dancer&amp;quot;&lt;/span&gt;) {}&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;override&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Dance()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;drip drip&amp;quot;&lt;/span&gt;);       &lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt;  &lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:702d9727-d781-4daf-a831-6937276b9016" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 500px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#008000"&gt;//abstract class you have to derive from for it to be useful&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;abstract&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Dancer&lt;/span&gt; : &lt;span style="color:#2b91af"&gt;IControllable&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//readonly fields have to be assigned in the constructor&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; name;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; Name { &lt;span style="color:#0000ff"&gt;get&lt;/span&gt; { &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; name; } }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//doesn&amp;#39;t really need to be protected as can&amp;#39;t instantiate directly on abstract class&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;protected&lt;/span&gt; Dancer(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; name)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.name = name;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;abstract&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Dance();&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Start()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Started dancing&amp;quot;&lt;/span&gt;);&lt;br&gt;             Dance();&lt;br&gt;         }&lt;br&gt;          &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Stop()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Stopped dancing&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//a concrete method&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DanceTwice()&lt;br&gt;         {&lt;br&gt;             Dance();&lt;br&gt;             Dance();&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:820f75bd-5905-4705-a927-b80897444d5e" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;StartAndStopper&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; StartAndStop(&lt;span style="color:#2b91af"&gt;IControllable&lt;/span&gt; controllable)&lt;br&gt;         {&lt;br&gt;             controllable.Start();&lt;br&gt;             controllable.Stop();&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0424512d-314d-44ba-aa86-df3b73711877" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;StartAndStopperTests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; StartAndStopTest()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Dancer&lt;/span&gt; dancer = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;TapDancer&lt;/span&gt;();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Chainsaw&lt;/span&gt; chainsaw = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Chainsaw&lt;/span&gt;();&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;StartAndStopper&lt;/span&gt; test = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;StartAndStopper&lt;/span&gt;();&lt;br&gt;             test.StartAndStop(dancer);&lt;br&gt;             test.StartAndStop(chainsaw);&lt;br&gt;         } &lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;IDisposable.Dispose – implemented by all sorts of things..&amp;#160; UI controls, filestreams, dbconnections&lt;/p&gt;  &lt;p&gt;IEnumerator&amp;lt;T&amp;gt; implements &lt;/p&gt;  &lt;p&gt;IEnumerable&amp;lt;T&amp;gt;..oneof the most useful interfaces in .NET&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Composition&lt;/p&gt;  &lt;p&gt;IAuthenticator (or able)… single method Authenticate..takes.&lt;/p&gt;  &lt;p&gt;if we have only 1 method of authentication.. could just make an authenticate class.. but..lose flexibility..testing!…this is a service.&lt;/p&gt;  &lt;p&gt;**DO THIS**&lt;/p&gt;  &lt;p&gt;eg we could pass in our own authenticator : IAuthenticator.. which say if username and password are the same, then it is authenticated.&lt;/p&gt;  &lt;p&gt;eg if can express dependencies in abstraction form…eg if want to test that a full disk gives as IO error when doing a write, could pass in a .. something.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:91184686-f040-41de-a9c7-7929e0643d98" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; [&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#008000"&gt;//both array and list&amp;lt;T&amp;gt; work as they implement IEnumerable&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ForEachTests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ArrayIteration()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[] array = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[] {3, 5, 10};&lt;br&gt;             DisplayContents(array);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ListIteration()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; list = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; {&lt;span style="color:#a31515"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;,&lt;span style="color:#a31515"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;,&lt;span style="color:#a31515"&gt;&amp;quot;c&amp;quot;}&lt;/span&gt;;&lt;br&gt;             DisplayContents(list);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//Gereric method, so it has its own type parameter of T&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//faking up foreach compiler gives us.&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DisplayContents&amp;lt;T&amp;gt;(&lt;span style="color:#2b91af"&gt;IEnumerable&lt;/span&gt;&amp;lt;T&amp;gt; collection)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//this will call IDisposable in a try finally block&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;using&lt;/span&gt; (&lt;span style="color:#2b91af"&gt;IEnumerator&lt;/span&gt;&amp;lt;T&amp;gt; iterator = collection.GetEnumerator())&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;while&lt;/span&gt; (iterator.MoveNext())&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(iterator.Current);&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-27T23:10:05.730875-04:00</Created>
      <Modified>2012-05-27T23:10:05.730875-04:00</Modified>
      <EntryId>2c587e80-bcbd-40b5-9e5c-91bfca3749cb</EntryId>
      <Description />
      <Title>Tekpub 19–Interfaces</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>