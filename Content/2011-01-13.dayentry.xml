<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2011-01-12T19:00:00-05:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;From the Guernsey adult literacy project, page 51.&lt;/p&gt;  &lt;p&gt;What arithmetical symbols do you have to insert in between the numbers to get the correct result?&lt;/p&gt;  &lt;p&gt;1 3 5 7 9 = 3&lt;/p&gt;  &lt;p&gt;1 3 5 7 9 = 47&lt;/p&gt;  &lt;p&gt;1 3 5 7 9 = 18&lt;/p&gt;  &lt;p&gt;Note that only the symbols +, –, * and / are used.&lt;/p&gt;  &lt;p&gt;An interesting challenge – do they mean that operator precedence is invoked too?&amp;#160; ie MIDAS – Multiply before divide before add before subtract?&lt;/p&gt;  &lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/aa691323(v=vs.71).aspx"&gt;http://msdn.microsoft.com/en-us/library/aa691323(v=vs.71).aspx&lt;/a&gt;&amp;#160; - order of all operators&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/WindowsLiveWriter/GuernseyChallenge_1462D/image_2.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/WindowsLiveWriter/GuernseyChallenge_1462D/image_thumb.png" width="271" height="159" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;a very useful sanity check in google.. &lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Answers I found are:&lt;/p&gt;  &lt;p&gt;-1-3+5-7+9 = (-1) - 3 + 5 - 7 + 9 = 3&lt;/p&gt;  &lt;p&gt;1+3*5-7+9 = 1 + (3 * 5) - 7 + 9 = 18    &lt;br /&gt;-1*3+5+7+9 = 181 + (3 * 5) - 7 + 9 = 18 &lt;/p&gt;  &lt;p&gt;1*3+5*7+9 =&amp;#160; (1 * 3) + (5 * 7) + 9 = 47    &lt;br /&gt;-1-3*5+7*9 =(-1) - (3 * 5) + (7 * 9) = 47&lt;/p&gt;  &lt;p&gt;Code I used is:&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt; opZ = &lt;span style="color: #006080"&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt; opA = &lt;span style="color: #006080"&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt; opB = &lt;span style="color: #006080"&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt; opC = &lt;span style="color: #006080"&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt; opD = &lt;span style="color: #006080"&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; h = 1; h &amp;lt;= 2; h++) &lt;span style="color: #008000"&gt;// making the first number positive or negative&lt;/span&gt;&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (h == 1) opZ = &lt;span style="color: #006080"&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (h == 2) opZ = &lt;span style="color: #006080"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 4; i++)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (i == 1) opA = &lt;span style="color: #006080"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (i == 2) opA = &lt;span style="color: #006080"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (i == 3) opA = &lt;span style="color: #006080"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (i == 4) opA = &lt;span style="color: #006080"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; j = 1; j &amp;lt;= 4; j++)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (j == 1) opB = &lt;span style="color: #006080"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (j == 2) opB = &lt;span style="color: #006080"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (j == 3) opB = &lt;span style="color: #006080"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (j == 4) opB = &lt;span style="color: #006080"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; k = 1; k &amp;lt;= 4; k++)&lt;br /&gt;            {&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (k == 1) opC = &lt;span style="color: #006080"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;;&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (k == 2) opC = &lt;span style="color: #006080"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;;&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (k == 3) opC = &lt;span style="color: #006080"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;;&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (k == 4) opC = &lt;span style="color: #006080"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;;&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; l = 1; l &amp;lt;= 4; l++)&lt;br /&gt;                {&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (l == 1) opD = &lt;span style="color: #006080"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;;&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (l == 2) opD = &lt;span style="color: #006080"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;;&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (l == 3) opD = &lt;span style="color: #006080"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;;&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (l == 4) opD = &lt;span style="color: #006080"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;;&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;string&lt;/span&gt; expression = opZ + 1 + opA + 3 + opB + 5 + opC + 7 + opD + 9;&lt;br /&gt;                    DataTable dummy = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; DataTable();&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; result = Convert.ToDouble(dummy.Compute(expression, &lt;span style="color: #0000ff"&gt;string&lt;/span&gt;.Empty));&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (result == 3)&lt;br /&gt;                        Debug.WriteLine(expression + &lt;span style="color: #006080"&gt;&amp;quot; = 3&amp;quot;&lt;/span&gt;);&lt;br /&gt;&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (result == 47)&lt;br /&gt;                        Debug.WriteLine(expression + &lt;span style="color: #006080"&gt;&amp;quot; = 47&amp;quot;&lt;/span&gt;);&lt;br /&gt;&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (result == 18)&lt;br /&gt;                        Debug.WriteLine(expression + &lt;span style="color: #006080"&gt;&amp;quot; = 18&amp;quot;&lt;/span&gt;);&lt;br /&gt;&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;thanks to &lt;a href="http://stackoverflow.com/questions/174664/operators-as-strings"&gt;http://stackoverflow.com/questions/174664/operators-as-strings&lt;/a&gt; for the DataTable help.&lt;/p&gt;

&lt;p&gt;From &lt;a href="http://stackoverflow.com/questions/4679056/code-smell-in-dynamic-expression"&gt;http://stackoverflow.com/questions/4679056/code-smell-in-dynamic-expression&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;TDD&lt;/h3&gt;

&lt;p&gt;To help in the refactoring I used tests to make sure I hadn’t broken anything:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; System;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; System.Text;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; System.Collections.Generic;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; System.Linq;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; Microsoft.VisualStudio.TestTools.UnitTesting;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; System.Data;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; System.Diagnostics;&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;namespace&lt;/span&gt; Guernsey1&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #008000"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #008000"&gt;/// What arithmetical symbols do you have to insert in between the numbers to get the correct result?&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #008000"&gt;/// 1 3 5 7 9 = 3&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #008000"&gt;/// 1 3 5 7 9 = 47&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #008000"&gt;/// 1 3 5 7 9 = 18&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #008000"&gt;/// There may be more than one answer for each one.&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #008000"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br /&gt;    [TestClass]&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; UnitTest1&lt;br /&gt;    {&lt;br /&gt;        [TestMethod]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; GetAnswersForResultIs3()&lt;br /&gt;        {&lt;br /&gt;            List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; listOfExpressions = findArithmeticSymbolsInNumericOrder13579ThatGivesThisResult(3);&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;string&lt;/span&gt; expression &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; listOfExpressions)&lt;br /&gt;                Assert.AreEqual(&lt;span style="color: #006080"&gt;&amp;quot;-1-3+5-7+9&amp;quot;&lt;/span&gt;, expression);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        [TestMethod]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; GetAnswersForResultIs47()&lt;br /&gt;        {&lt;br /&gt;            List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; listOfExpressions = findArithmeticSymbolsInNumericOrder13579ThatGivesThisResult(47);&lt;br /&gt;            Assert.AreEqual(&lt;span style="color: #0000ff"&gt;true&lt;/span&gt;, listOfExpressions.Contains(&lt;span style="color: #006080"&gt;&amp;quot;1*3+5*7+9&amp;quot;&lt;/span&gt;));&lt;br /&gt;            Assert.AreEqual(&lt;span style="color: #0000ff"&gt;true&lt;/span&gt;, listOfExpressions.Contains(&lt;span style="color: #006080"&gt;&amp;quot;-1-3*5+7*9&amp;quot;&lt;/span&gt;));&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        [TestMethod]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; GetAnswersForResultIs18()&lt;br /&gt;        {&lt;br /&gt;            List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; listOfExpressions = findArithmeticSymbolsInNumericOrder13579ThatGivesThisResult(18);&lt;br /&gt;            Assert.AreEqual(&lt;span style="color: #0000ff"&gt;true&lt;/span&gt;, listOfExpressions.Contains(&lt;span style="color: #006080"&gt;&amp;quot;-1*3+5+7+9&amp;quot;&lt;/span&gt;));&lt;br /&gt;            Assert.AreEqual(&lt;span style="color: #0000ff"&gt;true&lt;/span&gt;, listOfExpressions.Contains(&lt;span style="color: #006080"&gt;&amp;quot;1+3*5-7+9&amp;quot;&lt;/span&gt;));&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; findArithmeticSymbolsInNumericOrder13579ThatGivesThisResult(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; resultExpected)   &lt;span style="color: #008000"&gt;// Jons&lt;/span&gt;&lt;br /&gt;        {&lt;br /&gt;            List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; listOfExpressions = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt;();&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;string&lt;/span&gt;[] prefixes = { &lt;span style="color: #006080"&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span style="color: #006080"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; };&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;string&lt;/span&gt;[] operators = { &lt;span style="color: #006080"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;, &lt;span style="color: #006080"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, &lt;span style="color: #006080"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;, &lt;span style="color: #006080"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; };&lt;br /&gt;            IEnumerable&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; expressions = from prefix &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; prefixes&lt;br /&gt;                                              from opA &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; operators&lt;br /&gt;                                              from opB &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; operators&lt;br /&gt;                                              from opC &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; operators&lt;br /&gt;                                              from opD &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; operators&lt;br /&gt;                                              select prefix + 1 + opA + 3 + opB + 5 + opC + 7 + opD + 9;&lt;br /&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;string&lt;/span&gt; expression &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; expressions)&lt;br /&gt;            {&lt;br /&gt;                DataTable dummy = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; DataTable();&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; result = Convert.ToDouble(dummy.Compute(expression, &lt;span style="color: #0000ff"&gt;string&lt;/span&gt;.Empty));&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (result == resultExpected)&lt;br /&gt;                    listOfExpressions.Add(expression);&lt;br /&gt;            }&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; listOfExpressions;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; findArithmeticSymbolsInNumericOrder13579ThatGivesThisResult(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; resultExpected)  &lt;span style="color: #008000"&gt;// Cines&lt;/span&gt;&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;string&lt;/span&gt;[] prefixes = { &lt;span style="color: #006080"&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span style="color: #006080"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; };&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;string&lt;/span&gt;[] operators = { &lt;span style="color: #006080"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;, &lt;span style="color: #006080"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, &lt;span style="color: #006080"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;, &lt;span style="color: #006080"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; };&lt;br /&gt;            List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; listOfExpressions = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt;();&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;string&lt;/span&gt; opA &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; operators)&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;string&lt;/span&gt; opB &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; operators)&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;string&lt;/span&gt; opC &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; operators)&lt;br /&gt;                        &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;string&lt;/span&gt; opD &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; operators)&lt;br /&gt;                            &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;string&lt;/span&gt; prefix &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; prefixes)&lt;br /&gt;                            {&lt;br /&gt;                                &lt;span style="color: #0000ff"&gt;string&lt;/span&gt; expression = prefix + 1 + opA + 3 + opB + 5 + opC + 7 + opD + 9;&lt;br /&gt;                                DataTable dummy = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; DataTable();&lt;br /&gt;                                &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; result = Convert.ToDouble(dummy.Compute(expression, &lt;span style="color: #0000ff"&gt;string&lt;/span&gt;.Empty));&lt;br /&gt;                                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (result == resultExpected)&lt;br /&gt;                                    listOfExpressions.Add(expression);&lt;br /&gt;                            }&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; listOfExpressions;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; findArithmeticSymbolsInNumericOrder13579ThatGivesThisResult(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; resultExpected)   &lt;span style="color: #008000"&gt;// Anton1&lt;/span&gt;&lt;br /&gt;        {&lt;br /&gt;            List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; listOfExpressions = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt;();&lt;br /&gt;            var calculator = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; DataTable();&lt;br /&gt;            var operators = &lt;span style="color: #006080"&gt;&amp;quot;*/+-&amp;quot;&lt;/span&gt;;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; 0x200; ++i)&lt;br /&gt;            {&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;string&lt;/span&gt; expression = String.Format(&lt;span style="color: #006080"&gt;&amp;quot;{0}1{1}3{2}5{3}7{4}9&amp;quot;&lt;/span&gt;,&lt;br /&gt;                  (i &amp;amp; 0x100) != 0 ? &lt;span style="color: #006080"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; : &lt;span style="color: #006080"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,&lt;br /&gt;                  operators[(i &amp;gt;&amp;gt; 0) &amp;amp; 3],&lt;br /&gt;                  operators[(i &amp;gt;&amp;gt; 2) &amp;amp; 3],&lt;br /&gt;                  operators[(i &amp;gt;&amp;gt; 4) &amp;amp; 3],&lt;br /&gt;                  operators[(i &amp;gt;&amp;gt; 6) &amp;amp; 3]);&lt;br /&gt;&lt;br /&gt;                var result = calculator.Compute(expression, String.Empty);&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (Convert.ToDouble(result) == resultExpected)&lt;br /&gt;                    listOfExpressions.Add(expression);&lt;br /&gt;            }&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; listOfExpressions;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; findArithmeticSymbolsInNumericOrder13579ThatGivesThisResult(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; resultExpected)   &lt;span style="color: #008000"&gt;// Anton2 - not working yet.. how to get the listOfExpressions?&lt;/span&gt;&lt;br /&gt;        {&lt;br /&gt;            List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; listOfExpressions = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt;();&lt;br /&gt;            var operators = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Func&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;, &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;, &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt;[] {&lt;br /&gt;                          (a, b) =&amp;gt; a + b,&lt;br /&gt;                          (a, b) =&amp;gt; a - b,&lt;br /&gt;                          (a, b) =&amp;gt; a * b,&lt;br /&gt;                          (a, b) =&amp;gt; a / b &lt;br /&gt;            };&lt;br /&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; 0x200; ++i)&lt;br /&gt;            {&lt;br /&gt;                var stack = 0; &lt;span style="color: #008000"&gt;// max stack depth is 2 because only 2 priorities&lt;/span&gt;&lt;br /&gt;                var last = 0; &lt;span style="color: #008000"&gt;// imitate + for lowest precedence&lt;/span&gt;&lt;br /&gt;                var &lt;span style="color: #0000ff"&gt;value&lt;/span&gt; = (i &amp;amp; 0x100) != 0 ? -1 : 1;&lt;br /&gt;&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; j = 0; j &amp;lt; 5; ++j)   &lt;span style="color: #008000"&gt;// extra item to force last reduction&lt;/span&gt;&lt;br /&gt;                {&lt;br /&gt;                    var oper = (i &amp;gt;&amp;gt; j * 2) &amp;amp; 3; &lt;span style="color: #008000"&gt;// &amp;quot;input&amp;quot; operator&lt;/span&gt;&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (oper / 2 &amp;lt;= last / 2)  &lt;span style="color: #008000"&gt;// reduce?&lt;/span&gt;&lt;br /&gt;                    {&lt;br /&gt;                        stack = operators[last](stack, &lt;span style="color: #0000ff"&gt;value&lt;/span&gt;);&lt;br /&gt;                    }&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;else&lt;/span&gt; &lt;span style="color: #008000"&gt;// stack is empty; prepare to shift&lt;/span&gt;&lt;br /&gt;                        stack = &lt;span style="color: #0000ff"&gt;value&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (j == 4) &lt;span style="color: #0000ff"&gt;break&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;                    last = oper; &lt;span style="color: #008000"&gt;// shift operator&lt;/span&gt;&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;value&lt;/span&gt; = 3 + j * 2; &lt;span style="color: #008000"&gt;// &amp;quot;input&amp;quot; number&lt;/span&gt;&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;            &lt;span style="color: #008000"&gt;// result in stack&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; listOfExpressions;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;</Content>
      <Created>2011-01-13T05:27:55.52025-05:00</Created>
      <Modified>2011-01-16T15:49:27.223375-05:00</Modified>
      <EntryId>5972b679-3392-41a7-8fd6-69401bdaaa8b</EntryId>
      <Description />
      <Title>Dynamic Operators – Guernsey challenge</Title>
      <Categories>c# language;Competitions</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>