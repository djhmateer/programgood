<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2010-02-06T19:00:00-05:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/WindowsLiveWriter/CleanCodebyUncleBob_AEF1/image_2.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/WindowsLiveWriter/CleanCodebyUncleBob_AEF1/image_thumb.png" width="185" height="244" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;a title="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882" href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"&gt;http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;My notes below on Bobs book.. also need next article on refactoring PrimeNumber code.&lt;/p&gt;  &lt;p&gt;We need 'Clean Code' because otherwise it can bring a company to its knees    &lt;br /&gt;As messy code builds up, productivity decreases &lt;/p&gt;  &lt;p&gt;What is clean code?    &lt;br /&gt;Elegant, Efficient, Does one thing well, Simple, crisp abstractions, Has Unit Tests, Meaningful Names, minimal dependencies, Clear, no duplication, minimal number of entities, What you expect, beautiful &lt;/p&gt;  &lt;p&gt;Make code easy to read &lt;/p&gt;  &lt;p&gt;Boy Scout Rule:&amp;#160; Leave the campground cleaner than you found it... same for code.. leave it cleaner than you found it &lt;/p&gt;  &lt;p&gt;Dave's Simplest Refactoring List    &lt;br /&gt;** change one variable name for the better     &lt;br /&gt;** break up a function thats a bit too large     &lt;br /&gt;** eliminate one small bit of duplication     &lt;br /&gt;** clean up a composite if statement &lt;/p&gt;  &lt;p&gt;SRP - Single Responsibility Principle    &lt;br /&gt;OCP - Open Closed Principle     &lt;br /&gt;L     &lt;br /&gt;I     &lt;br /&gt;DIP - Dependency Inversion Principle &lt;/p&gt;  &lt;p&gt;DRY - Don't repeat yourself &lt;/p&gt;  &lt;h3&gt;2. Meaningful Names&lt;/h3&gt;  &lt;p&gt;intention revealing names    &lt;br /&gt;// this is bad!     &lt;br /&gt;int d; // elapsed time in days &lt;/p&gt;  &lt;p&gt;**// better....What is being measured, and the units    &lt;br /&gt;int elapsedTimeInDays; &lt;/p&gt;  &lt;p&gt;see c:\development\ch2 Intentional Names.    &lt;br /&gt;and ch2 Statistics Message &lt;/p&gt;  &lt;p&gt;   &lt;br /&gt;**&lt;strong&gt;Class names &lt;/strong&gt;- nouns (things), or noun phrases eg PrimeGenerator, WikiPage, Customer, Account, AddressParser.... not a verb (doing) eg manager, data, info &lt;/p&gt;  &lt;p&gt;**&lt;strong&gt;Method names&lt;/strong&gt; - verb or very phrases eg GeneratePrimes, postPayment, deletePage &lt;/p&gt;  &lt;h3&gt;3. Functions&lt;/h3&gt;  &lt;p&gt;**First rule:&amp;#160; they should be small    &lt;br /&gt;Second rule: they should be smaller than that! &lt;/p&gt;  &lt;p&gt;Do one thing! &lt;/p&gt;  &lt;p&gt;** shrink function down.. so one level of abstration per function &lt;/p&gt;  &lt;p&gt;TO test..    &lt;br /&gt;TO RenderPageWithSetupsAndTeardown, we check to see whether the page is a test page and if so, we include the setups and teardown.&amp;#160; In either case we render the page in HTML. &lt;/p&gt;  &lt;p&gt;One level of abstraction per function. &lt;/p&gt;  &lt;h3&gt;4. Comments&lt;/h3&gt;  &lt;p&gt;Comments are to compensate for our failure to express ourselves in code &lt;/p&gt;  &lt;p&gt;eg    &lt;br /&gt;// Check to see if the employee is eligible for full benefits     &lt;br /&gt;if ((employee.flag &amp;amp;&amp;amp; HOURLY_FLAG) &amp;amp;&amp;amp; (employee.age &amp;gt; 65)) &lt;/p&gt;  &lt;p&gt;or    &lt;br /&gt;if (employee.isEligibleForFullBenefits()) &lt;/p&gt;  &lt;p&gt;Dont comment out code :-) &lt;/p&gt;  &lt;p&gt;ch4Primes - great to understand at a higher level of abstraction &lt;/p&gt;  &lt;p&gt;5. Formatting    &lt;br /&gt;important &lt;/p&gt;  &lt;h3&gt;6. Objects and Data Abstraction&lt;/h3&gt;  &lt;p&gt;A class does not push its variables out through getters and setters    &lt;br /&gt;Rather it exposes abstract interfaces that allow its users to manipulate the essence of the data,     &lt;br /&gt;without having to know its implementation. &lt;/p&gt;  &lt;p&gt;** am here.. would be good to type in the code again looking at procedural stuff from page 96.    &lt;br /&gt;Objects expose behaviour and hide data.     &lt;br /&gt;Data Structures expose data and have no significant behaviour. &lt;/p&gt;  &lt;p&gt;DTO's - public variables and no functions    &lt;br /&gt;Active Records are special forms of DTO's...with public variables... and naviagtaional methods like save and find. &lt;/p&gt;  &lt;p&gt;7. Error Handling &lt;/p&gt;  &lt;p&gt;8. Boundaries &lt;/p&gt;  &lt;p&gt;9. Unit Tests    &lt;br /&gt;Very important to keep clean &lt;/p&gt;  &lt;p&gt;10. Classes    &lt;br /&gt;SRP     &lt;br /&gt;Good prime generator example     &lt;br /&gt;Open Closed principle &lt;/p&gt;  &lt;p&gt;11. Systems    &lt;br /&gt;Seperation of main     &lt;br /&gt;Factories     &lt;br /&gt;Dependency Injection &lt;/p&gt;  &lt;p&gt;12. Emergent Design &lt;/p&gt;  &lt;p&gt;13. Concurrency &lt;/p&gt;  &lt;p&gt;14. Successive Refinement - Case Study - command line parser &lt;/p&gt;  &lt;p&gt;15. JUnit internals - Case study (smaller) &lt;/p&gt;  &lt;p&gt;16. Refactoring SerialDate &lt;/p&gt;  &lt;p&gt;17. Smells and Heuristics    &lt;br /&gt;Comments     &lt;br /&gt;Environment     &lt;br /&gt;Functions     &lt;br /&gt;General     &lt;br /&gt;Java     &lt;br /&gt;Names&lt;/p&gt;</Content>
      <Created>2010-02-07T18:33:26.81975-05:00</Created>
      <Modified>2010-02-10T20:01:50.63675-05:00</Modified>
      <EntryId>8021218e-99fe-4967-a103-b34bf7ad31f1</EntryId>
      <Description />
      <Title>Clean Code by Uncle Bob</Title>
      <Categories>Clean Code by Uncle Bob</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>