<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-05-25T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:53688a4a-da55-4fdb-abc1-b09cebba15eb" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;StringEncodingTests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Encoding&lt;/span&gt; enc8 = &lt;span style="color:#2b91af"&gt;Encoding&lt;/span&gt;.UTF8;&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; StringTests()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//encoding easier.. cultures hard&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//a string is a set of UTF16 code units... Unicode is how characters are represented&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//ie maps a character to a number.. then an encoding maps numbers to bytes.&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//string AB = &amp;quot;AB&amp;quot;; // A = Unicode 65, and B = Unicode 66.  4 Bytes.. 16bit Integer.&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//range of char: 0-65535&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//kilngon is in unicode?&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; text = &lt;span style="color:#a31515"&gt;&amp;quot;Cafe/&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;/efaC&amp;quot;&lt;/span&gt;, Reverse(text));&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; Reverse(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; text)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;char&lt;/span&gt;[] chars = text.ToCharArray();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Array&lt;/span&gt;.Reverse(chars);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;(chars);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; EncodingTest()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//Encoding encoding = new UTF8Encoding();&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Encoding&lt;/span&gt; encoding = &lt;span style="color:#2b91af"&gt;Encoding&lt;/span&gt;.UTF8;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Encoding encoding = new UnicodeEncoding();&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//UTF16&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; text = &lt;span style="color:#a31515"&gt;&amp;quot;ABC&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;byte&lt;/span&gt;[] binary = encoding.GetBytes(text);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(65, binary[0]);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(66, binary[1]);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(67, binary[2]);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//encoding.. a way of converting from text to binary data, and back again&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//static Encoding enc8 = Encoding.UTF8;&lt;/span&gt;&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Crypto()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//hashing&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//sha256 is better then md5&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;using&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; md5 = &lt;span style="color:#2b91af"&gt;MD5&lt;/span&gt;.Create())&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;byte&lt;/span&gt;[] hash = md5.ComputeHash(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;byte&lt;/span&gt;[10]);&lt;br&gt;                 &lt;span style="color:#008000"&gt;//string hashAsText = Encoding.UTF8.GetString(hash);&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#008000"&gt;//string hashAsText = new UTF8Encoding().GetString(hash); //converting to text this way wont work well&lt;/span&gt;&lt;br&gt; &lt;br&gt;                 &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; hashAsText = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToBase64String(hash); &lt;span style="color:#008000"&gt;//good&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;byte&lt;/span&gt;[] backAgain = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.FromBase64String(hashAsText);&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(hashAsText);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; NastyGotcha()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;File&lt;/span&gt;.WriteAllText(&lt;span style="color:#a31515"&gt;&amp;quot;file.txt&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;); &lt;span style="color:#008000"&gt;//will default to UTF8&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;File&lt;/span&gt;.WriteAllText(&lt;span style="color:#a31515"&gt;&amp;quot;file.txt&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;Encoding&lt;/span&gt;.Default); &lt;span style="color:#008000"&gt;//ahh this will be the machine default.&lt;/span&gt;&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-26T12:40:49.4140108-04:00</Created>
      <Modified>2012-05-26T12:40:49.4140108-04:00</Modified>
      <EntryId>c14e2eef-bd83-4bbe-b418-a2d0498d3180</EntryId>
      <Description />
      <Title>Tekpub 10–Encoding</Title>
      <Categories>TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:54d4232d-3b00-4d9e-891f-0d0d0e6260f8" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; RegexTest1()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;// When worth using regex? Or use more primitive &lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;// If you have a complex pattern.. have to use many primitive operations&lt;/span&gt;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#2b91af"&gt;Regex&lt;/span&gt; pattern = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Regex&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot; &amp;quot;&lt;/span&gt;);&lt;br&gt;     &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; text = &lt;span style="color:#a31515"&gt;&amp;quot;Jon Skeet&amp;quot;&lt;/span&gt;;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] words = pattern.Split(text);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;, words[0]);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Skeet&amp;quot;&lt;/span&gt;, words[1]);&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; RegexTest2()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Regex&lt;/span&gt; pattern = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Regex&lt;/span&gt;(&lt;span style="color:#a31515"&gt;@&amp;quot;&amp;#92;d&amp;quot;&lt;/span&gt;);&lt;span style="color:#008000"&gt;//digit..verbatim string literal&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; text = &lt;span style="color:#a31515"&gt;&amp;quot;Jon0Skeet1Rob2Conery&amp;quot;&lt;/span&gt;;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] words = pattern.Split(text);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;, words[0]);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Skeet&amp;quot;&lt;/span&gt;, words[1]);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Rob&amp;quot;&lt;/span&gt;, words[2]);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Conery&amp;quot;&lt;/span&gt;, words[3]);&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#008000"&gt;// Using regex to parse a log file&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;// ie using regex to pattern match&lt;/span&gt;&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; RegexTest3()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Regex&lt;/span&gt; pattern = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Regex&lt;/span&gt;(&lt;span style="color:#a31515"&gt;@&amp;quot;&amp;#92;d&amp;quot;&lt;/span&gt;);&lt;span style="color:#008000"&gt;//digit..verbatim string literal&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; text = &lt;span style="color:#a31515"&gt;&amp;quot;Jon0Skeet1Rob2Conery&amp;quot;&lt;/span&gt;;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] words = pattern.Split(text);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;, words[0]);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Skeet&amp;quot;&lt;/span&gt;, words[1]);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Rob&amp;quot;&lt;/span&gt;, words[2]);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Conery&amp;quot;&lt;/span&gt;, words[3]);&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; PatternMatchLogFileParser()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; sampleLine = &lt;span style="color:#a31515"&gt;&amp;quot;WARNING 05/10/2011 13:15:15.000 ---FooBar--- The foo has been barred&amp;quot;&lt;/span&gt;;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//john finds this hard!  MSDN regex is good&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Regex&lt;/span&gt; pattern = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Regex&lt;/span&gt;(&lt;span style="color:#a31515"&gt;@&amp;quot;(?&amp;lt;level&amp;gt;&amp;#92;S+) &amp;quot;&lt;/span&gt; + &lt;span style="color:#008000"&gt;//brackets is grouping.. and name.  &amp;#92;S is non space chars   + means 1 or more  space&lt;/span&gt;&lt;br&gt;                               &lt;span style="color:#a31515"&gt;@&amp;quot;(?&amp;lt;timestamp&amp;gt;&amp;#92;d{2}/&amp;#92;d{2}/&amp;#92;d{4} &amp;#92;d{2}:&amp;#92;d{2}:&amp;#92;d{2}&amp;#92;.&amp;#92;d{3}) &amp;quot;&lt;/span&gt; + &lt;span style="color:#008000"&gt;// &amp;#92;d digit exactly 2 of them then forwardslash then 2 digits forwardslash then 4 digits escape the dot which is anything&lt;/span&gt;&lt;br&gt;                               &lt;span style="color:#a31515"&gt;@&amp;quot;---(?&amp;lt;category&amp;gt;[^-]+)--- &amp;quot;&lt;/span&gt; + &lt;span style="color:#008000"&gt;//not a hypen in category.. carot is anything except&lt;/span&gt;&lt;br&gt;                               &lt;span style="color:#a31515"&gt;@&amp;quot;(?&amp;lt;message&amp;gt;.*)&amp;quot;&lt;/span&gt;);&lt;span style="color:#008000"&gt;//dot is anything, star is 0 or more times&lt;/span&gt;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#2b91af"&gt;Match&lt;/span&gt; match = pattern.Match(sampleLine);&lt;span style="color:#008000"&gt;//Matches tries to match the pattern multiple times&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (match.Success)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; level = match.Groups[&lt;span style="color:#a31515"&gt;&amp;quot;level&amp;quot;&lt;/span&gt;].Value;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(level);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; timestamp = match.Groups[&lt;span style="color:#a31515"&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt;].Value;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt; dateTime = &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt;.ParseExact(timestamp, &lt;span style="color:#a31515"&gt;&amp;quot;dd/MM/yyyy HH:mm:ss.fff&amp;quot;&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;CultureInfo&lt;/span&gt;.InvariantCulture);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt; date = dateTime.Date;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(date);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(match.Groups[&lt;span style="color:#a31515"&gt;&amp;quot;category&amp;quot;&lt;/span&gt;]);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(match.Groups[&lt;span style="color:#a31515"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;]);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; TakeOutAllTheVowels()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; sampleLine = &lt;span style="color:#a31515"&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;;&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Regex&lt;/span&gt; pattern = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Regex&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;[aeiou]&amp;quot;&lt;/span&gt;);&lt;br&gt;     &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; noVowels = pattern.Replace(sampleLine, &lt;span style="color:#a31515"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;H?ll?, w?rld&amp;quot;&lt;/span&gt;, noVowels);&lt;br&gt; }&lt;br&gt; &lt;br&gt; [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; TakeOutAllTheVowels2()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; sampleLine = &lt;span style="color:#a31515"&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;;&lt;br&gt;     &lt;span style="color:#008000"&gt;//Regex pattern = new Regex(&amp;quot;[aeiou]&amp;quot;); //simpler here!&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//string noVowels = pattern.Replace(sampleLine, &amp;quot;?&amp;quot;);&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; noVowelHardWay = sampleLine.Replace(&lt;span style="color:#a31515"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;) &lt;span style="color:#008000"&gt;//character literal&lt;/span&gt;&lt;br&gt;                                         .Replace(&lt;span style="color:#a31515"&gt;&amp;quot;e&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;) &lt;span style="color:#008000"&gt;//method chaining&lt;/span&gt;&lt;br&gt;                                         .Replace(&lt;span style="color:#a31515"&gt;&amp;quot;i&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;)&lt;br&gt;                                         .Replace(&lt;span style="color:#a31515"&gt;&amp;quot;o&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;)&lt;br&gt;                                         .Replace(&lt;span style="color:#a31515"&gt;&amp;quot;u&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;H?ll?, w?rld&amp;quot;&lt;/span&gt;, &lt;span style="color:#ff0000"&gt;noVowels&lt;/span&gt;);&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-25T22:25:19.009125-04:00</Created>
      <Modified>2012-05-25T22:31:21.196625-04:00</Modified>
      <EntryId>2288b725-8745-4e11-9732-dee9822fcabc</EntryId>
      <Description />
      <Title>Tekpub - Regex</Title>
      <Categories>JonSkeet;regex;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e4c56962-a63f-47ab-8054-a8d5d6402ac0" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;StringStuffMore&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindThings()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; firstEllIndex = x.IndexOf(&lt;span style="color:#a31515"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(2, firstEllIndex);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; secondEllIndex = x.IndexOf(&lt;span style="color:#a31515"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;, firstEllIndex + 1);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(3, secondEllIndex);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; thirdEllIndex = x.IndexOf(&lt;span style="color:#a31515"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;, secondEllIndex + 1);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(-1, thirdEllIndex);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindMoreThings()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; firstEllIndex = x.IndexOf(&lt;span style="color:#a31515"&gt;&amp;quot;ll&amp;quot;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(2, firstEllIndex);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; secondEllIndex = x.IndexOf(&lt;span style="color:#a31515"&gt;&amp;quot;ll&amp;quot;&lt;/span&gt;, firstEllIndex + 1);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(-1, secondEllIndex);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindMoreThings2()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;jon skeet&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; spaceIndex = x.IndexOf(&lt;span style="color:#a31515"&gt;&amp;#39; &amp;#39;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (spaceIndex != -1)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; first = x.Substring(0, spaceIndex);&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; last = x.Substring(spaceIndex + 1); &lt;span style="color:#008000"&gt;//starts 1 after the space&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;jon&amp;quot;&lt;/span&gt;, first);&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;skeet&amp;quot;&lt;/span&gt;, last);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Split()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;Jon Skeet-Webb&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#008000"&gt;//equivalednt to x.Split(new char[] { &amp;#39; &amp;#39;, &amp;#39;-&amp;#39;,&amp;#39;|&amp;#39;});&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//syntactic sugar params array&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//string[] words = x.Split(&amp;#39; &amp;#39;, &amp;#39;-&amp;#39;, &amp;#39;|&amp;#39;); //splitting on multiple delimeters&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] words = x.Split(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;char&lt;/span&gt;[] {&lt;span style="color:#a31515"&gt;&amp;#39; &amp;#39;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;#39;|&amp;#39;}&lt;/span&gt;, 2); &lt;span style="color:#008000"&gt;//gives 2 back&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; word &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; words)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(word);&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;, words[0]);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Skeet-Webb&amp;quot;&lt;/span&gt;, words[1]);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Csv()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;0,1,,3,,5,,7&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#008000"&gt;//string[] words = x.Split(&amp;#39;,&amp;#39;);&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] words = x.Split(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;char&lt;/span&gt;[] {&lt;span style="color:#a31515"&gt;&amp;#39;,&amp;#39;}&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;StringSplitOptions&lt;/span&gt;.RemoveEmptyEntries);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; words.Length; i++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, i, words[i]);&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(5, words.Length);&lt;span style="color:#008000"&gt;// No null entries in the CSV&lt;/span&gt;&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-25T21:31:49.790375-04:00</Created>
      <Modified>2012-05-25T21:31:49.790375-04:00</Modified>
      <EntryId>2154b572-503f-4553-8994-7213b481bf5f</EntryId>
      <Description />
      <Title>Tekpub–String Split, IndexOf, Substring</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>