<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2010-12-15T19:00:00-05:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;Find the largest Product.. I got product wrong initially.&amp;#160; I summed instead.&amp;#160; Unit testing was great as when I realised my mistake was an easy fix, and had confidence in the code.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;[TestClass]&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; UnitTest1&lt;br /&gt;{&lt;br /&gt;    [TestMethod]&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; findGreatestProductOf5ConsecutiveDigitsInSimpleString()&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;string&lt;/span&gt; stringOfNumbers = &lt;span style="color: #006080"&gt;&amp;quot;1111112341111&amp;quot;&lt;/span&gt;;&lt;br /&gt;        ProductFinder productFinder = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; ProductFinder();&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = productFinder.findGreatestProduct(stringOfNumbers);&lt;br /&gt;        Assert.AreEqual(11, result);&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    [TestMethod]&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; findGreatestProductOf5ConsecutiveDigitsInLongString()&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;string&lt;/span&gt; stringOfNumbers = &lt;span style="color: #006080"&gt;&amp;quot;731671765313306249192251196744265747423553...&amp;quot;&lt;/span&gt;;&lt;br /&gt;        ProductFinder productFinder = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; ProductFinder();&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = productFinder.findGreatestProduct(stringOfNumbers);&lt;br /&gt;        Assert.AreEqual(123, result);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; ProductFinder&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; findGreatestProduct(&lt;span style="color: #0000ff"&gt;string&lt;/span&gt; stringOfNumbers)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #008000"&gt;//try first 3&lt;/span&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; lengthOfString = stringOfNumbers.Count();&lt;br /&gt;        List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt; listOfResults = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;char&lt;/span&gt;[] numbers = stringOfNumbers.ToArray();&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; lengthOfString-6; i++)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; first = Convert.ToInt32(stringOfNumbers.Substring(i, 1));&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; second = Convert.ToInt32(stringOfNumbers.Substring(i+1, 1));&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; third = Convert.ToInt32(stringOfNumbers.Substring(i+2, 1));&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; fourth = Convert.ToInt32(stringOfNumbers.Substring(i+3, 1));&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; fifth = Convert.ToInt32(stringOfNumbers.Substring(i+4, 1));&lt;br /&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = first * second * third * fourth * fifth;&lt;br /&gt;            listOfResults.Add(result);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; largestProduct = listOfResults.Max();&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; largestProduct;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;</Content>
      <Created>2010-12-16T04:46:14.987375-05:00</Created>
      <Modified>2010-12-16T04:47:08.987375-05:00</Modified>
      <EntryId>7159ebff-b555-469a-b387-b96fb701faea</EntryId>
      <Description />
      <Title>Euler#8 – Greatest Product</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;Find the 10001th Prime&lt;/p&gt;  &lt;p&gt;I used the test runner here to give me the answer.. didn’t even use a console application. &lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;[TestClass]&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; UnitTest1&lt;br /&gt;{&lt;br /&gt;    [TestMethod]&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; getSixthPrime()&lt;br /&gt;    {&lt;br /&gt;        PrimeTester primeTester = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; PrimeTester();&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = primeTester.generateThisNumberOfPrimes(6);&lt;br /&gt;        Assert.AreEqual(13, result);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    [TestMethod]&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; getSeventhPrime()&lt;br /&gt;    {&lt;br /&gt;        PrimeTester primeTester = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; PrimeTester();&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = primeTester.generateThisNumberOfPrimes(7);&lt;br /&gt;        Assert.AreEqual(17, result);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    [TestMethod]&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; getAnswerPrime() &lt;span style="color: #008000"&gt;//10001&lt;/span&gt;&lt;br /&gt;    {&lt;br /&gt;        PrimeTester primeTester = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; PrimeTester();&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = primeTester.generateThisNumberOfPrimes(10001);&lt;br /&gt;        Assert.AreEqual(12345, result);&lt;br /&gt;    }&lt;/pre&gt;

  &lt;br /&gt;and the class:&lt;/div&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; PrimeTester&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; generateThisNumberOfPrimes(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; numberOfPrimesToGenerate)&lt;br /&gt;    {&lt;br /&gt;        List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt; primes = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; toGenerate = 2147483630; &lt;span style="color: #008000"&gt;// nearly the largest int.&lt;/span&gt;&lt;br /&gt;        primes.Add(2);&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; currentNumberBeingTested = 3;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;while&lt;/span&gt; (primes.Count &amp;lt; toGenerate)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; squareRootOfNumberBeingTested = (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;)Math.Sqrt(currentNumberBeingTested);&lt;br /&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; isPrime = &lt;span style="color: #0000ff"&gt;true&lt;/span&gt;;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; primes.Count &amp;amp;&amp;amp; (primes[i] &amp;lt;= squareRootOfNumberBeingTested); ++i)&lt;br /&gt;            {&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (currentNumberBeingTested % primes[i] == 0)&lt;br /&gt;                {&lt;br /&gt;                    isPrime = &lt;span style="color: #0000ff"&gt;false&lt;/span&gt;;&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;break&lt;/span&gt;;&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (isPrime)&lt;br /&gt;                primes.Add(currentNumberBeingTested);&lt;br /&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (primes.Count == numberOfPrimesToGenerate)&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;break&lt;/span&gt;;&lt;br /&gt;            &lt;br /&gt;            currentNumberBeingTested += 2; &lt;span style="color: #008000"&gt;// as we don't want to test even numbers&lt;/span&gt;&lt;br /&gt;        }&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; primes[primes.Count-1];&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;</Content>
      <Created>2010-12-16T03:56:40.831125-05:00</Created>
      <Modified>2010-12-16T03:58:51.753-05:00</Modified>
      <EntryId>763f05b5-55b9-4c00-a02a-4da708732f81</EntryId>
      <Description />
      <Title>Euler #7 – 10001 Prime</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;I decided to try and do Test Driven Development here, so avoid any small problems.&lt;/p&gt;  &lt;p&gt;Problem was that my test harness in VS2010 wouldn’t start the agent: &lt;a href="http://stackoverflow.com/questions/4446416/vs2010-test-runner-unable-to-start-agent-process"&gt;http://stackoverflow.com/questions/4446416/vs2010-test-runner-unable-to-start-agent-process&lt;/a&gt; (Edit: It was Avira AntiVirus that was the culprit)&lt;/p&gt;  &lt;p&gt;&lt;img alt="alt text" src="http://i.imgur.com/y42F1.png" width="240" height="176" /&gt;&lt;/p&gt;  &lt;p&gt;After reinstalling VS2010, and trying to remember all the changes I’ve made since it last worked.. I can run all the tests, just not in the debugger.&amp;#160; Which is very useful.&lt;/p&gt;  &lt;p&gt;Euler problem is interesting:&lt;/p&gt;  &lt;p&gt;The sum of the squares of the first ten natural numbers is,&lt;/p&gt;  &lt;p&gt;1&lt;sup&gt;2&lt;/sup&gt; + 2&lt;sup&gt;2&lt;/sup&gt; + ... + 10&lt;sup&gt;2&lt;/sup&gt; = 385&lt;/p&gt;  &lt;p&gt;The square of the sum of the first ten natural numbers is,&lt;/p&gt;  &lt;p&gt;(1 + 2 + ... + 10)&lt;sup&gt;2&lt;/sup&gt; = 55&lt;sup&gt;2&lt;/sup&gt; = 3025&lt;/p&gt;  &lt;p&gt;Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 &lt;img border="0" alt="−" src="http://projecteuler.net/images/symbol_minus.gif" width="9" height="3" /&gt; 385 = 2640.&lt;/p&gt;  &lt;p&gt;Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.&lt;/p&gt;  &lt;p&gt;Source code here:&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:3bf7f1e5-5aa4-4334-bfa1-6700ce0c29f4" class="wlWriterEditableSmartContent"&gt;&lt;p&gt; &lt;a href="http://www.programgood.net/content/binary/WindowsLiveWriter/Euler6TDDandreinstallingVS2010_E72A/TestResults.zip" target="_blank"&gt;Source VS2010&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;class&lt;/span&gt; Program&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; Main(&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;[] args)&lt;br /&gt;    {&lt;br /&gt;        stuff thing = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; stuff();&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; sumOfSqaures = thing.sumOfSquares(100);&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; sqaureOfSums = thing.SquareOfSum(100);&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; result = sqaureOfSums - sumOfSqaures;&lt;br /&gt;        Console.WriteLine(result);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; stuff&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; sumOfSquares(&lt;span style="color: #0000ff"&gt;double&lt;/span&gt; upToInt)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; total = 0;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt;= upToInt; i++)&lt;br /&gt;            total += Math.Pow(i, 2);&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; total;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; SquareOfSum(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; upToInt)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; sum = 0;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt;= upToInt; i++)&lt;br /&gt;            sum += i;&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; Math.Pow(sum, 2);&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;and test code:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;[TestClass]&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; UnitTest1&lt;br /&gt;{&lt;br /&gt;    [TestMethod]&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; SumOfSquaresOfFirst10()&lt;br /&gt;    {&lt;br /&gt;        stuff thing = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; stuff();&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; result = thing.sumOfSquares(10);&lt;br /&gt;        Assert.AreEqual(385, result);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    [TestMethod]&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; SquareOfSumOfFirst10()&lt;br /&gt;    {&lt;br /&gt;        stuff thing = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; stuff();&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; result = thing.SquareOfSum(10);&lt;br /&gt;        Assert.AreEqual(3025, result);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    [TestMethod]&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; DifferenceBetweenTwoAbove()&lt;br /&gt;    {&lt;br /&gt;        stuff thing = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; stuff();&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; sumOfSqaures = thing.sumOfSquares(10);&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; sqaureOfSums = thing.SquareOfSum(10);&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; result = sqaureOfSums - sumOfSqaures;&lt;br /&gt;        Assert.AreEqual(2640, result);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;It was great using TDD.. made it very easy, and got answer right first time!&lt;/p&gt;</Content>
      <Created>2010-12-15T22:31:20.4405-05:00</Created>
      <Modified>2010-12-16T03:35:20.78425-05:00</Modified>
      <EntryId>e39aa45b-6dbe-46e9-8a55-9bbb530b49bf</EntryId>
      <Description />
      <Title>Euler#6 – TDD and reinstalling VS2010</Title>
      <Categories>Euler;TDD;VS2010</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>