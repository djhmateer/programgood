<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-05-28T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;New in .NET4&lt;/p&gt;  &lt;p&gt;Need to understand Generics.&lt;/p&gt;</Content>
      <Created>2012-05-28T22:36:22.52775-04:00</Created>
      <Modified>2012-05-28T22:36:22.52775-04:00</Modified>
      <EntryId>2d155374-ca52-4c33-9895-f911664f066f</EntryId>
      <Description />
      <Title>Tekpub 25–Covariance and Contravariance</Title>
      <Categories />
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;Good stuff!&lt;/p&gt;    &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:584df288-ea48-48e0-a870-b7d2305e5d2d" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;internal&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Extensions&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;internal&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; DoubleLenth(&lt;span style="color:#0000ff"&gt;this&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; text)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; text.Length * 2;&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;LinqTesting&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Scrathpad()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;// Disparate features of C#3 which come together in LINQ&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;// Anonymous types and type inference&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; person = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; { Name = &lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;, Age = 35 };&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;// Lambda expressions&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;// creating a delegate which says whether the input is more the 5 chars&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Func&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt;&amp;gt; isLong = x =&amp;gt; x.Length &amp;gt; 5;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;// Extension methods&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; doubleLength = &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;.DoubleLenth();&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;// LINQ - a fairly consistent way of accessing data from multiple data&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;// sources in as natural a way as possible.&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//**TEKPUB mastering linq series&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;// Collection initializer&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; names = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt;&lt;br&gt;                                      {&lt;br&gt;                                          &lt;span style="color:#a31515"&gt;&amp;quot;Rob, Friend&amp;quot;&lt;/span&gt;,&lt;br&gt;                                          &lt;span style="color:#a31515"&gt;&amp;quot;Holly, Family&amp;quot;&lt;/span&gt;,&lt;br&gt;                                          &lt;span style="color:#a31515"&gt;&amp;quot;This isn&amp;#39;t a name&amp;quot;&lt;/span&gt;,&lt;br&gt;                                          &lt;span style="color:#a31515"&gt;&amp;quot;Malcolm, Colleague&amp;quot;&lt;/span&gt;,&lt;br&gt;                                          &lt;span style="color:#a31515"&gt;&amp;quot;Tom, Family&amp;quot;&lt;/span&gt;&lt;br&gt;                                      };&lt;br&gt;             &lt;span style="color:#008000"&gt;// See if we can group each one of these names by relationship&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;// and turn it into something more strongly typed.&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Regex&lt;/span&gt; pattern = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Regex&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;([^,]*), (.*)&amp;quot;&lt;/span&gt;);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//whole thing on right is a query expression&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//range variable called line&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; query = &lt;span style="color:#0000ff"&gt;from&lt;/span&gt; line &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; names&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;let&lt;/span&gt; match = pattern.Match(line)&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;where&lt;/span&gt; match.Success&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;select&lt;/span&gt; &lt;span style="color:#0000ff"&gt;new&lt;/span&gt;&lt;br&gt;                         {&lt;br&gt;                             Name = match.Groups[1].Value,&lt;br&gt;                             Relationship = match.Groups[2].Value&lt;br&gt;                         } &lt;span style="color:#0000ff"&gt;into&lt;/span&gt; association&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;group&lt;/span&gt; association.Name &lt;span style="color:#0000ff"&gt;by&lt;/span&gt; association.Relationship;&lt;br&gt;             &lt;br&gt;             &lt;span style="color:#008000"&gt;// dot notation, method invokation syntax.. lambda syntax (hmm)&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//taking out the query expression..complex here.&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//this is what the compiler will make by magic behind the scenes&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//var query = names.Select(line =&amp;gt; pattern.Match(line)) &lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//                  .Where()&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//                  .Select&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//                  .GroupBy&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//just outputs the correct lines&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//var query = from line in names&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//            let match = pattern.Match(line)&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//            where match.Success&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//            select line;&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; group &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; query)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Relationship: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, group.Key);&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; name &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; group)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;   {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;,name);        &lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; asdf()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;// Collection initializer&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; names = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt;&lt;br&gt;                                      {&lt;br&gt;                                          &lt;span style="color:#a31515"&gt;&amp;quot;Rob, Friend&amp;quot;&lt;/span&gt;,&lt;br&gt;                                          &lt;span style="color:#a31515"&gt;&amp;quot;Holly, Family&amp;quot;&lt;/span&gt;,&lt;br&gt;                                          &lt;span style="color:#a31515"&gt;&amp;quot;This isn&amp;#39;t a name&amp;quot;&lt;/span&gt;,&lt;br&gt;                                          &lt;span style="color:#a31515"&gt;&amp;quot;Malcolm, Colleague&amp;quot;&lt;/span&gt;,&lt;br&gt;                                          &lt;span style="color:#a31515"&gt;&amp;quot;Tom, Family&amp;quot;&lt;/span&gt;&lt;br&gt;                                      };&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//more noisy in query expression&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; query = &lt;span style="color:#0000ff"&gt;from&lt;/span&gt; line &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; names&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;where&lt;/span&gt; line.Length &amp;lt; 15&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;select&lt;/span&gt; line;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; query2 = names.Where(lines =&amp;gt; lines.Length &amp;lt; 15);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; JoinTest()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;// Collection initializer&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; names = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt;&lt;br&gt;                                      {&lt;br&gt;                                          &lt;span style="color:#a31515"&gt;&amp;quot;Rob, Friend&amp;quot;&lt;/span&gt;,&lt;br&gt;                                          &lt;span style="color:#a31515"&gt;&amp;quot;Holly, Family&amp;quot;&lt;/span&gt;,&lt;br&gt;                                          &lt;span style="color:#a31515"&gt;&amp;quot;This isn&amp;#39;t a name&amp;quot;&lt;/span&gt;,&lt;br&gt;                                          &lt;span style="color:#a31515"&gt;&amp;quot;Malcolm, Colleague&amp;quot;&lt;/span&gt;,&lt;br&gt;                                          &lt;span style="color:#a31515"&gt;&amp;quot;Tom, Family&amp;quot;&lt;/span&gt;&lt;br&gt;                                      };&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; lengths = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; {10, 12, 13, 14, 15,16,17,18};&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//more noisy in query expression&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; query = &lt;span style="color:#0000ff"&gt;from&lt;/span&gt; line &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; names&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;join&lt;/span&gt; length &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; lengths &lt;span style="color:#0000ff"&gt;on&lt;/span&gt; line.Length &lt;span style="color:#0000ff"&gt;equals&lt;/span&gt; length&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;where&lt;/span&gt; line.Length &amp;lt; 20&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;select&lt;/span&gt; line;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; line &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; query)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(line);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DataStuff()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; lines = &lt;span style="color:#0000ff"&gt;from&lt;/span&gt; file &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Directory&lt;/span&gt;.GetFiles(&lt;span style="color:#a31515"&gt;&amp;quot;*.log&amp;quot;&lt;/span&gt;)&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;from&lt;/span&gt; line &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; &lt;span style="color:#2b91af"&gt;File&lt;/span&gt;.ReadLines(file)&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;where&lt;/span&gt; line.Contains(&lt;span style="color:#a31515"&gt;&amp;quot;Error&amp;quot;&lt;/span&gt;)&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;select&lt;/span&gt; line.Substring(10);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//edulinq.googlecode.com&lt;/span&gt;&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-28T21:36:45.90275-04:00</Created>
      <Modified>2012-05-28T21:36:45.90275-04:00</Modified>
      <EntryId>3a41121b-7131-4b08-b420-849f9620c937</EntryId>
      <Description />
      <Title>Tekpub 24–LINQ</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;we’ve got anonymous types, lambda expressions, and now Extension Methods&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:332a9b22-e240-4f09-9486-db0ec7678e62" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; InvokeReverse()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//extension methods are dirt simple compiler trickery&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//ideally would like this to be an instance method on string!&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//we can&amp;#39;t derive from string.&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//a static utility method currently.&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//string reversed = Extensions.Reverse(&amp;quot;hello&amp;quot;);&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; reversed = &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;.Reverse();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;olleh&amp;quot;&lt;/span&gt;, reversed);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReadFully()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; request = &lt;span style="color:#2b91af"&gt;WebRequest&lt;/span&gt;.Create(&lt;span style="color:#a31515"&gt;&amp;quot;http://localhost&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;using&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; response = request.GetResponse())&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;using&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; responseStream = response.GetResponseStream())&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#008000"&gt;//would like to be an instance method on stream!&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#008000"&gt;//byte[] data = Extensions.ReadFully(responseStream);&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;byte&lt;/span&gt;[] data = responseStream.ReadFully();&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(data.Length);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; MiniLinq()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//string[] names = {&amp;quot;Holly&amp;quot;, &amp;quot;Rob&amp;quot;, &amp;quot;Jon&amp;quot;, &amp;quot;Tom&amp;quot;, &amp;quot;William&amp;quot;};&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; names = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt;[] { &lt;span style="color:#a31515"&gt;&amp;quot;Holly&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Rob&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;William&amp;quot;&lt;/span&gt; };&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//its going to project each name to its length&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//then filter where less than 6&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//var query = names.Select(x =&amp;gt; x.Length)&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//                  .Where(x =&amp;gt; x &amp;lt; 6);&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//predicate is going first&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//lambda expression to express the predicate&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//var query = names.Where(x =&amp;gt; !x.EndsWith(&amp;quot;m&amp;quot;))&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//                 .Select(x =&amp;gt; x.ToUpper());&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//using an anonymous type&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//var query = names.Where(x =&amp;gt; !x.EndsWith(&amp;quot;m&amp;quot;))&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//                 .Select(x =&amp;gt; new&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//                            {&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//                                UpperName = x.ToUpper(),&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//                                Length = x.Length&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//                            }&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//                         );&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//this is not using normal linq.. just the Select and Where we wrote&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; query = &lt;span style="color:#0000ff"&gt;from&lt;/span&gt; x &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; names&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;where&lt;/span&gt; !x.EndsWith(&lt;span style="color:#a31515"&gt;&amp;quot;m&amp;quot;&lt;/span&gt;)&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;select&lt;/span&gt; &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; {UpperName = x.ToUpper(), Length = x.Length};&lt;br&gt;         &lt;span style="color:#008000"&gt;//this is why extension methods are cool... &lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//can chain stuff together&lt;/span&gt;&lt;br&gt;     &lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; query)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(result);&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SillyDates()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//great way of making readable code for testing.&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt; birthday = 19.June(1976);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(birthday);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//method chaining great for DSL&amp;#39;s&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;.Replace(&lt;span style="color:#a31515"&gt;&amp;quot;e&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;).Reverse();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(x);&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;sadf&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f83faa03-f126-414c-bbc6-4a21ecf23226" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#008000"&gt;//doesn&amp;#39;t have an implicly created constructor&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;//can&amp;#39;t create any non static members&lt;/span&gt;&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Extensions&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;//public static string Reverse(string input)&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    char[] chars = input.ToCharArray();&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    Array.Reverse(chars);&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    return new string(chars);&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//public static byte[] ReadFully(Stream input)&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    MemoryStream output = new MemoryStream();&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    byte[] buffer = new byte[8192];&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    int bytesRead;&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    //will return 0 or -1 (not sure which) when its finished reading&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    while ((bytesRead = input.Read(buffer, 0, buffer.Length)) &amp;gt; 0)&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    {&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//        output.Write(buffer,0,bytesRead);&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    }&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    return output.ToArray();&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; Reverse(&lt;span style="color:#0000ff"&gt;this&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; input)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;char&lt;/span&gt;[] chars = input.ToCharArray();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Array&lt;/span&gt;.Reverse(chars);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;(chars);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;byte&lt;/span&gt;[] ReadFully(&lt;span style="color:#0000ff"&gt;this&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Stream&lt;/span&gt; input)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;MemoryStream&lt;/span&gt; output = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;MemoryStream&lt;/span&gt;();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;byte&lt;/span&gt;[] buffer = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;byte&lt;/span&gt;[8192];&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; bytesRead;&lt;br&gt;         &lt;span style="color:#008000"&gt;//will return 0 or -1 (not sure which) when its finished reading&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;while&lt;/span&gt; ((bytesRead = input.Read(buffer, 0, buffer.Length)) &amp;gt; 0)&lt;br&gt;         {&lt;br&gt;             output.Write(buffer, 0, bytesRead);&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; output.ToArray();&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt; June(&lt;span style="color:#0000ff"&gt;this&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; day, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; year)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt;(year,6,day);&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;asd&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:34a1e276-9f0d-426a-bb52-f9d5ef0adcd7" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;MasteringEnumerable&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//this has now implemented select and where in linq!&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IEnumerable&lt;/span&gt;&amp;lt;TResult&amp;gt; Select&amp;lt;TSource, TResult&amp;gt;&lt;br&gt;             (&lt;span style="color:#0000ff"&gt;this&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IEnumerable&lt;/span&gt;&amp;lt;TSource&amp;gt; source,&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Func&lt;/span&gt;&amp;lt;TSource, TResult&amp;gt; selector )&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (TSource item &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; source)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;yield&lt;/span&gt; &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; selector(item);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IEnumerable&lt;/span&gt;&amp;lt;TSource&amp;gt; Where&amp;lt;TSource&amp;gt;&lt;br&gt;             (&lt;span style="color:#0000ff"&gt;this&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IEnumerable&lt;/span&gt;&amp;lt;TSource&amp;gt; source,&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Func&lt;/span&gt;&amp;lt;TSource, &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt;&amp;gt; predicate)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (TSource item &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; source)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (predicate(item))&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;yield&lt;/span&gt; &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; item;&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;mini linq!&lt;/p&gt;</Content>
      <Created>2012-05-28T21:36:34.105875-04:00</Created>
      <Modified>2012-05-28T21:36:34.105875-04:00</Modified>
      <EntryId>1e6de739-c69c-4011-a27b-48e7ea41ed40</EntryId>
      <Description />
      <Title>Tepub 23–Extension Methods</Title>
      <Categories />
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:576e8ea9-422c-45d1-9f82-cc01c0636374" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; [&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DyanmicsTests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FirstDynamic()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//Jon likes Static stuff&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//string text = &amp;quot;hello&amp;quot;;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//object text = &amp;quot;hello&amp;quot;;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;dynamic&lt;/span&gt; text = &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;br&gt;             &lt;span style="color:#008000"&gt;//System.Reflection - this is kind of what dynamic does?  dynamic a good fit here&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//PropertyInfo property = text.GetType().GetProperty(&amp;quot;Length&amp;quot;);&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//int length = (int) property.GetValue(text, null);&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//at execution time can&amp;#39;t find Lengtht&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; length = text.Length;&lt;br&gt;             &lt;span style="color:#008000"&gt;//there is type safety at execution time, just not compile time&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//eg Cannot implicitly convert type &amp;#39;int&amp;#39; to &amp;#39;string&amp;#39;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//string length = text.Length;&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//compiler just figures out it is a string&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; text2 = &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//Stream stream = text.Foo as Stream;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//var is a StreamWriter even though text is dynamic&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//var writer = new StreamWriter(text);&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//entirely statically typed&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(5, length);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//int result = CallMe(text);&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Assert.AreEqual(2, result);&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//funky type inference at execution time&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;dynamic&lt;/span&gt; ints = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Type&lt;/span&gt; result = CallMe(ints);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;typeof&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;), result);&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Type&lt;/span&gt; CallMe&amp;lt;T&amp;gt;(&lt;span style="color:#2b91af"&gt;IEnumerable&lt;/span&gt;&amp;lt;T&amp;gt; sequence)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;typeof&lt;/span&gt; (T);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//public int CallMe(object x)&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    return 1;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//public int CallMe(string x)&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    return 2;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//deserializing some json&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//actually jon would use someone elses library!&lt;/span&gt;&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ExpandoTest()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//ExpandoObject expando = new ExpandoObject();&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;dynamic&lt;/span&gt; expando = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ExpandoObject&lt;/span&gt;();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;IDictionary&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;object&lt;/span&gt;&amp;gt; dictionary = expando;&lt;br&gt; &lt;br&gt;             dictionary[&lt;span style="color:#a31515"&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;] = &lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;;&lt;br&gt;             expando.Age = 35;&lt;br&gt;             &lt;span style="color:#008000"&gt;//lambda expression&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Action&lt;/span&gt; greeting = () =&amp;gt; &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#008000"&gt;//expando.Greeting = (Action) (() =&amp;gt; Console.WriteLine(&amp;quot;Hello&amp;quot;));&lt;/span&gt;&lt;br&gt;             expando.Greeting = greeting;&lt;br&gt;             &lt;span style="color:#008000"&gt;//prints to the console&lt;/span&gt;&lt;br&gt;             expando.Greeting();&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Func&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; doubler = x =&amp;gt; x*2;&lt;br&gt;             expando.Doubler = doubler;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; doubled = expando.Doubler(10);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(20, doubled);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;, expando.Name);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(35, expando.Age);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SecondTest()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//this is quite nice, say if coming from a webrequest&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;dynamic&lt;/span&gt; properties = GetProperties();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; name = properties.Name;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; age = properties.Age;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;dynamic&lt;/span&gt; GetProperties()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Dictionary&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;object&lt;/span&gt;&amp;gt; properties = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Dictionary&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;object&lt;/span&gt;&amp;gt;&lt;br&gt;                                                         {&lt;br&gt;                                                             {&lt;span style="color:#a31515"&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;}&lt;/span&gt;,&lt;br&gt;                                                             {&lt;span style="color:#a31515"&gt;&amp;quot;Age&amp;quot;&lt;/span&gt;, 35},&lt;br&gt;                                                             {&lt;span style="color:#a31515"&gt;&amp;quot;Town&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Reading&amp;quot;}&lt;/span&gt;,&lt;br&gt;                                                             {&lt;span style="color:#a31515"&gt;&amp;quot;TimeZone&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Europe/London&amp;quot;}&lt;/span&gt;&lt;br&gt;                                                         };&lt;br&gt;             &lt;span style="color:#2b91af"&gt;IDictionary&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;,&lt;span style="color:#0000ff"&gt;object&lt;/span&gt;&amp;gt; expando = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ExpandoObject&lt;/span&gt;();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; pair &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; properties)&lt;br&gt;             {&lt;br&gt;                 expando[pair.Key] = pair.Key;&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; expando;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SqlTest()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;dynamic&lt;/span&gt; sql = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DynamicSql&lt;/span&gt;();&lt;br&gt;             &lt;span style="color:#008000"&gt;//named arguments&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;dynamic&lt;/span&gt; results = sql.Books(author: &lt;span style="color:#a31515"&gt;&amp;quot;Jon Skeet&amp;quot;&lt;/span&gt;, year: 2010);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; results)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(result);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;internal&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DynamicSql&lt;/span&gt; : &lt;span style="color:#2b91af"&gt;DynamicObject&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;override&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; TryInvokeMember(&lt;span style="color:#2b91af"&gt;InvokeMemberBinder&lt;/span&gt; binder, &lt;span style="color:#0000ff"&gt;object&lt;/span&gt;[] args, &lt;span style="color:#0000ff"&gt;out&lt;/span&gt; &lt;span style="color:#0000ff"&gt;object&lt;/span&gt; result)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; callInfo = binder.CallInfo;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;StringBuilder&lt;/span&gt; builder = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;StringBuilder&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;SELECT * FROM &amp;quot;&lt;/span&gt; + binder.Name + &lt;span style="color:#a31515"&gt;&amp;quot; WHERE &amp;quot;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; callInfo.ArgumentCount; i++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i != 0)&lt;br&gt;                 {&lt;br&gt;                     builder.Append(&lt;span style="color:#a31515"&gt;&amp;quot; AND &amp;quot;&lt;/span&gt;);&lt;br&gt;                 }&lt;br&gt;                 builder.AppendFormat(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt; = @{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, callInfo.ArgumentNames[i]);&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Woudl execute SQL: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, builder);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; callInfo.ArgumentCount; i++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Would set parameter {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt; to {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, callInfo.ArgumentNames[i], args[i]);&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#008000"&gt;//returning an array of anonymous types&lt;/span&gt;&lt;br&gt;             result = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt;[] {&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; {Title = &lt;span style="color:#a31515"&gt;&amp;quot;C# in Depth&amp;quot;}}&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-28T22:36:54.980875-04:00</Created>
      <Modified>2012-05-28T22:36:54.980875-04:00</Modified>
      <EntryId>ed5248c0-d255-43ec-8118-0509481c7d30</EntryId>
      <Description />
      <Title>Tekpub 26–Dynamic</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>