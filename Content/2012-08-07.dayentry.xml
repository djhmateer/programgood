<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-08-06T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;&lt;a href="http://www.yoda.arachsys.com/csharp/threads/"&gt;http://www.yoda.arachsys.com/csharp/threads/&lt;/a&gt; Jon Skeet&lt;/p&gt;  &lt;p&gt;Threading: “..trying to do more than one thing at a time within a process”&lt;/p&gt;  &lt;p&gt;Process:&amp;#160; eg a browser downloading on one process, and a word processor allowing you to type on another process&lt;/p&gt;  &lt;h3&gt;Josepth Albahari&lt;/h3&gt;  &lt;p&gt;&lt;a href="http://www.albahari.com/threading/"&gt;http://www.albahari.com/threading/&lt;/a&gt; – Joseph Albahari (24th July 2011 updated).&amp;#160; C#5 book now available (.NET4.5 still in RC)&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:82566721-e0d2-4c9f-baf0-8cd077fa8147" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Program&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] args)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Thread&lt;/span&gt; t = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Thread&lt;/span&gt;(WriteY);          &lt;span style="color:#008000"&gt;// Kick off a new thread&lt;/span&gt;&lt;br&gt;             t.Start();                               &lt;span style="color:#008000"&gt;// running WriteY()&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;// Simultaneously, do something on the main thread.&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; 1000; i++) &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.Write(&lt;span style="color:#a31515"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;br&gt;         &lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; WriteY()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; 1000; i++) &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.Write(&lt;span style="color:#a31515"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Threading-and-Performance_AC55/image_2.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Threading-and-Performance_AC55/image_thumb.png" width="394" height="110" /&gt;&lt;/a&gt;    &lt;br /&gt;2 Threads writing to the console&lt;/p&gt;  &lt;h3&gt;Local Variables Separate&lt;/h3&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9468a53c-05a6-4099-a5de-963bc0f50bfa" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] args)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Thread&lt;/span&gt;(Go).Start();&lt;br&gt;             Go();&lt;br&gt;         }&lt;br&gt;         &lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Go()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//CLR assigns thread its own memory stack so that local variables are kept separate&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; 5; i++) &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.Write(&lt;span style="color:#a31515"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;10 ?’s are printed.&lt;/p&gt;  &lt;h3&gt;Same Object Instance share Data&lt;/h3&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:511f8d87-7f7b-4cc4-b0b4-e075eba1a595" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ThreadTest&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; done;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;ThreadTest&lt;/span&gt; tt = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ThreadTest&lt;/span&gt;();   &lt;span style="color:#008000"&gt;// Create a common instance&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Thread&lt;/span&gt;(tt.Go).Start();&lt;br&gt;             tt.Go();&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;// Note that Go is now an instance method&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Go()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!done) { done = &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;; &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;); }&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;br /&gt;Threads share data if they have a common reference to the same object instance.      &lt;p&gt;Done is only printed once.&lt;/p&gt;  &lt;h3&gt;Static Fields Shared&lt;/h3&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e9a21b60-21ce-4c1e-89a6-c3b985085de6" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ThreadTest&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; done;    &lt;span style="color:#008000"&gt;// Static fields are shared between all threads&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Thread&lt;/span&gt;(Go).Start();&lt;br&gt;             Go();&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Go()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!done) { done = &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;; &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;); }&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;h3&gt;Thread non Safety&lt;/h3&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:61d5b524-5dda-420c-92f7-f233619ad6f4" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ThreadTest&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; done;    &lt;span style="color:#008000"&gt;// Static fields are shared between all threads&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Thread&lt;/span&gt;(Go).Start();&lt;br&gt;             Go();&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Go()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//Swapped the order of statements - usually get Done twice now&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//ie This is not thread safe&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!done) { &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;); done = &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;; }&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;br /&gt;Usually displays Done twice  &lt;br /&gt;  &lt;h3&gt;Locking&lt;/h3&gt;  &lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c500a4a5-72b1-4e08-8046-017408718861" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ThreadTest&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; done;    &lt;span style="color:#008000"&gt;// Static fields are shared between all threads&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;object&lt;/span&gt; locker = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;object&lt;/span&gt;();&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Thread&lt;/span&gt;(Go).Start();&lt;br&gt;             Go();&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Go()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//When two threads simultaneously contend a lock (in this case, locker), one thread waits, or blocks, until the lock becomes available&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;lock&lt;/span&gt; (locker)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!done)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;);&lt;br&gt;                     done = &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Display Done once!&lt;/p&gt;  &lt;h3&gt;Parallel Programming&lt;/h3&gt;  &lt;p&gt;eg PLINQ makes it easy.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Threading-and-Performance_AC55/image_4.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Threading-and-Performance_AC55/image_thumb_1.png" width="396" height="171" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ce9bd8d8-97c3-40b1-81eb-b686010f1464" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;// Calculate prime numbers using a simple (unoptimized) algorithm.&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; numbers = &lt;span style="color:#2b91af"&gt;Enumerable&lt;/span&gt;.Range(3, 100000000 - 3);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; parallelQuery =&lt;br&gt;               &lt;span style="color:#0000ff"&gt;from&lt;/span&gt; n &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; numbers.AsParallel()&lt;br&gt;               &lt;span style="color:#0000ff"&gt;where&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Enumerable&lt;/span&gt;.Range(2, (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;)&lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(n)).All(i =&amp;gt; n % i &amp;gt; 0)&lt;br&gt;               &lt;span style="color:#0000ff"&gt;select&lt;/span&gt; n;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[] primes = parallelQuery.ToArray();&lt;br&gt;             &lt;span style="color:#008000"&gt;//foreach (var prime in primes)&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//    Console.WriteLine(prime);&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;h3&gt;Spell Checker in Parallel with PLINQ&lt;/h3&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c07a6fe7-7cf4-457b-bbf7-72e13ba0ecd9" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;struct&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IndexedWord&lt;/span&gt; { &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; Word; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; Index; }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!&lt;span style="color:#2b91af"&gt;File&lt;/span&gt;.Exists(&lt;span style="color:#a31515"&gt;&amp;quot;WordLookup.txt&amp;quot;&lt;/span&gt;))    &lt;span style="color:#008000"&gt;// Contains about 150,000 words&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;WebClient&lt;/span&gt;().DownloadFile(&lt;span style="color:#a31515"&gt;&amp;quot;http://www.albahari.com/ispell/allwords.txt&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;WordLookup.txt&amp;quot;&lt;/span&gt;);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; wordLookup = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;HashSet&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt;(&lt;span style="color:#2b91af"&gt;File&lt;/span&gt;.ReadAllLines(&lt;span style="color:#a31515"&gt;&amp;quot;WordLookup.txt&amp;quot;&lt;/span&gt;),&lt;span style="color:#2b91af"&gt;StringComparer&lt;/span&gt;.InvariantCultureIgnoreCase);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; random = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Random&lt;/span&gt;();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] wordList = wordLookup.ToArray();&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//Test document of a 100 million different words&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] wordsToTest = &lt;span style="color:#2b91af"&gt;Enumerable&lt;/span&gt;.Range(0, 100000000)&lt;br&gt;               .Select(i =&amp;gt; wordList[random.Next(0, wordList.Length)])&lt;br&gt;               .ToArray();&lt;br&gt; &lt;br&gt;             wordsToTest[12345] = &lt;span style="color:#a31515"&gt;&amp;quot;woozsh&amp;quot;&lt;/span&gt;;     &lt;span style="color:#008000"&gt;// Introduce a couple&lt;/span&gt;&lt;br&gt;             wordsToTest[23456] = &lt;span style="color:#a31515"&gt;&amp;quot;wubsie&amp;quot;&lt;/span&gt;;     &lt;span style="color:#008000"&gt;// of spelling mistakes.&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Stopwatch&lt;/span&gt; s = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Stopwatch&lt;/span&gt;();&lt;br&gt;             s.Start();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; query = wordsToTest&lt;br&gt;                       &lt;span style="color:#008000"&gt;//.AsParallel()&lt;/span&gt;&lt;br&gt;                       .Select((word, index) =&amp;gt; &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IndexedWord&lt;/span&gt; { Word = word, Index = index })&lt;br&gt;                       .Where(iword =&amp;gt; !wordLookup.Contains(iword.Word))&lt;br&gt;                       .OrderBy(iword =&amp;gt; iword.Index);&lt;br&gt;            &lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; indexedWord &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; query)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(indexedWord.Word);&lt;br&gt;             }&lt;br&gt;             s.Stop();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;TimeSpan&lt;/span&gt; t = s.Elapsed;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(t.Seconds);&lt;br&gt; &lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;11s for Parallel (8 cores)   &lt;br /&gt;52s non Parallel (1 core)&lt;/p&gt;  &lt;h3&gt;SpellChecker with Parallel.ForEach&lt;/h3&gt;  &lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d53b439b-d717-4f1f-adb5-371cef801717" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; &lt;span style="color:#0000ff"&gt;struct&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IndexedWord&lt;/span&gt; { &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; Word; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; Index; }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!&lt;span style="color:#2b91af"&gt;File&lt;/span&gt;.Exists(&lt;span style="color:#a31515"&gt;&amp;quot;WordLookup.txt&amp;quot;&lt;/span&gt;))    &lt;span style="color:#008000"&gt;// Contains about 150,000 words&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;WebClient&lt;/span&gt;().DownloadFile(&lt;span style="color:#a31515"&gt;&amp;quot;http://www.albahari.com/ispell/allwords.txt&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;WordLookup.txt&amp;quot;&lt;/span&gt;);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; wordLookup = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;HashSet&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt;(&lt;span style="color:#2b91af"&gt;File&lt;/span&gt;.ReadAllLines(&lt;span style="color:#a31515"&gt;&amp;quot;WordLookup.txt&amp;quot;&lt;/span&gt;),&lt;span style="color:#2b91af"&gt;StringComparer&lt;/span&gt;.InvariantCultureIgnoreCase);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; random = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Random&lt;/span&gt;();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] wordList = wordLookup.ToArray();&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//Test document of a 100 million different words..&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] wordsToTest = &lt;span style="color:#2b91af"&gt;Enumerable&lt;/span&gt;.Range(0, 100000000)&lt;br&gt;               .Select(i =&amp;gt; wordList[random.Next(0, wordList.Length)])&lt;br&gt;               .ToArray();&lt;br&gt; &lt;br&gt;             wordsToTest[12345] = &lt;span style="color:#a31515"&gt;&amp;quot;woozsh&amp;quot;&lt;/span&gt;;     &lt;span style="color:#008000"&gt;// Introduce a couple&lt;/span&gt;&lt;br&gt;             wordsToTest[23456] = &lt;span style="color:#a31515"&gt;&amp;quot;wubsie&amp;quot;&lt;/span&gt;;     &lt;span style="color:#008000"&gt;// of spelling mistakes.&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Stopwatch&lt;/span&gt; s = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Stopwatch&lt;/span&gt;();&lt;br&gt;             s.Start();&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; misspellings = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ConcurrentBag&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;Tuple&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt;&amp;gt;();&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Parallel&lt;/span&gt;.ForEach(wordsToTest, (word, state, i) =&amp;gt;&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!wordLookup.Contains(word))&lt;br&gt;                     misspellings.Add(&lt;span style="color:#2b91af"&gt;Tuple&lt;/span&gt;.Create((&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;)i, word));&lt;br&gt;             });&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; tu &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; misspellings)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;, {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;,tu.Item1,tu.Item2);&lt;br&gt;             }&lt;br&gt;             s.Stop();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;TimeSpan&lt;/span&gt; t = s.Elapsed;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(t.Seconds);&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;    &lt;br /&gt;10s for Parallel. Indexed ForEach is more efficient than Select.&lt;/p&gt;</Content>
      <Created>2012-08-07T09:11:05.6852277-04:00</Created>
      <Modified>2012-08-07T09:11:05.6852277-04:00</Modified>
      <EntryId>138761bc-e099-4ef1-9f43-8283b2caf062</EntryId>
      <Description />
      <Title>Threading, Performance and Parallel Programming</Title>
      <Categories>Parallel;Threading</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>