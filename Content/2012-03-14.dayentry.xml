<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-03-13T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns-5.Factory_6D8F/image_2.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns-5.Factory_6D8F/image_thumb.png" width="644" height="451" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Okay, so now looking at code.. build up my own implementation:&lt;/p&gt;</Content>
      <Created>2012-03-14T05:08:46.61-04:00</Created>
      <Modified>2012-03-14T05:08:46.61-04:00</Modified>
      <EntryId>e086db9b-c0aa-469e-931c-f01aefd4150f</EntryId>
      <Description />
      <Title>Patterns 5.Factory</Title>
      <Categories />
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;Think nouns are objects.&amp;#160; Verbs are method.&lt;/p&gt;  &lt;p&gt;Command object is one which represents a verb.&lt;/p&gt;  &lt;p&gt;eg TicketPurchase&lt;/p&gt;  &lt;p&gt;Testability and Scaleability&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns4.Command_6C1A/image_2.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns4.Command_6C1A/image_thumb.png" width="644" height="389" /&gt;&lt;/a&gt;&lt;/p&gt;</Content>
      <Created>2012-03-14T03:47:07.89125-04:00</Created>
      <Modified>2012-03-14T03:47:07.89125-04:00</Modified>
      <EntryId>a08b26e2-4996-4e6f-abab-4bf2f7c14093</EntryId>
      <Description />
      <Title>Patterns–4.Command</Title>
      <Categories />
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;A class that controls access to another&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns3.Proxy_65B0/image_2.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns3.Proxy_65B0/image_thumb.png" width="644" height="413" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;he’s going to show how to implement proxy to improve the performance of the repository – ie Caching!&lt;/p&gt;  &lt;p&gt;But if we add caching logic to the repository, then we’re going to get mixing of concerns.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns3.Proxy_65B0/image_4.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns3.Proxy_65B0/image_thumb_1.png" width="644" height="303" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:720e2dc0-52eb-4aaa-91a5-9896ebb4871f" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;&lt;span style="color:#008000"&gt;//proxy pattern - a class that controls access to another&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//this is an IAlbumRepository, that takes in an IAlbumRepository&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;CachedAlbumRepository&lt;/span&gt; : &lt;span style="color:#2b91af"&gt;IAlbumRepository&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IAlbumRepository&lt;/span&gt; _albumRepository;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; CachedAlbumRepository(&lt;span style="color:#2b91af"&gt;IAlbumRepository&lt;/span&gt; albumRepository)&lt;br&gt;         {&lt;br&gt;             _albumRepository = albumRepository;&lt;br&gt;         }&lt;br&gt;         &lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;object&lt;/span&gt; CacheLockObject = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;object&lt;/span&gt;();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;Album&lt;/span&gt;&amp;gt; GetTopSellingAlbums(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; count)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Debug&lt;/span&gt;.Print(&lt;span style="color:#a31515"&gt;&amp;quot;CachedAlbumRespository:GetTopSellingAlbums&amp;quot;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; cacheKey = &lt;span style="color:#a31515"&gt;&amp;quot;TopSellingAlbums-&amp;quot;&lt;/span&gt; + count;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;HttpRuntime&lt;/span&gt;.Cache[cacheKey] &lt;span style="color:#0000ff"&gt;as&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;Album&lt;/span&gt;&amp;gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (result == &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;lock&lt;/span&gt; (CacheLockObject)&lt;br&gt;                 {&lt;br&gt;                     result = &lt;span style="color:#2b91af"&gt;HttpRuntime&lt;/span&gt;.Cache[cacheKey] &lt;span style="color:#0000ff"&gt;as&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;Album&lt;/span&gt;&amp;gt;;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (result == &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;)&lt;br&gt;                     {&lt;br&gt;                         result = _albumRepository.GetTopSellingAlbums(count).ToList();&lt;br&gt;                         &lt;span style="color:#008000"&gt;//magic number antipattern 60!&lt;/span&gt;&lt;br&gt;                         &lt;span style="color:#2b91af"&gt;HttpRuntime&lt;/span&gt;.Cache.Insert(cacheKey, result, &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;DateTime&lt;/span&gt;.Now.AddSeconds(60), &lt;span style="color:#2b91af"&gt;TimeSpan&lt;/span&gt;.Zero);&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-03-14T03:33:44.375625-04:00</Created>
      <Modified>2012-03-14T03:33:44.375625-04:00</Modified>
      <EntryId>88446658-4040-4159-8b41-f9ec3ad66d95</EntryId>
      <Description />
      <Title>Patterns–3.Proxy</Title>
      <Categories />
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;dnrtv0196&lt;/p&gt;  &lt;p&gt;Singleton in a class he considers an antipattern.&amp;#160; However when done through IoC then okay, as sometime want 1 and only 1 instance of an object in our application.&amp;#160; eg an IoC container itself is a singleton, and it decides what objects compose up the app.. so SRP okay.&lt;/p&gt;  &lt;p&gt;Refactoring CheckoutController to have Repository pattern.&lt;/p&gt;  &lt;p&gt;**PROXY design pattern for caching.. makes it easy to turn on and off without changing code&lt;/p&gt;  &lt;p&gt;IQueryable over IEnumerable&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7e3b173c-c171-4016-a761-123ee74fba35" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;interface&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IStoreRepository&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//IQueryable&amp;lt;Order&amp;gt; Orders { get; }&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;IQueryable&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;Order&lt;/span&gt;&amp;gt; Orders();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; AddOrder(&lt;span style="color:#2b91af"&gt;Order&lt;/span&gt; order);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;EfStoreRepository&lt;/span&gt; : &lt;span style="color:#2b91af"&gt;IStoreRepository&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#2b91af"&gt;MusicStoreEntities&lt;/span&gt; _storeDb;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; EfStoreRepository()&lt;br&gt;         {&lt;br&gt;             _storeDb = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;MusicStoreEntities&lt;/span&gt;();&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//public IQueryable&amp;lt;Order&amp;gt; Orders&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    get { return _storeDb.Orders;}&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IQueryable&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;Order&lt;/span&gt;&amp;gt; Orders()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; _storeDb.Orders;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; AddOrder(&lt;span style="color:#2b91af"&gt;Order&lt;/span&gt; order)&lt;br&gt;         {&lt;br&gt;             _storeDb.Orders.Add(order);&lt;br&gt;             _storeDb.SaveChanges();&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;and&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5f25c5e2-2407-4c13-883f-34c71aed5a58" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;   &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ActionResult&lt;/span&gt; Complete(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; id)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;// Validate customer owns this order&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//if Orders in IEnumerable then linq has to bring back the entire&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//set of orders and then do in memory were orderId == id etc..&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//better to make IQueryable&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; isValid = _storeRepository.Orders().Any(&lt;br&gt;                 o =&amp;gt; o.OrderId == id &amp;amp;&amp;amp;&lt;br&gt;                 o.Username == User.Identity.Name);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (isValid)&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; View(id);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;else&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; View(&lt;span style="color:#a31515"&gt;&amp;quot;Error&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;if used a property (ie has a getter and or setter) then would just use _storeRepository.Orders.Any&lt;/p&gt;  &lt;p&gt;**find out if using a property has advantages (can’t write to it as set not there only one?)&lt;/p&gt;  &lt;p&gt;Big picture – getting rid of dependencies..so code is more flexible.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Tests using Moq to easily mock out the repo and bring back a ‘collection’&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0cb3095f-543f-4a12-8107-3b9253edcb12" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt; [&lt;span style="color:#2b91af"&gt;TestMethod&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReturnErrorWhenUserDoesNotOwnOrderId()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//arrange&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; mockRepo = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Mock&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;IStoreRepository&lt;/span&gt;&amp;gt;();&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//lambda expressing allows us to use strong typing&lt;/span&gt;&lt;br&gt;             mockRepo.Setup(r =&amp;gt; r.Orders()).Returns(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;Order&lt;/span&gt;&amp;gt;().AsQueryable);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; controller = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;CheckoutController&lt;/span&gt;(mockRepo.Object, &lt;span style="color:#a31515"&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//act&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = controller.Complete(0) &lt;span style="color:#0000ff"&gt;as&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ViewResult&lt;/span&gt;;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//assert&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Error&amp;quot;&lt;/span&gt;, result.ViewName);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;TestMethod&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReturnCorrectViewWhenUserOwnsOrder()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//arrange&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; testOrderId = 123;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; testUserName = &lt;span style="color:#a31515"&gt;&amp;quot;testuser&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; myOrder = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Order&lt;/span&gt;() { OrderId = testOrderId,&lt;br&gt;                                             Username = testUserName&lt;br&gt;                                         };&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; mockRepo = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Mock&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;IStoreRepository&lt;/span&gt;&amp;gt;();&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//lambda expressing allows us to use strong typing&lt;/span&gt;&lt;br&gt;             mockRepo.Setup(r =&amp;gt; r.Orders()).Returns(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;Order&lt;/span&gt;&amp;gt;() {myOrder}.AsQueryable);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; controller = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;CheckoutController&lt;/span&gt;(mockRepo.Object, testUserName);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//act&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = controller.Complete(testOrderId) &lt;span style="color:#0000ff"&gt;as&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ViewResult&lt;/span&gt;;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//assert&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreNotEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Error&amp;quot;&lt;/span&gt;, result.ViewName);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(testOrderId, result.Model);&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-03-14T07:30:14.438125-04:00</Created>
      <Modified>2012-03-14T07:30:14.438125-04:00</Modified>
      <EntryId>c43cb4aa-ecbf-4e3a-b514-f8d8985d2bd0</EntryId>
      <Description />
      <Title>Patterns2–Steps involved in applying patterns</Title>
      <Categories />
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>