<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2011-04-09T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;a href="http://www.programgood.net/content/binary/WindowsLiveWriter/43343855be0a_13BB9/keithDave_2.jpg"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="keithDave" border="0" alt="keithDave" src="http://www.programgood.net/content/binary/WindowsLiveWriter/43343855be0a_13BB9/keithDave_thumb.jpg" width="504" height="379" /&gt;&lt;/a&gt;   &lt;p&gt;&lt;/p&gt;  &lt;p&gt;About a week ago Keith and I went on a ‘tramp’.. thats trekking.&amp;#160; We discussed Sudoku (apologies to Helen, Phil, Nora and others for starting the challenge without you..there was lots of time while walking to discuss strategy).&lt;/p&gt;  &lt;h3&gt;TDD&lt;/h3&gt;  &lt;p&gt;A single test project is VS2010.&amp;#160; Everything in one file (!) and static methods to make starting easier.&lt;/p&gt;  &lt;p&gt;Coding strategy was to firstly:&lt;/p&gt;  &lt;ul&gt;   &lt;ul&gt;     &lt;li&gt;find a way to check the sudoku was solved        &lt;ul&gt;         &lt;li&gt;Do all horizontal lines have only 1 to 9 used once &lt;/li&gt;          &lt;li&gt;Do all vertical columns have 1 to 9 used once &lt;/li&gt;          &lt;li&gt;Do all 3*3 squares have 1 to 9 used once &lt;/li&gt;       &lt;/ul&gt;     &lt;/li&gt;   &lt;/ul&gt; &lt;/ul&gt;  &lt;p&gt;So I wanted a method to check if Array has only 1 instance of each number.&lt;/p&gt;  &lt;div&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;[TestClass]&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; UnitTest1&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #008000"&gt;// Arrays are [row, col]&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #008000"&gt;//  0,0     0,1     0,2&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #008000"&gt;//  1,0     1,1     1,2&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #008000"&gt;// SECTION 1 - tests are all about testing if the sudoku is solved&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #008000"&gt;// Single Array&lt;/span&gt;&lt;br /&gt;    [TestMethod]&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; SingleArrayCheckerFailsWhenArrayTooShort()&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[] numbers = { 1, 2, 3, 4, 5, 6, 7, 8 };&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; result = DoesArrayHaveOnlyOneInstanceOfEachNumber(numbers);&lt;br /&gt;        Assert.AreEqual(&lt;span style="color: #0000ff"&gt;false&lt;/span&gt;, result);&lt;br /&gt;    }&lt;/pre&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;and the Method:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; DoesArrayHaveOnlyOneInstanceOfEachNumber(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[] arrayOfNumbers)&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (arrayOfNumbers.Length != 9)&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff"&gt;false&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (arrayOfNumbers.Contains(0))&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;throw&lt;/span&gt; &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Exception(&lt;span style="color: #006080"&gt;&amp;quot;checking of a line array contains a 0&amp;quot;&lt;/span&gt;);&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[] howManyInstancesOfEachNumber = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[9] { 0, 0, 0, 0, 0, 0, 0, 0, 0 };&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; 9; i++)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; valueOfCurrentNumber = arrayOfNumbers[i];&lt;br /&gt;        howManyInstancesOfEachNumber[valueOfCurrentNumber - 1] += 1;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (var result &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; howManyInstancesOfEachNumber)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (result != 1)&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff"&gt;false&lt;/span&gt;;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff"&gt;true&lt;/span&gt;;&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;An array is Enumerable.&lt;/p&gt;

&lt;p&gt;then write the tests&lt;/p&gt;

&lt;div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;[TestMethod]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; AllHorizonalLinesPass()&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[,] sudokuArray = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[9, 9]{ {1,2,3,4,5,6,7,8,9},&lt;br /&gt;                                                {1,2,3,4,5,6,7,8,9},&lt;br /&gt;                                                {1,2,3,4,5,6,7,8,9},&lt;br /&gt;                                                {1,2,3,4,5,6,7,8,9},&lt;br /&gt;                                                {1,2,3,4,5,6,7,8,9},&lt;br /&gt;                                                {1,2,3,4,5,6,7,8,9},&lt;br /&gt;                                                {1,2,3,4,5,6,7,8,9},&lt;br /&gt;                                                {1,2,3,4,5,6,7,8,9},&lt;br /&gt;                                                {1,2,3,4,5,6,7,8,9}&lt;br /&gt;                                            };&lt;br /&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; result = DoAllHorizontalRowsPass(sudokuArray);&lt;br /&gt;            Assert.AreEqual(&lt;span style="color: #0000ff"&gt;true&lt;/span&gt;, result);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        [TestMethod]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; AllVerticalColsPass()&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[,] sudokuArray = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[9, 9]{  {1,1,1,1,1,1,1,1,1},&lt;br /&gt;                                                {2,2,2,2,2,2,2,2,2},&lt;br /&gt;                                                {3,3,3,3,3,3,3,3,3},&lt;br /&gt;                                                {4,4,4,4,4,4,4,4,4},&lt;br /&gt;                                                {5,5,5,5,5,5,5,5,5},&lt;br /&gt;                                                {6,6,6,6,6,6,6,6,6},&lt;br /&gt;                                                {7,7,7,7,7,7,7,7,7},&lt;br /&gt;                                                {8,8,8,8,8,8,8,8,8},&lt;br /&gt;                                                {9,9,9,9,9,9,9,9,9}&lt;br /&gt;                                            };&lt;br /&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; result = DoAllVerticalColsPass(sudokuArray);&lt;br /&gt;            Assert.AreEqual(&lt;span style="color: #0000ff"&gt;true&lt;/span&gt;, result);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        [TestMethod]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; AllSquaresPass()&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[,] sudokuArray = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[9, 9]{ {1,2,3,1,2,3,1,2,3},&lt;br /&gt;                                                {4,5,6,4,5,6,4,5,6},&lt;br /&gt;                                                {7,8,9,7,8,9,7,8,9},&lt;br /&gt;                                                {7,8,9,7,8,9,7,8,9},&lt;br /&gt;                                                {4,5,6,4,5,6,4,5,6},&lt;br /&gt;                                                {1,2,3,1,2,3,1,2,3},&lt;br /&gt;                                                {4,5,6,4,5,6,4,5,6},&lt;br /&gt;                                                {1,2,3,1,2,3,1,2,3},&lt;br /&gt;                                                {7,8,9,7,8,9,7,8,9},&lt;br /&gt;                                            };&lt;br /&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; result = DoAllSquaresPass(sudokuArray);&lt;br /&gt;            Assert.AreEqual(&lt;span style="color: #0000ff"&gt;true&lt;/span&gt;, result);&lt;br /&gt;        }&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;then make them pass:&lt;/p&gt;

&lt;div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; DoAllHorizontalRowsPass(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[,] sudoku)&lt;br /&gt;{&lt;br /&gt;   &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; row = 0; row &amp;lt; 9; row++) &lt;span style="color: #008000"&gt;// go over each horizontal line&lt;/span&gt;&lt;br /&gt;   {&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[] horizonalLineArray = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[9];&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; col = 0; col &amp;lt; 9; col++) &lt;span style="color: #008000"&gt;// get each number in that line and put into a new horizontalLineArray&lt;/span&gt;&lt;br /&gt;           horizonalLineArray[col] = sudoku[row, col];&lt;br /&gt;&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (!DoesArrayHaveOnlyOneInstanceOfEachNumber(horizonalLineArray))&lt;br /&gt;           &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff"&gt;false&lt;/span&gt;;&lt;br /&gt;   }&lt;br /&gt;   &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff"&gt;true&lt;/span&gt;;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; DoAllVerticalColsPass(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[,] sudoku)&lt;br /&gt;{&lt;br /&gt;   &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; col = 0; col &amp;lt; 9; col++) &lt;span style="color: #008000"&gt;// go over each vertical line&lt;/span&gt;&lt;br /&gt;   {&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[] verticalLineArray = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[9];&lt;br /&gt;&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; row = 0; row &amp;lt; 9; row++) &lt;span style="color: #008000"&gt;// get each number in that vertical line and put into a new verticalLineArray&lt;/span&gt;&lt;br /&gt;           verticalLineArray[row] = sudoku[row, col];&lt;br /&gt;&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (!DoesArrayHaveOnlyOneInstanceOfEachNumber(verticalLineArray))&lt;br /&gt;           &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff"&gt;false&lt;/span&gt;;&lt;br /&gt;   }&lt;br /&gt;   &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff"&gt;true&lt;/span&gt;;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; DoAllSquaresPass(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[,] sudoku)&lt;br /&gt;{&lt;br /&gt;   &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; rowStart = 0;&lt;br /&gt;   &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; rowEnd = 2;&lt;br /&gt;   &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; colStart = 0;&lt;br /&gt;   &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; colEnd = 2;&lt;br /&gt;&lt;br /&gt;   &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; squareCounter = 1;&lt;br /&gt;   &lt;span style="color: #0000ff"&gt;while&lt;/span&gt; (squareCounter &amp;lt; 9) &lt;span style="color: #008000"&gt;// take each 3*3 square and test it&lt;/span&gt;&lt;br /&gt;   {&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[] allNumbersInSquareArray = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[9];&lt;br /&gt;       &lt;span style="color: #008000"&gt;// go over first 3*3 square&lt;/span&gt;&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; counter = 0;&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; row = rowStart; row &amp;lt;= rowEnd; row++)&lt;br /&gt;       {&lt;br /&gt;           &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; col = colStart; col &amp;lt;= colEnd; col++)&lt;br /&gt;           {&lt;br /&gt;               allNumbersInSquareArray[counter] = sudoku[row, col];&lt;br /&gt;               counter++;&lt;br /&gt;           }&lt;br /&gt;       }&lt;br /&gt;&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (!DoesArrayHaveOnlyOneInstanceOfEachNumber(allNumbersInSquareArray))&lt;br /&gt;           &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff"&gt;false&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;       &lt;span style="color: #008000"&gt;// increment to the next 3*3 square going along horizontally first&lt;/span&gt;&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (colEnd != 8)&lt;br /&gt;       {&lt;br /&gt;           colStart += 3;&lt;br /&gt;           colEnd += 3;&lt;br /&gt;       }&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;else&lt;/span&gt; &lt;span style="color: #008000"&gt;// go down to next 'row' of squares&lt;/span&gt;&lt;br /&gt;       {&lt;br /&gt;           colStart = 0;&lt;br /&gt;           colEnd = 2;&lt;br /&gt;           rowStart += 3;&lt;br /&gt;           rowEnd += 3;&lt;br /&gt;       }&lt;br /&gt;&lt;br /&gt;       squareCounter++;&lt;br /&gt;   }&lt;br /&gt;   &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff"&gt;true&lt;/span&gt;;&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3&gt;Making a Solver&lt;/h3&gt;

&lt;p&gt;Strategy was to (For all the elements with 0 in them):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get rid of numbers 
    &lt;ul&gt;
      &lt;li&gt;LookAtOtherNumbersInRowAndTakeOutOnesWeDontNeedToCheck &lt;/li&gt;

      &lt;li&gt;LookAtOtherNumbersInColumnAndTakeOutOnesWeDontNeedToCheck &lt;/li&gt;

      &lt;li&gt;LookAtOtherNumbersInSquareAndTakeOutOnesWeDontNeed &lt;/li&gt;

      &lt;li&gt;Then select a random number from the ones left &lt;/li&gt;

      &lt;li&gt;check if sudoku is solved &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I used TDD on each Method eg&lt;/p&gt;

&lt;div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;[TestMethod]&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; LookAtOtherNumbersInRowAndTakeThoseOffTheListOfNumbersToTry()&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; row = 2;&lt;br /&gt;    List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt; listOfNumbersToTry = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; 10; i++)&lt;br /&gt;        listOfNumbersToTry.Add(i);&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[,] trySudokuArray = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[9, 9]{ {1,2,3,4,5,6,7,8,9},&lt;br /&gt;                                            {1,2,3,4,5,6,7,8,9},&lt;br /&gt;                                            {1,2,0,4,5,6,0,8,0}, &lt;span style="color: #008000"&gt;// this one&lt;/span&gt;&lt;br /&gt;                                            {1,2,3,4,5,6,7,8,9},&lt;br /&gt;                                            {1,2,3,4,5,6,7,8,9},&lt;br /&gt;                                            {1,2,3,4,5,6,7,8,9},&lt;br /&gt;                                            {1,2,3,4,5,6,7,8,9},&lt;br /&gt;                                            {1,2,3,4,5,6,7,8,9},&lt;br /&gt;                                            {1,2,3,4,5,6,7,8,9}&lt;br /&gt;                                    };&lt;br /&gt;    LookAtOtherNumbersInRowAndTakeOutOnesWeDontNeedToCheck(trySudokuArray, row, listOfNumbersToTry);&lt;br /&gt;&lt;br /&gt;    Assert.AreEqual(3, listOfNumbersToTry.Count);&lt;br /&gt;    Assert.IsTrue(listOfNumbersToTry.Contains(3));&lt;br /&gt;    Assert.IsTrue(listOfNumbersToTry.Contains(7));&lt;br /&gt;    Assert.IsTrue(listOfNumbersToTry.Contains(9));&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #008000"&gt;//level 1&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[,] solve(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[,] inputSudokuArray) {&lt;br /&gt;    &lt;br /&gt;    &lt;span style="color: #008000"&gt;// fill in numbers which are correct&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #008000"&gt;//int[,] sudokuArrayAfterB = new int[9, 9];&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #008000"&gt;//sudokuArrayAfterB = solveB(inputSudokuArray);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #008000"&gt;// semi random code&lt;/span&gt;&lt;br /&gt;    Random random = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Random();&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; isSolved = &lt;span style="color: #0000ff"&gt;false&lt;/span&gt;;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; numberOfIterations = 0;&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;while&lt;/span&gt; (!isSolved)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[,] trySudokuArray = (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[,])sudokuArrayAfterB.Clone();&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; row = 0; row &amp;lt; 9; row++)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; col = 0; col &amp;lt; 9; col++)&lt;br /&gt;            {&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (trySudokuArray[row,col] == 0) &lt;span style="color: #008000"&gt;// if it is blank&lt;/span&gt;&lt;br /&gt;                {&lt;br /&gt;                    &lt;span style="color: #008000"&gt;// setup numbers to try, then strategy is to take out of this list&lt;/span&gt;&lt;br /&gt;                    List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt; listOfNumbersToTry = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; 10; i++)&lt;br /&gt;                        listOfNumbersToTry.Add(i);&lt;br /&gt;&lt;br /&gt;                    LookAtOtherNumbersInRowAndTakeOutOnesWeDontNeedToCheck(trySudokuArray, row, listOfNumbersToTry);&lt;br /&gt;&lt;br /&gt;                    LookAtOtherNumbersInColumnAndTakeOutOnesWeDontNeedToCheck(trySudokuArray, col, listOfNumbersToTry);&lt;br /&gt;&lt;br /&gt;                    LookAtOtherNumbersInSquareAndTakeOutOnesWeDontNeed(trySudokuArray, row, col, listOfNumbersToTry);&lt;br /&gt;                    &lt;br /&gt;                    &lt;span style="color: #008000"&gt;// are there any possible numbers?&lt;/span&gt;&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (listOfNumbersToTry.Count &amp;gt; 0)&lt;br /&gt;                    {&lt;br /&gt;                        &lt;span style="color: #008000"&gt;// pick a random number from listOfNumbersToTry&lt;/span&gt;&lt;br /&gt;                        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; indexOfListNumberToGet = random.Next(0, listOfNumbersToTry.Count());&lt;br /&gt;                        trySudokuArray[row,col] = listOfNumbersToTry[indexOfListNumberToGet];&lt;br /&gt;                    }&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;else&lt;/span&gt;&lt;br /&gt;                        &lt;span style="color: #0000ff"&gt;goto&lt;/span&gt; Foo;&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;        isSolved = checkSudoku(trySudokuArray);&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (isSolved)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; row = 0; row &amp;lt; 9; row++)&lt;br /&gt;            {&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; col = 0; col &amp;lt; 9; col++)&lt;br /&gt;                    Debug.Write(trySudokuArray[row, col] + &lt;span style="color: #006080"&gt;&amp;quot; &amp;quot;&lt;/span&gt;);&lt;br /&gt;                Debug.WriteLine(&lt;span style="color: #006080"&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;br /&gt;            }&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; trySudokuArray;&lt;br /&gt;        }&lt;br /&gt;    Foo:&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (numberOfIterations % 1000 == 0)&lt;br /&gt;            Debug.WriteLine(&lt;span style="color: #006080"&gt;&amp;quot;iterations: &amp;quot;&lt;/span&gt; + String.Format(&lt;span style="color: #006080"&gt;&amp;quot;{0:0,0}&amp;quot;&lt;/span&gt;,numberOfIterations));&lt;br /&gt;            &lt;span style="color: #008000"&gt;//Console.WriteLine(&amp;quot;iterations: &amp;quot; + String.Format(&amp;quot;{0:0,0}&amp;quot;, numberOfIterations));&lt;/span&gt;&lt;br /&gt;        numberOfIterations++;&lt;br /&gt;    }&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff"&gt;null&lt;/span&gt;;&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3&gt;StrategyB – Make numbers definite if we know they are&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;For each 0 square see if there is only 1 possible number 
    &lt;ul&gt;
      &lt;li&gt;ie look at LookAtOtherNumbersInRowAndTakeOutOnesWeDontNeedToCheck etc &lt;/li&gt;

      &lt;li&gt;put that number in the square &lt;/li&gt;

      &lt;li&gt;keep looping the whole board until nothing is changed &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</Content>
      <Created>2011-04-10T03:40:37.96875-04:00</Created>
      <Modified>2011-04-10T03:40:37.96875-04:00</Modified>
      <EntryId>a33b0ca0-9974-4c89-a35d-6c3f1cff5750</EntryId>
      <Description />
      <Title>Sudoku</Title>
      <Categories>c# language;Coding Challenge</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>