<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-06-30T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b7788b30-ae9d-41f4-95f5-89ec97ffb6e4" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E46Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; MethodUnderTest_scenario_expectedbehaviour()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E46&lt;/span&gt;.MakeListOfPrimes(100);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.IsSubsetOf(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt; {2,3,5,7,11}, result);   &lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsConjecture_Given9_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt; list = &lt;span style="color:#2b91af"&gt;E46&lt;/span&gt;.MakeListOfPrimes(100);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E46&lt;/span&gt;.IsConjecture(9,list);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E46&lt;/span&gt;.IsConjecture(11,list); &lt;span style="color:#008000"&gt;//not in list on website but good&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E46&lt;/span&gt;.IsConjecture(15,list);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E46&lt;/span&gt;.IsConjecture(21,list);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E46&lt;/span&gt;.IsConjecture(33,list);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;     }&lt;br&gt;     &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsConjecture_GivenBad_ReturnFalse()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; list = &lt;span style="color:#2b91af"&gt;E46&lt;/span&gt;.MakeListOfPrimes(100);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E46&lt;/span&gt;.IsConjecture(8,list);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E46&lt;/span&gt;.IsConjecture(10,list);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E46&lt;/span&gt;.IsConjecture(22,list);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SolveSmallestOddComposite_Given_ReturnComposite()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E46&lt;/span&gt;.SolveSmallestOddComposite();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(5777, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E46&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; SolveSmallestOddComposite()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt; list = MakeListOfPrimes(10000);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; i = 3; i &amp;lt; 1000000; i=i+2)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//if an odd composite number&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!IsPrime(i))&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#008000"&gt;//if cannot be written as the sum of a prime and twice a square&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!IsConjecture(i, list))&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; i;&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 0;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsConjecture(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; number, &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt; list)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (number % 2 == 0) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; prime &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; list)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//try all primes less than number - 2&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (prime &amp;gt; number -2) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//try all whole numbers up to number-prime..then square root&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; maxPossibleNumberToAdd = (&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;)&lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(number - prime);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt;= maxPossibleNumberToAdd; i++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; ((prime + 2 * (i * i)) == number) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt; MakeListOfPrimes(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; max)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; list = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt;();&lt;br&gt;         list.Add(2);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 3; i &amp;lt;= max; i=i+2)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsPrime(i))&lt;br&gt;             {&lt;br&gt;                 list.Add(i);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; list;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsPrime(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; a)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a == 1) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a == 2) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 2; i &amp;lt;= &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(a); i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a % i == 0)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-07-01T13:19:41.6456005-04:00</Created>
      <Modified>2012-07-01T13:19:41.6456005-04:00</Modified>
      <EntryId>b4f053d4-ea04-43b4-a166-d5722272aa33</EntryId>
      <Description />
      <Title>Euler46–Composite Conjecture</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>