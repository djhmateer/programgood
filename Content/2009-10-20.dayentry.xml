<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2009-10-19T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>Task:&amp;nbsp; create a WebService that returns a recording and all its entities when specifying the id of the recording. Return type of XML (ie not a .net dataset).&lt;br&gt;&lt;br&gt;The DAL.Catalog returns a RecordingDataSet.Recording.&lt;br&gt;&lt;br&gt;We need to write a DTO that takes an input and transforms(munges) it into something else&lt;br&gt;&lt;br&gt;Using a Service Interface Pattern.&lt;br&gt;&lt;br&gt;Build a stub, map it into a DTO, and verify each field.&lt;br&gt;First thing I did was to create a stub, to hide how the RecordingDataSet is retrieved..so am not relying on the DAL at this point.&lt;br&gt;&lt;br&gt;Here is the test the Stub code:&lt;br&gt;&lt;pre&gt;&lt;span style="color: Black; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;[TestFixture]
  &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;class&lt;/span&gt; CatalogServiceStubFixture
     {
         RecordingDataSet.Recording recording;
         RecordingDataSet.Recording actual;
         CatalogServiceStub service;
 
         [SetUp]
         &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;void&lt;/span&gt; SetUp()
         {
             &lt;span style="color: Green; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;// create a test recording in memory&lt;/span&gt;
             recording &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; CreateRecording();
             service &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;new&lt;/span&gt; CatalogServiceStub(recording);
             actual &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; service.FindByRecordingId(recording.Id);
         }
 
         &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;private&lt;/span&gt; RecordingDataSet.Recording CreateRecording() 
         {
             RecordingDataSet dataSet &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;new&lt;/span&gt; RecordingDataSet();
             RecordingDataSet.Recording recording &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; dataSet.Recordings.NewRecording();
             recording.Id &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; 1;
            &lt;span style="color: Green; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;// more code needed here to fill in the rest of the recording.&lt;/span&gt;
             &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;return&lt;/span&gt; recording;
         }
 
         [Test]
         &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;void&lt;/span&gt; CheckId()
         {
             Assert.AreEqual(recording.Id, actual.Id);
         }

&lt;/span&gt;&lt;/pre&gt;Next we want a dto to transform our dataset, into something else:&lt;br&gt;&lt;br&gt;&lt;img src="http://www.programgood.net/content/binary/dto.gif" border="0"&gt;&lt;br&gt;&lt;br&gt;To specify in platform independant, we use XML.&amp;nbsp; This is still quite bulky, perhaps JSON would be lighter now.&lt;br&gt;&lt;br&gt;&lt;pre&gt;&lt;span style="color: Black; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;&amp;lt;?xml version=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1.0"&lt;/span&gt; encoding=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"utf-8"&lt;/span&gt;?&amp;gt;
&amp;lt;xs:schema xmlns:tns=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"http://nunit.org/webservices"&lt;/span&gt; elementFormDefault=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"qualified"&lt;/span&gt; targetNamespace=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"http://nunit.org/webservices"&lt;/span&gt; xmlns:xs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"http://www.w3.org/2001/XMLSchema"&lt;/span&gt;&amp;gt;
  &amp;lt;xs:element name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"Recording"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"tns:RecordingDto"&lt;/span&gt; /&amp;gt;
  &amp;lt;xs:complexType name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"RecordingDto"&lt;/span&gt;&amp;gt;
    &amp;lt;xs:sequence&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"id"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"xs:long"&lt;/span&gt; /&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"title"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"xs:string"&lt;/span&gt; /&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"artistName"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"xs:string"&lt;/span&gt; /&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"releaseDate"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"xs:string"&lt;/span&gt; /&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"labelName"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"xs:string"&lt;/span&gt; /&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"0"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"unbounded"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"tracks"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"tns:TrackDto"&lt;/span&gt; /&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"0"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"unbounded"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"reviews"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"tns:ReviewDto"&lt;/span&gt; /&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"0"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"totalRunTime"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"xs:int"&lt;/span&gt; /&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"0"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"averageRating"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"xs:int"&lt;/span&gt; /&amp;gt;
    &amp;lt;/xs:sequence&amp;gt;
  &amp;lt;/xs:complexType&amp;gt;
  &amp;lt;xs:complexType name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"TrackDto"&lt;/span&gt;&amp;gt;
    &amp;lt;xs:sequence&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"id"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"xs:long"&lt;/span&gt; /&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"title"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"xs:string"&lt;/span&gt; /&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"artistName"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"xs:string"&lt;/span&gt; /&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"duration"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"xs:string"&lt;/span&gt; /&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"genreName"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"xs:string"&lt;/span&gt; /&amp;gt;
    &amp;lt;/xs:sequence&amp;gt;
  &amp;lt;/xs:complexType&amp;gt;
  &amp;lt;xs:complexType name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"ReviewDto"&lt;/span&gt;&amp;gt;
    &amp;lt;xs:sequence&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"id"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"xs:long"&lt;/span&gt; /&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"reviewerName"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"xs:string"&lt;/span&gt; /&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"rating"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"xs:int"&lt;/span&gt; /&amp;gt;
      &amp;lt;xs:element minOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; maxOccurs=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"1"&lt;/span&gt; name=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"reviewContent"&lt;/span&gt; type=&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"xs:string"&lt;/span&gt; /&amp;gt;
    &amp;lt;/xs:sequence&amp;gt;
  &amp;lt;/xs:complexType&amp;gt;
&amp;lt;/xs:schema&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;A benefit is that we can create C# from this:.. but really just getters and setters.&amp;nbsp; See below.. this led to an interesting bug.&lt;br&gt;&lt;br&gt;http://www.codingday.com/xml-c-class-generator-for-c-using-xsd-for-deserialization/&lt;br&gt;&lt;br&gt;xsd asdf.xml - create an xsd&lt;br&gt;xsd asdf.xsd /CLASSES&amp;nbsp; - creates a .cs&lt;br&gt;&lt;br&gt;Then just creating an 'Assembler', which writes out the DTO...(from http://martinfowler.com/eaaCatalog/dataTransferObject.html)&lt;br&gt;&lt;img src="http://www.programgood.net/content/binary/ServiceLayerDiagram.jpg" border="0"&gt;&lt;br&gt;&lt;p&gt;&lt;/p&gt;The Assembler has business logic in it to flatten the structure (as in the similar example above)&lt;br&gt;&lt;br&gt;The webservice is setup by adding it into IISAdmin.&lt;br&gt;&lt;img src="http://www.programgood.net/content/binary/screen1234567.gif" border="0"&gt;&lt;br&gt;As the default ASP.NET user does not have access to my local database &lt;br&gt;connection = new SqlConnection("Data Source=DAVEXPLAPTOP;Initial Catalog=catalog;Integrated Security=True");&lt;br&gt;&lt;br&gt;The easiest way to get running on dev was to add the DAVEXPLAPTOP\ASPNET user into my SQL database.&amp;nbsp; This didn't show up under objects when adding, but I went ahead anyway and it worked.&lt;br&gt;&lt;br&gt;&lt;img src="http://www.programgood.net/content/binary/screen12345678.gif" border="0"&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src="http://www.programgood.net/content/binary/screen123456789.gif" border="0"&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;So this is what we have so far:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src="http://www.programgood.net/content/binary/diag.gif" border="0"&gt;</Content>
      <Created>2009-10-19T23:06:55.356-04:00</Created>
      <Modified>2009-11-03T21:20:15.6517563-05:00</Modified>
      <EntryId>f53ca405-c52f-4d44-b4f0-7cae3623b527</EntryId>
      <Description />
      <Title>Test Driven Development in .NET - Service Layer (Ch6)</Title>
      <Categories>Object Oriented Programming;Patterns;Testing</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>From the nbdn course, I had some interesting code I'd like to test.  Just the business logic really, no DAL nor UI.  As I wanted to make a full application, the first though was to make a DAL which talked to a text file, or just some dummy data.  How to do this well?  De-coupled.  Tried to use poor mans dependency injection, and got confused.  So I had a coffee, and bought this book.  Because it had an end to end example of a testable application.  It uses .net1.1 mostly (which is good as there are no language constructs to learn)&lt;br&gt;&lt;br&gt;&lt;img src="http://www.programgood.net/content/binary/tdd.jpg" border="0"&gt;&lt;br&gt;&lt;br&gt;Some good introduction to refactorings, and unit testing.  The main meat of the book is an example called MediaLibrary (music recordings).  Chapter 5 started with testing the DAL. &lt;br&gt;&lt;br&gt;Here are the first tests.  Am showing nunit test runner.. mostly I use testdriven.net, and have setup ctrl alt shft t to run tests.&lt;br&gt;&lt;br&gt;&lt;img src="http://www.programgood.net/content/binary/screen123.gif" border="0"&gt;&lt;br&gt;&lt;br&gt;for source control I'm using  git, and have coupled up with gvim as text editor.  And linked in beyond compare for a merge tool.&lt;br&gt;&lt;br&gt;The book uses Strongly Typed Datasets, which were the 'star of the show' in the .net1.0 release.  By writing the sql, and having intellisense have autoproperties, this saves writing boiler plate code.&lt;br&gt;&lt;br&gt;I learned about DataSets.. here is my edit (from wikipedia)..http://en.wikipedia.org/wiki/ADO.NET#DataSets&lt;br&gt;&lt;p&gt;ADO.NET consists of two primary parts:&lt;/p&gt;
&lt;h3&gt;&lt;span class="editsection"&gt;&lt;/span&gt;&lt;span class="mw-headline" id="Data_provider"&gt;Data provider&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;These classes provide access to a data source, such as a &lt;a href="http://en.wikipedia.org/wiki/Microsoft_SQL_Server" title="Microsoft SQL Server"&gt;Microsoft SQL Server&lt;/a&gt;.  Each data source has its own set of provider
objects, but they each have a common set of utility classes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Database_Connection" title="Database Connection" class="mw-redirect"&gt;Connection&lt;/a&gt;: Provides a connection used to communicate with the data source. &lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Command" title="Command"&gt;Command&lt;/a&gt;: Used to perform some action on the data source, such as reading, updating, or deleting relational data.&lt;/li&gt;&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Parameter" title="Parameter"&gt;Parameter&lt;/a&gt;: Describes a single parameter to a command. A common example is a parameter to a &lt;a href="http://en.wikipedia.org/wiki/Stored_procedure" title="Stored procedure"&gt;stored procedure&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/DataAdapter" title="DataAdapter"&gt;DataAdapter&lt;/a&gt;: A bridge used to transfer data between a Data source and a DataSet object (see below).&lt;/li&gt;&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/DataReader" title="DataReader"&gt;DataReader&lt;/a&gt;:
Used to efficiently process a large list of results one record at a
time. It allows records to be accessed in a read-only, forward-only
mode, i.e., records have to be accessed in sequential order; they can
neither be randomly accessed nor can a record which has been processed
previously be accessed again.&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;&lt;span class="editsection"&gt;&lt;/span&gt;&lt;span class="mw-headline" id="DataSets"&gt;DataSets&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;DataSet objects, a group of classes describing a simple in-memory &lt;a href="http://en.wikipedia.org/wiki/Relational_database" title="Relational database"&gt;relational database&lt;/a&gt;, &lt;br&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A &lt;b&gt;DataSet&lt;/b&gt; object represents a &lt;a href="http://en.wikipedia.org/wiki/Logical_schema" title="Logical schema"&gt;schema&lt;/a&gt; (either an entire database or a subset of one). It can contain tables and relationships between those tables.
&lt;ul&gt;&lt;li&gt;A &lt;b&gt;DataTable&lt;/b&gt; object represents a single table in the database. It has a name, rows, and columns.
&lt;ul&gt;&lt;li&gt;A &lt;b&gt;DataView&lt;/b&gt; object overlays a DataTable and sorts the data (much like an &lt;a href="http://en.wikipedia.org/wiki/SQL" title="SQL"&gt;SQL&lt;/a&gt; "&lt;a href="http://en.wikipedia.org/wiki/Order_by" title="Order by" class="mw-redirect"&gt;order by&lt;/a&gt;" clause) and filters the records (much like an SQL "&lt;a href="http://en.wikipedia.org/wiki/Where_%28SQL%29" title="Where (SQL)"&gt;where&lt;/a&gt;"
clause) if a filter is set. An in-memory index is used to facilitate
these operations. All DataTables have a default filter, while any
number of additional DataViews can be defined, reducing interaction
with the underlying database and thus improving performance.
&lt;ul&gt;&lt;li&gt;A &lt;b&gt;DataColumn&lt;/b&gt; represents a column of the table, including its name and type.&lt;/li&gt;&lt;li&gt;A &lt;b&gt;DataRow&lt;/b&gt; object represents a single row in the table; it
allows reading and updating of values in that row, likewise retrieving
any rows that are related to it through a primary-key foreign-key
relationship.&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;VS has a nice editor:&lt;br&gt;&lt;img src="http://www.programgood.net/content/binary/screen12345.gif" border="0"&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;Once I spiked up what datasets were (in simpleDatabaseTests.cs).. used this for reference: http://www.csharp-station.com/Tutorials/AdoDotNet/Lesson05.asp&lt;br&gt;&lt;pre&gt;&lt;span style="color: Black; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt; [Test]
        &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;void&lt;/span&gt; put_data_into_a_dataset()
        {
            DataSet dataset &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;new&lt;/span&gt; DataSet();
            SqlDataAdapter data_adapter &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;new&lt;/span&gt; SqlDataAdapter(&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"select id, name from Artist"&lt;/span&gt;, connection);
            SqlCommandBuilder sql_command_builder &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;new&lt;/span&gt; SqlCommandBuilder(data_adapter);
            data_adapter.Fill(dataset, &lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"Artist"&lt;/span&gt;);
            Assert.IsNotNull(dataset);

            DataTable data_table &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; dataset.Tables[0];
            &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;for&lt;/span&gt; (&lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;int&lt;/span&gt; i &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; 0; i &lt; data_table.Rows.Count; i++)
            {
                DataRow data_row &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; data_table.Rows[i];
                Console.Out.Write(data_row[&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"id"&lt;/span&gt;] &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;+&lt;/span&gt; &lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;" "&lt;/span&gt;);
                Console.Out.WriteLine(data_row[&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"name"&lt;/span&gt;]);
            }
        }&lt;/span&gt;&lt;/pre&gt;&lt;br&gt;The example I'm working through uses a Table Data Gateway Pattern for the DAL.  &lt;br&gt;&lt;br&gt;http://martinfowler.com/eaaCatalog/tableDataGateway.html&lt;br&gt;"A Table Data Gateway holds all the SQL for accessing a single
table or view: selects, inserts, updates, and deletes. Other code
calls its methods for all interaction with the database."&lt;br&gt;&lt;br&gt;Lets take an example of ArtistFixture.cs which tests ArtistGateway.cs&lt;br&gt;&lt;br&gt;&lt;pre&gt;&lt;span style="color: Black; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;[TestFixture]
    &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;class&lt;/span&gt; ArtistFixture
    {
        &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;static&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;readonly&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;string&lt;/span&gt; artistName &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"Artist"&lt;/span&gt;;
        SqlConnection connection;
        ArtistGateway gateway;
        RecordingDataSet recordingDataSet;
        &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;long&lt;/span&gt; artistId;

        [SetUp]
        &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;void&lt;/span&gt; setup_and_open_connection_pass_to_gateway_setup_data_set()
        {
            connection &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;new&lt;/span&gt; SqlConnection(ConfigurationSettings.AppSettings.Get(&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"Catalog.Connection"&lt;/span&gt;));
            connection.Open();

            recordingDataSet &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;new&lt;/span&gt; RecordingDataSet();
            gateway &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;new&lt;/span&gt; ArtistGateway(connection);
            &lt;span style="color: Green; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;// insert a new artist getting its ID from the database&lt;/span&gt;
            artistId &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; gateway.Insert(recordingDataSet, artistName);
        }

        [Test]
        &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;void&lt;/span&gt; RetrieveArtistFromDatabase()
        {
            &lt;span style="color: Green; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;// create new RDS, use same gateway.&lt;/span&gt;
            RecordingDataSet loadedFromDB &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;new&lt;/span&gt; RecordingDataSet();
            RecordingDataSet.Artist loadedArtist &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; gateway.FindById(artistId, loadedFromDB);

            Assert.AreEqual(artistId, loadedArtist.Id);
            Assert.AreEqual(artistName, loadedArtist.Name);
        }&lt;/span&gt;&lt;/pre&gt;Here is part of ArtistGateway.cs.. gateway is newed up with a connection passed in.. then only in Insert is it passed in a strongly typed RecordingDataSet, which has all the SQL in it which has been auto-genned.&lt;br&gt;&lt;pre&gt;&lt;span style="color: Black; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;&lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;class&lt;/span&gt; ArtistGateway&lt;br&gt;    {&lt;br&gt;        SqlDataAdapter adapter;&lt;br&gt;        SqlConnection connection;&lt;br&gt;        SqlCommand command;&lt;br&gt;        SqlCommandBuilder builder;&lt;br&gt;&lt;br&gt;        &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; ArtistGateway(SqlConnection connection)&lt;br&gt;        {&lt;br&gt;            &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;this&lt;/span&gt;.connection &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; connection;&lt;br&gt;&lt;br&gt;            command &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;new&lt;/span&gt; SqlCommand(&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"select id, name from artist where id = @id"&lt;/span&gt;,connection);&lt;br&gt;            command.Parameters.Add(&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"@id"&lt;/span&gt;, SqlDbType.BigInt);&lt;br&gt;&lt;br&gt;            adapter &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;new&lt;/span&gt; SqlDataAdapter(command);&lt;br&gt;            builder &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;new&lt;/span&gt; SqlCommandBuilder(adapter);&lt;br&gt;        }&lt;br&gt;&lt;br&gt;        &lt;br&gt;        &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; RecordingDataSet.Artist FindById(&lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;long&lt;/span&gt; artistId, RecordingDataSet recordingDataSet)&lt;br&gt;        {&lt;br&gt;            command.Parameters[&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"@id"&lt;/span&gt;].Value &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; artistId;&lt;br&gt;            adapter.Fill(recordingDataSet, recordingDataSet.Artists.TableName);&lt;br&gt;            DataRow[] rows &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; recordingDataSet.Artists.Select(String.Format(&lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"id={0}"&lt;/span&gt;, artistId));&lt;br&gt;&lt;br&gt;            &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;if&lt;/span&gt; (rows.Length &lt; 1) &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;return&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;null&lt;/span&gt;;&lt;br&gt;            &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;return&lt;/span&gt; (RecordingDataSet.Artist) rows[0];&lt;br&gt;        }&lt;br&gt;&lt;/span&gt;Class Diagram done in VS2008 with the Class Designer Powertoy http://www.codeplex.com/modeling&lt;br&gt;To get the blue lines go to Class Diagram, Filter Lines, Show All Associations.&lt;br&gt;&lt;img src="http://www.programgood.net/content/binary/screen123456.gif" border="0"&gt;&lt;br&gt;&lt;/pre&gt;Sequence diagram done in Visio: (hmm - this is a bit complex... I prefer the class diagram above with notes)&lt;br&gt;&lt;img src="http://www.programgood.net/content/binary/sequenceArtistFixture.jpg" border="0"&gt;&lt;br&gt;&lt;br&gt;Genre was next, then the rest.  Then relationships between objects eg ReviewReviewer.. just testing the test data we create comes back:  Have abstracted out some of the setup code into ConnectionFixture.&lt;br&gt;&lt;pre&gt;&lt;span style="color: Black; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt; [TestFixture]
 &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;class&lt;/span&gt; ReviewReviewerFixture : ConnectionFixture
 {
     [Test]
     &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;void&lt;/span&gt; ReviewerId()
     {
         RecordingDataSet recordingDataSet &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;new&lt;/span&gt; RecordingDataSet();

         ReviewGateway reviewGateway &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;new&lt;/span&gt; ReviewGateway(Connection);
         &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;long&lt;/span&gt; reviewId &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; reviewGateway.Insert(recordingDataSet, 1, &lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"Review Content"&lt;/span&gt;);

         ReviewerGateway reviewerGateway &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;new&lt;/span&gt; ReviewerGateway(Connection);
         &lt;span style="color: Blue; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;long&lt;/span&gt; reviewerId &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; reviewerGateway.Insert(recordingDataSet, &lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"Reviewer Name"&lt;/span&gt;);

         RecordingDataSet.Review review &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; reviewGateway.FindById(reviewId, recordingDataSet);

         review.ReviewerId &lt;span style="color: Red; background-color: Transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; reviewerId;
         reviewGateway.Update(recordingDataSet);

         Assert.AreEqual(reviewerId, review.Reviewer.Id);

         reviewGateway.Delete(recordingDataSet, reviewId);
         reviewerGateway.Delete(recordingDataSet, reviewerId);
     }
 }&lt;/span&gt;&lt;/pre&gt;The hardest test is RecordingGateway, as it depends on all the other 'tables'.  To simplify, we abstract out the insert/del of test data to RecordingBuilder.cs.&lt;br&gt;&lt;br&gt;The last class is Catalog, which is the only class that will be called from the Service layer.  In Catalog we have FindByRecordingId, which returns a RecordingDataSet.Recording (so all the data associated with this recordingId).&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src="http://www.programgood.net/content/binary/DALOverview.jpg" border="0"&gt;&lt;br&gt;&lt;br&gt;In summary we have done this of the overall structure of the APP:&lt;br&gt;&lt;br&gt;&lt;img src="http://www.programgood.net/content/binary/DALDiag.gif" border="0"&gt;</Content>
      <Created>2009-10-19T21:03:44.246-04:00</Created>
      <Modified>2009-12-22T07:25:45.51725-05:00</Modified>
      <EntryId>1331c215-9394-48c3-922e-b705c2a62ff3</EntryId>
      <Description />
      <Title>Test Driven Development in .NET - DAL (Ch5)</Title>
      <Categories>Database;Object Oriented Programming;Patterns;Testing</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>