<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2010-12-11T19:00:00-05:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 &lt;img border="0" alt="×" src="http://projecteuler.net/images/symbol_times.gif" width="9" height="9" /&gt; 99.&lt;/p&gt;  &lt;p&gt;Find the largest palindrome made from the product of two 3-digit numbers.&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; Main(&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;[] args)&lt;br /&gt;{&lt;br /&gt;    IList&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt; listOfPalindromes = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 100; i &amp;lt;= 999; i++)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; j = 100; j &amp;lt;= 999; j++)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; product = i * j;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (product &amp;gt;= 100000)&lt;br /&gt;            {&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;string&lt;/span&gt; productAsString = Convert.ToString(product);&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; ((productAsString[0] == productAsString[5]) &amp;amp;&amp;amp; (productAsString[1] == productAsString[4]) &amp;amp;&amp;amp; (productAsString[2] == productAsString[3]))&lt;br /&gt;                    listOfPalindromes.Add(product);&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (var number &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; listOfPalindromes.OrderBy(x =&amp;gt; x))&lt;br /&gt;        Console.WriteLine(number.ToString());&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;906609&lt;/div&gt;

&lt;p&gt;Phils way:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; Main(&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;[] args)&lt;br /&gt;{&lt;br /&gt;   &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; max = 0;&lt;br /&gt;&lt;br /&gt;   &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; a = 999; a &amp;gt; 2; a--)&lt;br /&gt;   {&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; b = 999; b &amp;gt; 2; b--)&lt;br /&gt;       {&lt;br /&gt;&lt;br /&gt;           &lt;span style="color: #0000ff"&gt;string&lt;/span&gt; ans = Convert.ToString(a * b);&lt;br /&gt;           &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; counter = 0;&lt;br /&gt;           &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; x = 0; x &amp;lt; ans.Length; x++)&lt;br /&gt;           {&lt;br /&gt;               &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (ans[x] == ans[ans.Length - x-1])&lt;br /&gt;               {&lt;br /&gt;                   counter++;&lt;br /&gt;               }&lt;br /&gt;           }&lt;br /&gt;&lt;br /&gt;           &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (counter == ans.Length &amp;amp;&amp;amp; Convert.ToInt32(ans)&amp;gt;max)&lt;br /&gt;           {&lt;br /&gt;               max = Convert.ToInt32(ans);&lt;br /&gt;&lt;br /&gt;           }&lt;br /&gt;       }&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;   Console.WriteLine(max);&lt;br /&gt;   Console.ReadLine();&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;</Content>
      <Created>2010-12-12T03:32:17.487375-05:00</Created>
      <Modified>2010-12-12T03:34:45.34675-05:00</Modified>
      <EntryId>26f35715-2174-4f87-9f61-3f0a12d48e26</EntryId>
      <Description />
      <Title>Euler #4 – Palindrome</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;The prime factors of 13195 are 5, 7, 13 and 29.&lt;/p&gt;  &lt;p&gt;What is the largest prime factor of the number 600851475143 ?&lt;/p&gt;  &lt;p&gt;The secret here is that you only need to test prime numbers up to the square root of 600billion number above.&lt;/p&gt;  &lt;p&gt;Why? &lt;/p&gt;  &lt;table border="0" cellspacing="0" cellpadding="2" width="107"&gt;&lt;tbody&gt;     &lt;tr&gt;       &lt;td valign="top" width="34"&gt;&amp;#160;&lt;/td&gt;        &lt;td valign="top" width="12"&gt;&amp;#160;&lt;/td&gt;        &lt;td valign="top" width="59"&gt;&amp;#160;&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;18 *&lt;/td&gt;        &lt;td valign="top" width="12"&gt;2&lt;/td&gt;        &lt;td valign="top" width="59"&gt;36&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;17&lt;/td&gt;        &lt;td valign="top" width="12"&gt;&amp;#160;&lt;/td&gt;        &lt;td valign="top" width="59"&gt;&amp;#160;&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;16&lt;/td&gt;        &lt;td valign="top" width="12"&gt;&amp;#160;&lt;/td&gt;        &lt;td valign="top" width="59"&gt;&amp;#160;&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;15&lt;/td&gt;        &lt;td valign="top" width="12"&gt;&amp;#160;&lt;/td&gt;        &lt;td valign="top" width="59"&gt;&amp;#160;&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;14&lt;/td&gt;        &lt;td valign="top" width="12"&gt;&amp;#160;&lt;/td&gt;        &lt;td valign="top" width="59"&gt;&amp;#160;&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;13&lt;/td&gt;        &lt;td valign="top" width="12"&gt;&amp;#160;&lt;/td&gt;        &lt;td valign="top" width="59"&gt;&amp;#160;&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;12 *&lt;/td&gt;        &lt;td valign="top" width="12"&gt;3&lt;/td&gt;        &lt;td valign="top" width="59"&gt;36&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;11&lt;/td&gt;        &lt;td valign="top" width="12"&gt;&amp;#160;&lt;/td&gt;        &lt;td valign="top" width="59"&gt;&amp;#160;&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;10&lt;/td&gt;        &lt;td valign="top" width="12"&gt;&amp;#160;&lt;/td&gt;        &lt;td valign="top" width="59"&gt;&amp;#160;&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;9 *&lt;/td&gt;        &lt;td valign="top" width="12"&gt;4&lt;/td&gt;        &lt;td valign="top" width="59"&gt;36&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;8&lt;/td&gt;        &lt;td valign="top" width="12"&gt;&amp;#160;&lt;/td&gt;        &lt;td valign="top" width="59"&gt;&amp;#160;&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;7&lt;/td&gt;        &lt;td valign="top" width="12"&gt;&amp;#160;&lt;/td&gt;        &lt;td valign="top" width="59"&gt;&amp;#160;&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;6 *&lt;/td&gt;        &lt;td valign="top" width="12"&gt;6&lt;/td&gt;        &lt;td valign="top" width="59"&gt;36&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;5&lt;/td&gt;        &lt;td valign="top" width="12"&gt;&amp;#160;&lt;/td&gt;        &lt;td valign="top" width="59"&gt;36&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;4 *&lt;/td&gt;        &lt;td valign="top" width="12"&gt;9&lt;/td&gt;        &lt;td valign="top" width="59"&gt;36&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;3 *&lt;/td&gt;        &lt;td valign="top" width="12"&gt;12 &lt;/td&gt;        &lt;td valign="top" width="59"&gt;36&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="34"&gt;2 *&lt;/td&gt;        &lt;td valign="top" width="12"&gt;18&lt;/td&gt;        &lt;td valign="top" width="59"&gt;36&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;  &lt;p&gt;Go above 6, and 9 * 4 is the same as 4 * 9… same for 12 * 3, 18 * 2.&lt;/p&gt;  &lt;p&gt;So we need only find all the primes up to (int)Math.Sqrt(numberToGetLargestPrimeFactorOf); // 775146&lt;/p&gt;  &lt;p&gt;Then see which is the largest which divides by the 600billion number&lt;/p&gt;  &lt;p&gt;which is: 6857&amp;#160; (divides it as: 87,625,999)&lt;/p&gt;  &lt;p&gt;There are no larger primes which are divisible by the 600 billion number.&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #008000"&gt;// What is the largest prime factor of the number 600851475143 ? 600,851,475,143&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #008000"&gt;// we only need to check prime numbers up to Sqrt(600851475143)&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; Main(&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;[] args)&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;long&lt;/span&gt; numberToGetLargestPrimeFactorOf = 600851475143;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; squareRootOfnumberToGetLargestPrimeFactorOf = (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;)Math.Sqrt(numberToGetLargestPrimeFactorOf); &lt;span style="color: #008000"&gt;// 775146&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt; listOfPrimes = generatePrimes(775146); &lt;br /&gt;    List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt; listOfPrimeFactors = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = listOfPrimes.Count-1; i &amp;gt; 0; i--)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; intToDivideBy = listOfPrimes[i];&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (numberToGetLargestPrimeFactorOf % intToDivideBy == 0)&lt;br /&gt;        {&lt;br /&gt;            listOfPrimeFactors.Add(intToDivideBy);&lt;br /&gt;            Console.WriteLine(&lt;span style="color: #006080"&gt;&amp;quot;factor is &amp;quot;&lt;/span&gt; + intToDivideBy.ToString());&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;static&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt; generatePrimes(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; toGenerate)&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt; primes = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (toGenerate &amp;gt; 0) primes.Add(2);&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; curTest = 3;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;while&lt;/span&gt; (primes.Count &amp;lt; toGenerate)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; sqrt = (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;)Math.Sqrt(curTest);&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; isPrime = &lt;span style="color: #0000ff"&gt;true&lt;/span&gt;;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; primes.Count &amp;amp;&amp;amp; (primes[i] &amp;lt;= sqrt); ++i)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (curTest % primes[i] == 0)&lt;br /&gt;            {&lt;br /&gt;                isPrime = &lt;span style="color: #0000ff"&gt;false&lt;/span&gt;;&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;break&lt;/span&gt;;&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (isPrime)&lt;br /&gt;            primes.Add(curTest);&lt;br /&gt;        curTest += 2;&lt;br /&gt;    }&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; primes;&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;Some other code which was much less efficient, but more readable in my opinion was:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;IEnumerable&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt; listOfInts = Enumerable.Range(2, 775146).Where(i =&amp;gt; (i % 2 != 0));&lt;br /&gt;IList&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt; listOfPrimes = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; intToCheck &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; listOfInts)&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; isPrime = &lt;span style="color: #0000ff"&gt;true&lt;/span&gt;;&lt;br /&gt;    &lt;span style="color: #008000"&gt;// divide the intToCheck against all numbers in the list lower than it&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; intToDivideBy &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; listOfInts)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (intToCheck != intToDivideBy)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; ((intToCheck % intToDivideBy) == 0)&lt;br /&gt;                isPrime = &lt;span style="color: #0000ff"&gt;false&lt;/span&gt;;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (isPrime)&lt;br /&gt;        listOfPrimes.Add(intToCheck);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; intToDivideBy &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; listOfPrimes.Reverse())&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (numberToGetLargestPrimeFactorOf % intToDivideBy == 0)&lt;br /&gt;    {&lt;br /&gt;        listOfPrimeFactors.Add(intToDivideBy);&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;break&lt;/span&gt;; &lt;span style="color: #008000"&gt;// stop processing as found the highest&lt;/span&gt;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;</Content>
      <Created>2010-12-12T03:09:15.65925-05:00</Created>
      <Modified>2010-12-12T03:09:15.65925-05:00</Modified>
      <EntryId>91d5fabf-742e-4d28-852e-7367f8b58ace</EntryId>
      <Description />
      <Title>Euler #3 – 600 Billion Prime Factor</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>