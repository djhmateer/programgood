<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2010-11-05T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;Group by multiple values – however can’t get at the original non grouped data..&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.devcurry.com/2009/02/groupby-multiple-values-in-linq.html"&gt;http://www.devcurry.com/2009/02/groupby-multiple-values-in-linq.html&lt;/a&gt;&lt;/p&gt;</Content>
      <Created>2010-11-06T18:56:40.602125-04:00</Created>
      <Modified>2010-11-06T18:56:40.602125-04:00</Modified>
      <EntryId>33a2325e-0775-4f91-93de-e4ea660847ef</EntryId>
      <Description />
      <Title>Linq – Group By Multiple Values</Title>
      <Categories>Linq</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;A windows forms project, with a testing project.&amp;#160; Uses VS2010 and .NET4.&amp;#160; Probably ok with 3.5.&lt;/p&gt;  &lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:fb3a1972-4489-4e52-abe7-25a00bb07fdf:c13e4085-c627-4f46-950c-2ea706e8e205" class="wlWriterEditableSmartContent"&gt;&lt;p&gt; &lt;a href="http://www.programgood.net/content/binary/WindowsLiveWriter/FindingUniquenessinData_A842/UniqueSpike.zip" target="_blank"&gt;version1&lt;/a&gt;&lt;/p&gt;&lt;/div&gt; &lt;/p&gt;  &lt;p&gt;The code is really this:&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;partial&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; Form1 : Form&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; Form1()&lt;br /&gt;        {&lt;br /&gt;            InitializeComponent();&lt;br /&gt;            UniqueSpike uniqueSpike = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; UniqueSpike();&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;string&lt;/span&gt; messageToDisplay = uniqueSpike.DoChecking();&lt;br /&gt;            textBox1.Text = messageToDisplay;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; UniqueSpike&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;string&lt;/span&gt; DoChecking()&lt;br /&gt;        {&lt;br /&gt;            List&amp;lt;thing&amp;gt; listOfThings = SetupTestDataAndAddToList();&lt;br /&gt;            List&amp;lt;thing&amp;gt; result = SeeIfAnyInListHaveAUniqueColour(listOfThings);&lt;br /&gt;            List&amp;lt;thing&amp;gt; result1 = SeeIfAnyInListAreUniqueByPosition(listOfThings);&lt;br /&gt;            List&amp;lt;thing&amp;gt; result2 = SeeIfAnyInListAreUniqueByHeight(listOfThings);&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;string&lt;/span&gt; results = &lt;span style="color: #006080"&gt;&amp;quot;Single Column Uniqueness&amp;quot;&lt;/span&gt; + Environment.NewLine;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (thing thing &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; result)&lt;br /&gt;                results += thing.Name + &lt;span style="color: #006080"&gt;&amp;quot; becuase its colour is &amp;quot;&lt;/span&gt; + thing.Colour + Environment.NewLine;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (thing thing &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; result1)&lt;br /&gt;                results += thing.Name + &lt;span style="color: #006080"&gt;&amp;quot; becuase its position is &amp;quot;&lt;/span&gt; + thing.Colour + Environment.NewLine;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (thing thing &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; result2)&lt;br /&gt;                results += thing.Name + &lt;span style="color: #006080"&gt;&amp;quot; becuase its height is &amp;quot;&lt;/span&gt; + thing.Colour + Environment.NewLine;&lt;br /&gt;&lt;br /&gt;            results += Environment.NewLine + &lt;span style="color: #006080"&gt;&amp;quot;Double Column Uniqueness - Colour and Position&amp;quot;&lt;/span&gt; + Environment.NewLine;&lt;br /&gt;            List&amp;lt;thing&amp;gt; result3 = SeeIfAnyInListAreUniqueByColourAndPosition(listOfThings);&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (thing thing &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; result3)&lt;br /&gt;                results += thing.Name + &lt;span style="color: #006080"&gt;&amp;quot; becuase its colour is &amp;quot;&lt;/span&gt; + thing.Colour + &lt;span style="color: #006080"&gt;&amp;quot; and its position is &amp;quot;&lt;/span&gt; + thing.Position + Environment.NewLine;&lt;br /&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; results;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; List&amp;lt;thing&amp;gt; SetupTestDataAndAddToList()&lt;br /&gt;        {&lt;br /&gt;            thing thing0 = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; thing { Name = &lt;span style="color: #006080"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;, Colour = &lt;span style="color: #006080"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;, Position = &lt;span style="color: #006080"&gt;&amp;quot;left&amp;quot;&lt;/span&gt;, Height = &lt;span style="color: #006080"&gt;&amp;quot;short&amp;quot;&lt;/span&gt; };&lt;br /&gt;            thing thing1 = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; thing { Name = &lt;span style="color: #006080"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, Colour = &lt;span style="color: #006080"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;, Position = &lt;span style="color: #006080"&gt;&amp;quot;left&amp;quot;&lt;/span&gt;, Height = &lt;span style="color: #006080"&gt;&amp;quot;tall&amp;quot;&lt;/span&gt; };&lt;br /&gt;            thing thing2 = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; thing { Name = &lt;span style="color: #006080"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, Colour = &lt;span style="color: #006080"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;, Position = &lt;span style="color: #006080"&gt;&amp;quot;middle&amp;quot;&lt;/span&gt;, Height = &lt;span style="color: #006080"&gt;&amp;quot;short&amp;quot;&lt;/span&gt; }; &lt;span style="color: #008000"&gt;// unique colour and position&lt;/span&gt;&lt;br /&gt;            thing thing3 = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; thing { Name = &lt;span style="color: #006080"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;, Colour = &lt;span style="color: #006080"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;, Position = &lt;span style="color: #006080"&gt;&amp;quot;left&amp;quot;&lt;/span&gt;, Height = &lt;span style="color: #006080"&gt;&amp;quot;short&amp;quot;&lt;/span&gt; }; &lt;span style="color: #008000"&gt;// unique colour and position&lt;/span&gt;&lt;br /&gt;            thing thing4 = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; thing { Name = &lt;span style="color: #006080"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;, Colour = &lt;span style="color: #006080"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;, Position = &lt;span style="color: #006080"&gt;&amp;quot;right&amp;quot;&lt;/span&gt;, Height = &lt;span style="color: #006080"&gt;&amp;quot;medium&amp;quot;&lt;/span&gt; }; &lt;span style="color: #008000"&gt;// unique position right&lt;/span&gt;&lt;br /&gt;            thing thing5 = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; thing { Name = &lt;span style="color: #006080"&gt;&amp;quot;5&amp;quot;&lt;/span&gt;, Colour = &lt;span style="color: #006080"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;, Position = &lt;span style="color: #006080"&gt;&amp;quot;middle&amp;quot;&lt;/span&gt;, Height = &lt;span style="color: #006080"&gt;&amp;quot;tall&amp;quot;&lt;/span&gt; }; &lt;span style="color: #008000"&gt;// unique colour and position&lt;/span&gt;&lt;br /&gt;            thing thing6 = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; thing { Name = &lt;span style="color: #006080"&gt;&amp;quot;6&amp;quot;&lt;/span&gt;, Colour = &lt;span style="color: #006080"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;, Position = &lt;span style="color: #006080"&gt;&amp;quot;left&amp;quot;&lt;/span&gt;, Height = &lt;span style="color: #006080"&gt;&amp;quot;medium&amp;quot;&lt;/span&gt; }; &lt;span style="color: #008000"&gt;// unqiue colour orange&lt;/span&gt;&lt;br /&gt;            thing thing7 = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; thing { Name = &lt;span style="color: #006080"&gt;&amp;quot;7&amp;quot;&lt;/span&gt;, Colour = &lt;span style="color: #006080"&gt;&amp;quot;gold&amp;quot;&lt;/span&gt;, Position = &lt;span style="color: #006080"&gt;&amp;quot;left&amp;quot;&lt;/span&gt;, Height = &lt;span style="color: #006080"&gt;&amp;quot;medium&amp;quot;&lt;/span&gt; }; &lt;span style="color: #008000"&gt;// unqiue colour gold&lt;/span&gt;&lt;br /&gt;            List&amp;lt;thing&amp;gt; listOfThings = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;thing&amp;gt;();&lt;br /&gt;            listOfThings.Add(thing0);&lt;br /&gt;            listOfThings.Add(thing1);&lt;br /&gt;            listOfThings.Add(thing2);&lt;br /&gt;            listOfThings.Add(thing3);&lt;br /&gt;            listOfThings.Add(thing4);&lt;br /&gt;            listOfThings.Add(thing5);&lt;br /&gt;            listOfThings.Add(thing6);&lt;br /&gt;            listOfThings.Add(thing7);&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; listOfThings;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; List&amp;lt;thing&amp;gt; SeeIfAnyInListHaveAUniqueColour(List&amp;lt;thing&amp;gt; listOfThings)&lt;br /&gt;        {&lt;br /&gt;            IEnumerable&amp;lt;IGrouping&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;, thing&amp;gt;&amp;gt; thingQuery2 = from t &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; listOfThings&lt;br /&gt;                                                                group t by t.Colour;&lt;br /&gt;            List&amp;lt;thing&amp;gt; listOfThingsFound = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;thing&amp;gt;();&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (var thingGroup &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; thingQuery2)&lt;br /&gt;            {&lt;br /&gt;                Console.WriteLine(thingGroup.Key);&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (thingGroup.Count() == 1)&lt;br /&gt;                {&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (thing thing &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; thingGroup) &lt;span style="color: #008000"&gt;// there is only going to be 1&lt;/span&gt;&lt;br /&gt;                        listOfThingsFound.Add(thing);&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; listOfThingsFound;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; List&amp;lt;thing&amp;gt; SeeIfAnyInListAreUniqueByPosition(List&amp;lt;thing&amp;gt; listOfThings)&lt;br /&gt;        {&lt;br /&gt;            IEnumerable&amp;lt;IGrouping&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;, thing&amp;gt;&amp;gt; thingQuery2 = from t &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; listOfThings&lt;br /&gt;                                                                group t by t.Position;&lt;br /&gt;            List&amp;lt;thing&amp;gt; listOfThingsFound = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;thing&amp;gt;();&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (var thingGroup &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; thingQuery2)&lt;br /&gt;            {&lt;br /&gt;                Console.WriteLine(thingGroup.Key);&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (thingGroup.Count() == 1)&lt;br /&gt;                {&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (thing thing &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; thingGroup) &lt;span style="color: #008000"&gt;// there is only going to be 1&lt;/span&gt;&lt;br /&gt;                        listOfThingsFound.Add(thing);&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; listOfThingsFound;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; List&amp;lt;thing&amp;gt; SeeIfAnyInListAreUniqueByHeight(List&amp;lt;thing&amp;gt; listOfThings)&lt;br /&gt;        {&lt;br /&gt;            IEnumerable&amp;lt;IGrouping&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;, thing&amp;gt;&amp;gt; thingQuery2 = from t &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; listOfThings&lt;br /&gt;                                                                group t by t.Height;&lt;br /&gt;            List&amp;lt;thing&amp;gt; listOfThingsFound = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;thing&amp;gt;();&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (var thingGroup &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; thingQuery2)&lt;br /&gt;            {&lt;br /&gt;                Console.WriteLine(thingGroup.Key);&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (thingGroup.Count() == 1)&lt;br /&gt;                {&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (thing thing &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; thingGroup) &lt;span style="color: #008000"&gt;// there is only going to be 1&lt;/span&gt;&lt;br /&gt;                        listOfThingsFound.Add(thing);&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; listOfThingsFound;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; List&amp;lt;thing&amp;gt; SeeIfAnyInListAreUniqueByColourAndPosition(List&amp;lt;thing&amp;gt; listOfThings)&lt;br /&gt;        {&lt;br /&gt;            List&amp;lt;thing&amp;gt; listOfThingsFound = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;thing&amp;gt;();&lt;br /&gt;            &lt;span style="color: #008000"&gt;// grouping by multiple columns as anonymous type&lt;/span&gt;&lt;br /&gt;            var thingQuery5 = from t &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; listOfThings.AsEnumerable()&lt;br /&gt;                              group t by &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; { colour = t.Colour, position = t.Position } into groupedTable&lt;br /&gt;                              select &lt;span style="color: #0000ff"&gt;new&lt;/span&gt;&lt;br /&gt;                              {&lt;br /&gt;                                  x = groupedTable.Key,&lt;br /&gt;                                  y = groupedTable.Count()&lt;br /&gt;                              };&lt;br /&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (var thing &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; thingQuery5)&lt;br /&gt;            {&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (thing.y == 1) &lt;span style="color: #008000"&gt;// if there is only 1 record for this colour and position&lt;/span&gt;&lt;br /&gt;                {&lt;br /&gt;                    &lt;span style="color: #008000"&gt;// want to search for the record and add it to a list to return&lt;/span&gt;&lt;br /&gt;                    thing uniqueThingByColourAndPosition = (from t &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; listOfThings&lt;br /&gt;                                                            &lt;span style="color: #0000ff"&gt;where&lt;/span&gt; (t.Colour == thing.x.colour) &amp;amp;&amp;amp; (t.Position == thing.x.position)&lt;br /&gt;                                                            select t).Single();&lt;br /&gt;                    listOfThingsFound.Add(uniqueThingByColourAndPosition);&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; listOfThingsFound;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; thing&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;string&lt;/span&gt; Name { get; set; }&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;string&lt;/span&gt; Colour { get; set; }&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;string&lt;/span&gt; Position { get; set; }&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;string&lt;/span&gt; Height { get; set; }&lt;br /&gt;    }&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;and testing code:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;[TestClass]&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; UnitTest1&lt;br /&gt;    {&lt;br /&gt;        [TestMethod]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; CheckThatNumber6IsUniqueBecauseItIsColourOrange()&lt;br /&gt;        {&lt;br /&gt;            UniqueSpike uniqueSpike = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; UniqueSpike();&lt;br /&gt;            List&amp;lt;thing&amp;gt; listOfThings = uniqueSpike.SetupTestDataAndAddToList();&lt;br /&gt;            List&amp;lt;thing&amp;gt; result = uniqueSpike.SeeIfAnyInListHaveAUniqueColour(listOfThings);&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (thing thing &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; result)&lt;br /&gt;            {&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (thing.Name == &lt;span style="color: #006080"&gt;&amp;quot;6&amp;quot;&lt;/span&gt;)&lt;br /&gt;                {&lt;br /&gt;                    thing whatExpecting = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; thing { Name = &lt;span style="color: #006080"&gt;&amp;quot;6&amp;quot;&lt;/span&gt;, Colour = &lt;span style="color: #006080"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;, Position = &lt;span style="color: #006080"&gt;&amp;quot;left&amp;quot;&lt;/span&gt;, Height = &lt;span style="color: #006080"&gt;&amp;quot;medium&amp;quot;&lt;/span&gt; };&lt;br /&gt;                    Assert.AreEqual(whatExpecting.Colour, thing.Colour);&lt;br /&gt;                    Assert.AreEqual(whatExpecting.Position, thing.Position);&lt;br /&gt;                    Assert.AreEqual(whatExpecting.Height, thing.Height);&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        [TestMethod]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; CheckThatNumber7IsUniqueBecauseItIsColourGold()&lt;br /&gt;        {&lt;br /&gt;            UniqueSpike uniqueSpike = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; UniqueSpike();&lt;br /&gt;            List&amp;lt;thing&amp;gt; listOfThings = uniqueSpike.SetupTestDataAndAddToList();&lt;br /&gt;            List&amp;lt;thing&amp;gt; result = uniqueSpike.SeeIfAnyInListHaveAUniqueColour(listOfThings);&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (thing thing &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; result)&lt;br /&gt;            {&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (thing.Name == &lt;span style="color: #006080"&gt;&amp;quot;7&amp;quot;&lt;/span&gt;)&lt;br /&gt;                {&lt;br /&gt;                    thing whatExpecting = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; thing { Name = &lt;span style="color: #006080"&gt;&amp;quot;7&amp;quot;&lt;/span&gt;, Colour = &lt;span style="color: #006080"&gt;&amp;quot;gold&amp;quot;&lt;/span&gt;, Position = &lt;span style="color: #006080"&gt;&amp;quot;left&amp;quot;&lt;/span&gt;, Height = &lt;span style="color: #006080"&gt;&amp;quot;medium&amp;quot;&lt;/span&gt; };&lt;br /&gt;                    Assert.AreEqual(whatExpecting.Colour, thing.Colour);&lt;br /&gt;                    Assert.AreEqual(whatExpecting.Position, thing.Position);&lt;br /&gt;                    Assert.AreEqual(whatExpecting.Height, thing.Height);&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        [TestMethod]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; CheckThatNumber4IsUniqueBecauseItIsPositionRight()&lt;br /&gt;        {&lt;br /&gt;            UniqueSpike uniqueSpike = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; UniqueSpike();&lt;br /&gt;            List&amp;lt;thing&amp;gt; listOfThings = uniqueSpike.SetupTestDataAndAddToList();&lt;br /&gt;&lt;br /&gt;            List&amp;lt;thing&amp;gt; result = uniqueSpike.SeeIfAnyInListAreUniqueByPosition(listOfThings);&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (thing thing &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; result)&lt;br /&gt;            {&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (thing.Name == &lt;span style="color: #006080"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;)&lt;br /&gt;                {&lt;br /&gt;                    thing whatExpecting = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; thing { Name = &lt;span style="color: #006080"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;, Colour = &lt;span style="color: #006080"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;, Position = &lt;span style="color: #006080"&gt;&amp;quot;right&amp;quot;&lt;/span&gt;, Height = &lt;span style="color: #006080"&gt;&amp;quot;medium&amp;quot;&lt;/span&gt; };&lt;br /&gt;                    Assert.AreEqual(whatExpecting.Colour, thing.Colour);&lt;br /&gt;                    Assert.AreEqual(whatExpecting.Position, thing.Position);&lt;br /&gt;                    Assert.AreEqual(whatExpecting.Height, thing.Height);&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        [TestMethod]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; CheckThatNoneAreReturnedForUniqueHeight()&lt;br /&gt;        {&lt;br /&gt;            UniqueSpike uniqueSpike = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; UniqueSpike();&lt;br /&gt;            List&amp;lt;thing&amp;gt; listOfThings = uniqueSpike.SetupTestDataAndAddToList();&lt;br /&gt;            List&amp;lt;thing&amp;gt; result = uniqueSpike.SeeIfAnyInListAreUniqueByHeight(listOfThings);&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (thing thing &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; result)&lt;br /&gt;            {&lt;br /&gt;                Assert.IsFalse(1 == 1); &lt;span style="color: #008000"&gt;// just throwing an error if it gets here&lt;/span&gt;&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        [TestMethod]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; CheckThat_2_3_4_5_6_7_RecordsAreReturnedForColourAndPositionUniqueness() &lt;span style="color: #008000"&gt;// only doing number 2 so far here&lt;/span&gt;&lt;br /&gt;        {&lt;br /&gt;            UniqueSpike uniqueSpike = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; UniqueSpike();&lt;br /&gt;            List&amp;lt;thing&amp;gt; listOfThings = uniqueSpike.SetupTestDataAndAddToList();&lt;br /&gt;            List&amp;lt;thing&amp;gt; result = uniqueSpike.SeeIfAnyInListAreUniqueByColourAndPosition(listOfThings);&lt;br /&gt;            thing thing2 = result.Find(&lt;span style="color: #0000ff"&gt;delegate&lt;/span&gt;(thing thing)&lt;br /&gt;            {&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (thing.Name == &lt;span style="color: #006080"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;)&lt;br /&gt;                {&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff"&gt;true&lt;/span&gt;;&lt;br /&gt;                }&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff"&gt;false&lt;/span&gt;;&lt;br /&gt;            });&lt;br /&gt;            Assert.IsNotNull(thing2);&lt;br /&gt;&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;</Content>
      <Created>2010-11-06T19:00:48.383375-04:00</Created>
      <Modified>2010-11-06T19:00:48.383375-04:00</Modified>
      <EntryId>951872f5-a2ae-47e2-b1d5-89a8a74679fd</EntryId>
      <Description />
      <Title>Finding Uniqueness in Data</Title>
      <Categories>Linq;Project</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>