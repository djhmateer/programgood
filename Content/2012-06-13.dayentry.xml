<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-06-12T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:3e9e90ee-6b90-4622-ac90-80197c37c4fe" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E24Tests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReturnAllPermutations_Given012_ReturnAll6Permutations()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;IList&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E24&lt;/span&gt;.ReturnAllPermutations(6, &lt;span style="color:#a31515"&gt;&amp;quot;012&amp;quot;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.IsNotEmpty(result);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(6, result.Count);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReturnAllPermutations_Given0123_ReturnAll6Permutations()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;IList&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E24&lt;/span&gt;.ReturnAllPermutations(24, &lt;span style="color:#a31515"&gt;&amp;quot;0123&amp;quot;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.IsNotEmpty(result);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(24, result.Count);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#008000"&gt;//012   021   102   120   201   210&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReturnPermutation_Given012_Return120()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E24&lt;/span&gt;.ReturnPermutation(4, &lt;span style="color:#a31515"&gt;&amp;quot;012&amp;quot;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(120, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReturnPermutation_Given01234_Ret1342()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E24&lt;/span&gt;.ReturnPermutation(4, &lt;span style="color:#a31515"&gt;&amp;quot;01234&amp;quot;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(1342, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//[Test]&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//public void ReturnPermutation_Given01234_Ret13424()&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    //                                        2300000000 takes 10 mins?&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    var result = E24.ReturnPermutation(1000000, &amp;quot;0123456789&amp;quot;);&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    Assert.AreEqual(2783915460, result);&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E24&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; ReturnPermutation(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; permutationToReturn, &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; digitsAsString)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;IList&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt; listOfAllPermutations = ReturnAllPermutations(permutationToReturn, digitsAsString);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = listOfAllPermutations[permutationToReturn - 1];&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IList&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt; ReturnAllPermutations(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; permutationToReturn, &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; digits)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; permutations = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt;();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberOfDigits = (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;)digits.Count();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt;= numberOfDigits; i++)&lt;br&gt;             {&lt;br&gt;                 x += &lt;span style="color:#a31515"&gt;&amp;quot;9&amp;quot;&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; maxValue = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;long&lt;/span&gt;.TryParse(x, &lt;span style="color:#0000ff"&gt;out&lt;/span&gt; maxValue);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; startNumber = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;long&lt;/span&gt;.TryParse(digits, &lt;span style="color:#0000ff"&gt;out&lt;/span&gt; startNumber);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; i = startNumber; i &amp;lt; maxValue; i++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#008000"&gt;//prepend with 0&amp;#39;s if not max length&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberOfDigitsFori = (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;)i.ToString().Count();&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberOfZerosToAdd = numberOfDigits - numberOfDigitsFori;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; iAsString = i.ToString();&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; j = 1; j &amp;lt;= numberOfZerosToAdd; j++)&lt;br&gt;                 {&lt;br&gt;                     iAsString = &lt;span style="color:#a31515"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; + iAsString;&lt;br&gt;                 }&lt;br&gt; &lt;br&gt;                 &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; containsAllDigits = &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;                 &lt;span style="color:#008000"&gt;//if i contains each digit then add to list&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;char&lt;/span&gt; digit &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; digits)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; digitAsString = digit.ToString();&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!iAsString.Contains(digitAsString))&lt;br&gt;                     {&lt;br&gt;                         containsAllDigits = &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;break&lt;/span&gt;;&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (containsAllDigits)&lt;br&gt;                 {&lt;br&gt;                     permutations.Add(i);&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; z = permutations.Count;&lt;br&gt;                     &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(z);&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (z == permutationToReturn)&lt;br&gt;                     {&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; permutations;&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt;     &lt;span style="color:#008000"&gt;/*&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;* A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. &lt;/span&gt;&lt;br&gt;   &lt;span style="color:#008000"&gt;If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. &lt;/span&gt;&lt;br&gt;   &lt;span style="color:#008000"&gt;The lexicographic permutations of 0, 1 and 2 are:&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;012   021   102   120   201   210&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?&lt;/span&gt;&lt;br&gt;   &lt;span style="color:#008000"&gt;*/&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt;  &lt;p&gt;Took around 40mins to get answer in release mode with a Console app project.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c2508364-47d6-4c0f-ac77-f7f01fb57ddc" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] args)&lt;br&gt;  {&lt;br&gt;      &lt;span style="color:#2b91af"&gt;Stopwatch&lt;/span&gt; stopwatch = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Stopwatch&lt;/span&gt;();&lt;br&gt;      stopwatch.Start();&lt;br&gt; &lt;br&gt;      &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E24&lt;/span&gt;.ReturnPermutation(1000000, &lt;span style="color:#a31515"&gt;&amp;quot;0123456789&amp;quot;&lt;/span&gt;);&lt;br&gt;      &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;result is {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, result.ToString());&lt;br&gt;      stopwatch.Stop();&lt;br&gt;      &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;time taken: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, stopwatch.Elapsed);&lt;br&gt;  }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;First try of doing it and got correct answer. Good TDD.&lt;/p&gt;</Content>
      <Created>2012-06-13T16:30:47.2781131-04:00</Created>
      <Modified>2012-06-13T16:31:14.8294999-04:00</Modified>
      <EntryId>0a93bad7-539c-428e-b6f2-0eb13cf2fdbc</EntryId>
      <Description />
      <Title>Euler 24</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8d63349e-7e8d-406e-84b9-9fe568012bb1" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;    [&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E25Tests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FirstFibSeqToContain_Given3_Return12thTerm()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E25&lt;/span&gt;.FirstFibSeqToContainDigits(3);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(12, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FirstFibSeqToContain_Given4_ReturnTerm()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E25&lt;/span&gt;.FirstFibSeqToContainDigits(4);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(17, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FirstFibSeqToContain_Given5_ReturnTerm()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E25&lt;/span&gt;.FirstFibSeqToContainDigits(5);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(21, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FirstFibSeqToContain_Given1000_ReturnTerm()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E25&lt;/span&gt;.FirstFibSeqToContainDigits(1000);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(4782, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E25&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; FirstFibSeqToContainDigits(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberOfDigitsRequired)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberInSequence = 2;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; oldFib = 1;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; newFib = 1;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; currentFib = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberOfDigitsInCurrentFib = currentFib.ToString().Count();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;while&lt;/span&gt; (numberOfDigitsInCurrentFib != numberOfDigitsRequired)&lt;br&gt;             {&lt;br&gt;                 currentFib = oldFib + newFib;&lt;br&gt;                 oldFib = newFib;&lt;br&gt;                 newFib = currentFib;&lt;br&gt;                 numberInSequence++;&lt;br&gt;                 numberOfDigitsInCurrentFib = currentFib.ToString().Count();&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; numberInSequence;&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt;     &lt;span style="color:#008000"&gt;/*&lt;/span&gt;&lt;br&gt;      &lt;span style="color:#008000"&gt;* The Fibonacci sequence is defined by the recurrence relation:&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;Fn = Fn1 + Fn2, where F1 = 1 and F2 = 1.&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;Hence the first 12 terms will be:&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;F1 = 1&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;F2 = 1 oldFib&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;F3 = 2 newFib          oldFib&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;F4 = 3 currentFib      newFib&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;F5 = 5                 currentFib&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;F6 = 8&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;F7 = 13&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;F8 = 21&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;F9 = 34&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;F10 = 55&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;F11 = 89&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;F12 = 144&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;The 12th term, F12, is the first term to contain three digits.&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;What is the first term in the Fibonacci sequence to contain 1000 digits?&lt;/span&gt;&lt;br&gt;      &lt;span style="color:#008000"&gt;*/&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;using BigInteger in C#&lt;/p&gt;</Content>
      <Created>2012-06-13T17:40:14.638505-04:00</Created>
      <Modified>2012-06-13T17:40:14.638505-04:00</Modified>
      <EntryId>eba99b92-34df-40ca-a675-004d61270963</EntryId>
      <Description />
      <Title>Euler 25–Fibonacci</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>