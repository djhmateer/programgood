<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2010-12-28T19:00:00-05:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;The sequence of triangle numbers is generated by adding the natural numbers. So the 7&lt;sup&gt;th&lt;/sup&gt; triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:&lt;/p&gt;  &lt;p&gt;1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...&lt;/p&gt;  &lt;p&gt;Finding ‘Triangle numbers’ can be done by either:&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;[TestMethod]&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; Get6thTriangenumber()&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = GetTriangleNumber(6);&lt;br /&gt;    Assert.AreEqual(21, result);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;[TestMethod]&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; Get7thTriangenumber()&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = GetTriangleNumber(7);&lt;br /&gt;    Assert.AreEqual(28, result);&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; GetTriangleNumber(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; nThNumberInTriangleSequence)&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; sumOfNumbers = 0;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt;= nThNumberInTriangleSequence; i++)&lt;br /&gt;        sumOfNumbers += i;&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; sumOfNumbers;&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;or we could use the summation formula (faster).. this sums up n numbers in a sequence eg 1,2,3,4,5,6 (see first test above)&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; GetTriangleNumber(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; nThNumberInTriangleSequence)&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; sumOfNumbers = nThNumberInTriangleSequence * (nThNumberInTriangleSequence + 1) / 2;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; sumOfNumbers+1;&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;h3&gt;Factorising – What integers will it divide by with no remainder?&lt;/h3&gt;

&lt;p&gt;Let us list the factors of the first seven triangle numbers: &lt;/p&gt;

&lt;blockquote&gt;&lt;b&gt; 1&lt;/b&gt;: 1

  &lt;br /&gt;&lt;b&gt; 3&lt;/b&gt;: 1,3

  &lt;br /&gt;&lt;b&gt; 6&lt;/b&gt;: 1,2,3,6

  &lt;br /&gt;&lt;b&gt;10&lt;/b&gt;: 1,2,5,10

  &lt;br /&gt;&lt;b&gt;15&lt;/b&gt;: 1,3,5,15

  &lt;br /&gt;&lt;b&gt;21&lt;/b&gt;: 1,3,7,21

  &lt;br /&gt;&lt;b&gt;28&lt;/b&gt;: 1,2,4,7,14,28&lt;/blockquote&gt;

&lt;p&gt;We can see that 28 is the first triangle number to have over five divisors. &lt;/p&gt;

&lt;p&gt;What is the value of the first triangle number to have over five hundred divisors?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a title="http://www.mathsisfun.com/numbers/factors-all-tool.html " href="http://www.mathsisfun.com/numbers/factors-all-tool.html "&gt;http://www.mathsisfun.com/numbers/factors-all-tool.html &lt;/a&gt;&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;[TestMethod]&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; GetFactorCount36() &lt;span style="color: #008000"&gt;// an exact square&lt;/span&gt;&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = GetFactorCount(36);&lt;br /&gt;    Assert.AreEqual(9, result); &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;[TestMethod]&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; GetFactorCount45()&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = GetFactorCount(45);&lt;br /&gt;    Assert.AreEqual(6, result);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;[TestMethod]&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; GetFactorCount55()&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = GetFactorCount(55);&lt;br /&gt;    Assert.AreEqual(4, result);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;[TestMethod]&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; GetFactorCount30() &lt;span style="color: #008000"&gt;// this isn't triangular&lt;/span&gt;&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = GetFactorCount(30);&lt;br /&gt;    Assert.AreEqual(8, result);&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;h5&gt;Really Simple Factorisation to Get How Many Factors&lt;/h5&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; GetFactorCount(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; numberToCheck)&lt;br /&gt;{&lt;br /&gt;&lt;span style="color: #008000"&gt;// we know 1 is a factor and the numberToCheck&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; factorCount = 2;&lt;br /&gt;&lt;span style="color: #008000"&gt;// start from 2 as we know 1 is a factor, and less than as numberToCheck is a factor&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 2; i &amp;lt; numberToCheck; i++)&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (numberToCheck % i == 0)&lt;br /&gt;        factorCount++;&lt;br /&gt;}&lt;br /&gt;&lt;span style="color: #0000ff"&gt;return&lt;/span&gt; factorCount;&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;div id="codeSnippetWrapper"&gt;However this isn’t fast enough.&lt;/div&gt;

&lt;h5&gt;Factorisation using Square Root&lt;/h5&gt;

&lt;p&gt;find square root of the number eg for 30 it is 5.477.&amp;#160; Then find all factors below that sqrt, then double.&amp;#160; if number is an exact square then add one. &lt;/p&gt;

&lt;p&gt;eg 30 &lt;/p&gt;

&lt;p&gt;1*30 = 30
  &lt;br /&gt;2*15 = 30

  &lt;br /&gt;3*10 = 30

  &lt;br /&gt;5*6 = 30

  &lt;br /&gt;sqrt of 30 = 5.477

  &lt;br /&gt;6*5 = 30

  &lt;br /&gt;10*3 = 30

  &lt;br /&gt;15*2 = 30

  &lt;br /&gt;30*1 = 30&lt;/p&gt;

&lt;div&gt;&amp;#160;&lt;/div&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; GetFactorCount(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; numberToCheck)&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; factorCount = 0;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; sqrt = (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;)Math.Ceiling(Math.Sqrt(numberToCheck));&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #008000"&gt;// Start from 1 as we want our method to also work when numberToCheck is 0 or 1.&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; sqrt; i++)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (numberToCheck % i == 0)&lt;br /&gt;            factorCount += 2; &lt;span style="color: #008000"&gt;//  We found a pair of factors.&lt;/span&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #008000"&gt;// Check if our number is an exact square.&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (sqrt * sqrt == numberToCheck)&lt;br /&gt;        factorCount++;&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; factorCount;&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;div&gt;&amp;#160;&lt;/div&gt;

&lt;div&gt;
  &lt;br /&gt;&lt;/div&gt;</Content>
      <Created>2010-12-28T19:55:05.3198377-05:00</Created>
      <Modified>2010-12-28T19:55:05.3198377-05:00</Modified>
      <EntryId>b2b08a8c-a745-455b-9364-44ff9fa7cfad</EntryId>
      <Description />
      <Title>Euler 12 – Summation Forumula and Factors</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>