<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-06-04T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b5ba0e70-128b-42e3-9244-5e9232310e33" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Euler16bTests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Solve_Given15_Return26()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler16b&lt;/span&gt;.SolveSumOfTheDigits(15);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(26, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Solve_Given1000_ReturnAnswer()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler16b&lt;/span&gt;.SolveSumOfTheDigits(1000);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(1366, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Euler16b&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; SolveSumOfTheDigits(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; toThePowerOf)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; r = &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Pow(2, toThePowerOf);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; result = (&lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt;) r;&lt;br&gt;    &lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; resultAsString = result.ToString();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; sum = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; j = 0; j &amp;lt; resultAsString.Length; j++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Char&lt;/span&gt; digitAsChar = resultAsString[j];&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;String&lt;/span&gt; digitAsString = digitAsChar.ToString();&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(digitAsString);&lt;br&gt;                 sum += number;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; sum;&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-06-05T13:13:41.28675-04:00</Created>
      <Modified>2012-06-05T13:13:41.28675-04:00</Modified>
      <EntryId>20fa2f7d-8dbd-49e8-9d6c-be45f4acebe1</EntryId>
      <Description />
      <Title>Euler 16</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;recursion is a function that calls itself iteratively until it reaches a stopping point&lt;/p&gt;  &lt;p&gt;While exploring how to do Euler15 - &lt;a href="http://stackoverflow.com/questions/2200236/project-euler-15"&gt;http://stackoverflow.com/questions/2200236/project-euler-15&lt;/a&gt;&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a33e4df5-c247-41cf-985a-ea980c9bdaaf" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DoSomething()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; total = Recursive(5);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(10, total);&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; Recursive(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; value)&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; valueToReturn = 0;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (value &amp;gt;= 10)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; value;&lt;br&gt;     }&lt;br&gt;     value++;&lt;br&gt;     &lt;span style="color:#008000"&gt;//passes valueToReturn back 5 times from the output of 5 different calls to Recursive&lt;/span&gt;&lt;br&gt;     valueToReturn = Recursive(value);&lt;br&gt;     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; valueToReturn;&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;br /&gt;  &lt;p&gt;&lt;a href="http://www.dotnetperls.com/recursion"&gt;http://www.dotnetperls.com/recursion&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;and to solve something a bit more complex:&lt;/p&gt;  &lt;p&gt;Factorials – I like this example. &lt;a href="http://www.mathdotnet.com/doc/IridiumCodeSamples.ashx?HL=factorial"&gt;http://www.mathdotnet.com/doc/IridiumCodeSamples.ashx?HL=factorial&lt;/a&gt; useful to check&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b6084d4b-007c-4621-a362-05fb2acff00a" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FactorialTests()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = Factorial(4);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(24, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; counter = 0;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; Factorial(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number)&lt;br&gt;         {&lt;br&gt;             counter++;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, counter);&lt;br&gt;             &lt;span style="color:#008000"&gt;//if we&amp;#39;ve got to the place to start doing work..&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (number == 0)&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 1;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; returnedValue = Factorial(number - 1);&lt;br&gt;             counter--;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, counter);&lt;br&gt;             &lt;span style="color:#008000"&gt;//first returnedValue will be 1.. number will be 1&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//second returnedValue will be 1.. number will be 2&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//third returnedValue will be 2..number will be 3&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//fourth retrunedValue will be 6...number will be 4&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = number*returnedValue;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;and the easier to understand non factorial version:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fa02a152-7db8-499b-88c1-bfb912c55fb5" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FactorialAsLoop_Given4_Return24()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = FactorialAsLoop(4);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(24, result);&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;//loop&lt;/span&gt;&lt;br&gt; &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; FactorialAsLoop(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number)&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;//4*3*2*1&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = number-1; i &amp;gt;= 1; i--)&lt;br&gt;     {&lt;br&gt;         number = number*i;&lt;br&gt;     }&lt;br&gt;     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; number;&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-06-05T12:50:51.09925-04:00</Created>
      <Modified>2012-06-05T12:50:51.09925-04:00</Modified>
      <EntryId>57c033ce-7633-487f-8797-8b89e5a75755</EntryId>
      <Description />
      <Title>Recursion</Title>
      <Categories>c#;Recursion</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;Am trying out using git now on every project - mainly so I can easily revert if I mess things up.&amp;#160; Good practice.&lt;/p&gt;  &lt;p&gt;git init&lt;/p&gt;  &lt;p&gt;git add .&lt;/p&gt;  &lt;p&gt;git commit -m &amp;quot;first commit of Euler 15&amp;quot;&lt;/p&gt;  &lt;p&gt;git checkout -b firsttry&lt;/p&gt;  &lt;p&gt;git branch (to see branches)&lt;/p&gt;  &lt;p&gt;gitgui&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Euler-15_7C79/image_2.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Euler-15_7C79/image_thumb.png" width="277" height="140" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;R# – Move to another file with same name&lt;/p&gt;  &lt;h2&gt;Forumla&lt;/h2&gt;  &lt;p&gt;&lt;a href="http://locationcube.blogspot.co.uk/2010/12/project-eulerproblem-15.html"&gt;http://locationcube.blogspot.co.uk/2010/12/project-eulerproblem-15.html&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;The formula is n! / r! (n-r)!&lt;/p&gt;  &lt;p&gt;Where n is 40 and r is 20…&amp;#160; so 40!/(20! * 20!)&lt;/p&gt;  &lt;p&gt;Which gives us:&amp;#160;&amp;#160;&amp;#160; 137846528820 ways to get there!&lt;/p&gt;  &lt;p&gt;In fact Google’s online calculator can do this for you….&lt;/p&gt;  &lt;p&gt;Just type 40 choose 20 into Google!!&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Euler-15_7C79/image_4.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Euler-15_7C79/image_thumb_1.png" width="553" height="404" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;h2&gt;&lt;em&gt;Discrete Mathematics&lt;/em&gt; &lt;/h2&gt;  &lt;p&gt;– on a 2*2 square it takes 4 steps to reach the end. So on a 20*20 square it takes 40 steps.&lt;/p&gt;  &lt;p&gt;20 increases in x and 20 increases in y&lt;/p&gt;  &lt;p&gt;how many different ways can you choose 20 elements out of a set of 40 elements.&lt;/p&gt;  &lt;p&gt;We can use a formula to solve this. “n choose r formula”: N!/r!(n-r)&lt;/p&gt;  &lt;p&gt;40!/((20!)(40-20)!)&lt;/p&gt;  &lt;p&gt;N = number of elements (40)&lt;/p&gt;  &lt;p&gt;r = how many we want to choose&lt;/p&gt;  &lt;p&gt;137,846,528,820&lt;/p&gt;  &lt;h3&gt;Dynamic Programming&lt;/h3&gt;  &lt;p&gt;How many routes are there through a 20×20 grid? or.. total number of ways to arrive at a node?&lt;/p&gt;  &lt;p&gt;&lt;b&gt;dynamic programming&lt;/b&gt; is a method for solving complex problems by breaking them down into simpler subproblems&lt;/p&gt;  &lt;p&gt;We find the total number of ways to arrive at a node:&lt;/p&gt;  &lt;p&gt;“Sum of the count from above and to the left”&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:cd2574f5-bbac-4abf-9a13-d0e73e7f9fc1" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DynamicProgrammingTests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DynamicProgramming&lt;/span&gt; dynamicProgramming;&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;SetUp&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DoFirst()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.dynamicProgramming = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DynamicProgramming&lt;/span&gt;();&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Four_DynamicProgrammingSolver_GivesAnswerOf70()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = dynamicProgramming.Solve(4);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(70, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Five_DynamicProgrammingSolver_GivesAnswerOf252()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = dynamicProgramming.Solve(5);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(252, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Twenty_DynamicProgrammingSolver_GivesAnswerOf252()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = dynamicProgramming.Solve(20);&lt;br&gt;         &lt;span style="color:#008000"&gt;//137,846,528,820&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(137846528820, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;//using property of problem that&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;//total number of ways to arrive at a node&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;//is count from left and above&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;//so we build an array with total number of ways to arrive at a node&lt;/span&gt;&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;DynamicProgramming&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; Solve(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; sizeOfGrid)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; array = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;double&lt;/span&gt;[sizeOfGrid+2, sizeOfGrid+2];&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i, j;&lt;br&gt;         array[1, 1] = 1;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (i = 1; i &amp;lt;= sizeOfGrid+1; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (j = 1; j &amp;lt;= sizeOfGrid+1; j++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#008000"&gt;//count from left, then count from above&lt;/span&gt;&lt;br&gt;                 array[i, j] += array[i - 1, j] + array[i, j - 1];&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; result = array[sizeOfGrid+1, sizeOfGrid+1];&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;put in photo here of array with answers in it.&lt;/p&gt;  &lt;h3&gt;Brute Force – Recursive&lt;/h3&gt;  &lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8f5587bc-8ccf-4ef2-a8d1-a55b0db13040" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 500px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;SolverTests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BruteForceRecursionSolver&lt;/span&gt; bruteForceRecursionSolver;&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;SetUp&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DoThisAtStart()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.bruteForceRecursionSolver = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BruteForceRecursionSolver&lt;/span&gt;();&lt;br&gt;     }&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; TwoGivesAnswerOf6()&lt;br&gt;     {&lt;br&gt;         bruteForceRecursionSolver.gridSize = 2;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = bruteForceRecursionSolver.Progress(0, 0);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(6, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ThreeGivesAnswerOf20()&lt;br&gt;     {&lt;br&gt;         bruteForceRecursionSolver.gridSize = 3;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = bruteForceRecursionSolver.Progress(0, 0);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(20, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FourGivesAnswerOf70()&lt;br&gt;     {&lt;br&gt;         bruteForceRecursionSolver.gridSize = 4;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = bruteForceRecursionSolver.Progress(0, 0);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(70, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FiveGivesAnswerOf252()&lt;br&gt;     {&lt;br&gt;         bruteForceRecursionSolver.gridSize = 5;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = bruteForceRecursionSolver.Progress(0, 0);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(252, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; TenGivesAnswerOf184756()&lt;br&gt;     {&lt;br&gt;         bruteForceRecursionSolver.gridSize = 10;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = bruteForceRecursionSolver.Progress(0, 0);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(184756, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ElevenGivesAnswerOf705432()&lt;br&gt;     {&lt;br&gt;         bruteForceRecursionSolver.gridSize = 11;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = bruteForceRecursionSolver.Progress(0, 0);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(705432, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;//http://stackoverflow.com/questions/2200236/project-euler-15&lt;/span&gt;&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BruteForceRecursionSolver&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; gridSize;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;// top left is 0,0&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; Progress(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; y)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (x &amp;lt; gridSize)&lt;br&gt;             &lt;span style="color:#008000"&gt;//favours going right&lt;/span&gt;&lt;br&gt;             i += Progress(x + 1, y);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (y &amp;lt; gridSize)&lt;br&gt;             i += Progress(x, y + 1);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//reached bottom right&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (x == gridSize &amp;amp;&amp;amp; y == gridSize)&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 1;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; i;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt;  &lt;p&gt;This is very much brute force..&lt;/p&gt;  &lt;p&gt;This took about 1.5 hours:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7b0cb8d5-7827-4f17-baf4-6ddfa17a5f4b" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;SolveRecursion&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; Combination = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; GridSize;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CalculateCombination(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x = 0, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; y = 0)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (x &amp;lt; GridSize)&lt;br&gt;             {&lt;br&gt;                 CalculateCombination(x + 1, y);&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (y &amp;lt; GridSize)&lt;br&gt;             {&lt;br&gt;                 CalculateCombination(x, y + 1);&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (x == GridSize &amp;amp;&amp;amp; y == GridSize)&lt;br&gt;                 Combination++;&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4f1711d3-d5ff-4f9e-bdce-fa327a1986dc" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 500px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] args)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//gives correct answer: 137,846,528,820&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;starting&amp;quot;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Stopwatch&lt;/span&gt; stopWatch = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Stopwatch&lt;/span&gt;();&lt;br&gt;             stopWatch.Start();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; solveRecursion2 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;SolveRecursion&lt;/span&gt; { GridSize = 20 };&lt;br&gt;             solveRecursion2.CalculateCombination();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = solveRecursion2.Combination;&lt;br&gt;             stopWatch.Stop();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;TimeSpan&lt;/span&gt; ts = stopWatch.Elapsed;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;Result is: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;, time was {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt; seconds&amp;quot;&lt;/span&gt;, result, ts.ToString());&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;and non recursive thoughts on:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://stackoverflow.com/questions/10890516/rewrite-recursive-algorithm-more-simply-euler-15"&gt;http://stackoverflow.com/questions/10890516/rewrite-recursive-algorithm-more-simply-euler-15&lt;/a&gt;&lt;/p&gt;</Content>
      <Created>2012-06-05T12:50:27.41175-04:00</Created>
      <Modified>2012-06-05T12:50:27.41175-04:00</Modified>
      <EntryId>ae7c86f3-dfe8-48cb-9dcc-d0800b337ce0</EntryId>
      <Description />
      <Title>Euler 15–How Many Routes in a 20 by 20 Grid</Title>
      <Categories>Euler;Git;Resharper</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;This was a good business case problem, as it required good testing!&lt;/p&gt;  &lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0815a079-6c74-46a8-a1e2-86677ace1353" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Euler17Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountLetters_GivenFive_ReturnAnswerOf19Letters()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountTotalLettersInEveryNumberUpTo(5);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(19, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountLetters_GivenOneThousand_ReturnAnswer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountTotalLettersInEveryNumberUpTo(1000);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(21124, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenOne_Return3()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(1);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(3, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(2);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(3, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(3);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(5, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(4);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(4, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(5);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(4, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(6);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(3, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(7);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(5, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(8);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(5, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(9);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(4, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(10);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(3, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(11);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(6, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(12);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(6, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(13);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(8, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(14);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(8, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(15);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(7, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(16);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(7, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(17);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(9, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(18);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(8, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(19);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(8, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(20);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(6, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(3);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(5, result);&lt;br&gt;     }&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenTwentyOne_Return9()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(21);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(9, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenTwentyThree_Return11()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(23);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(11, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenTwentyFour_Return10()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(24);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(10, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenThirty_Return6()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(30);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(6, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenEighty_Return6()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(80);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(6, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenNinety_Return6()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(90);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(6, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenThirtyThree_Return11()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(33);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(11, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenOneHundred_Return10()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(100);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(10, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenOneHundredAndTwo_Return16()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(102);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(16, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenOneHundredAndEleven_Return19()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(111);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(19, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenOneHundredAndThirteen_Return21()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(113);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(21, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenOneHundredAndFifteen_Return20()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(115);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(20, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenOneHundredAndTwenty_Return19()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(120);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(19, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenOneHundredAndTwentyFour_Return23()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(124);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(23, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenOneHundredAndFiftyFive_Return22()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(155);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(22, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenThreeHundredAndFourtyTwo_Return23()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(342);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(23, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenThreeHundredAndFiftyFive_Return24()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(355);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(24, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenFivehundred_Return11()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(500);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(11, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenNineHundredAndNinetySeven_Return25()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//NineHundredAndNinety&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(990);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(20, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(991);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(23, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(992);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(23, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(993);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(25, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(994);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(24, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(995);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(24, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(996);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(23, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(997);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(25, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenNineHundredAndNinetyEight_Return25()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(998);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(25, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenNineHundredAndNinetyNine_Return24()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(999);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(24, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish_GivenOneThousand_Return11()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;.CountOfLettersInNumberWrittenInEnglish(1000);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(11, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Euler17&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; CountTotalLettersInEveryNumberUpTo(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; maxNumber)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; count = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt;= maxNumber; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = CountOfLettersInNumberWrittenInEnglish(i);&lt;br&gt;             count += result;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;i: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt; count of letters: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, i, result);&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; count;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; CountOfLettersInNumberWrittenInEnglish(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i &amp;lt;= 20)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; CountOfLettersBetweenOneAndTwenty(i);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i &amp;gt; 20 &amp;amp;&amp;amp; i &amp;lt; 100)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//eg 20,30,40&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; baseTen = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(i.ToString().Substring(0, 1) + &lt;span style="color:#a31515"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;);&lt;br&gt;             i -= baseTen;&lt;br&gt;             result = CountOfLettersBetweenOneAndTwenty(i);&lt;br&gt;             result += CountOfLettersBaseForTwentyToNinety(baseTen);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; baseTenx = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(i.ToString().Substring(1, 1));&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; baseZerox = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(i.ToString().Substring(2, 1));&lt;br&gt;         &lt;span style="color:#008000"&gt;//if 100,200,300 etc&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i != 1000)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (baseTenx == 0 &amp;amp;&amp;amp; baseZerox == 0)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#008000"&gt;//get first number&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; a = i.ToString().Substring(0, 1);&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; baseNumber = &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;.Parse(a);&lt;br&gt; &lt;br&gt;                 result = CountOfLettersBetweenOneAndTwenty(baseNumber);&lt;br&gt;                 &lt;span style="color:#008000"&gt;//eg OneHundred&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result + 7;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i &amp;gt; 100 &amp;amp;&amp;amp; i &amp;lt; 1000)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//eg 234 would be 2 as we know it will be less than 1000&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; firstDigit = i/100;&lt;br&gt;             &lt;span style="color:#008000"&gt;//eg 234 would be 3&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; secondDigit = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(i.ToString().Substring(1, 1));&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//eg 200&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; baseHundred = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(i.ToString().Substring(0,1) + &lt;span style="color:#a31515"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; + &lt;span style="color:#a31515"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//eg 30&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; baseTen = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(i.ToString().Substring(1,1) + &lt;span style="color:#a31515"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (baseTen &amp;lt; 20)&lt;br&gt;             {&lt;br&gt;                 result = CountOfLettersBetweenOneAndTwenty(i - baseHundred);&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;else&lt;/span&gt;&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#008000"&gt;//342 would be 342-300.. 42-40 = 2&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; stage = (i - baseHundred) - baseTen;&lt;br&gt;                 &lt;span style="color:#008000"&gt;//eg for 124, we pass in 4&lt;/span&gt;&lt;br&gt;                 result = CountOfLettersBetweenOneAndTwenty(stage);&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; stageb = CountOfLettersBaseForTwentyToNinety(baseTen);&lt;br&gt;                 result += stageb;&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//One HundredAnd&lt;/span&gt;&lt;br&gt;             result += CountOfLettersBetweenOneAndTwenty(firstDigit) + 10;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i == 1000)&lt;br&gt;         {&lt;br&gt;             result = 11;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; CountOfLettersBaseForTwentyToNinety(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; baseNumber)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;switch&lt;/span&gt; (baseNumber)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 20:&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 6;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 30:&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 6;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 40:&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 5;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 50:&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 5;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 60:&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 5;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 70:&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 7;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 80:&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 6;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 90:&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 6;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 0;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; CountOfLettersBetweenOneAndTwenty(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;switch&lt;/span&gt; (i)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 1:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 3;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 2:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 3;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 3:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 5;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 4:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 4;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 5:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 4;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 6:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 3;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 7:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 5;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 8:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 5;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 9:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 4;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 10:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 3;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 11:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 6;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 12:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 6;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 13:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 8;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 14:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 8;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 15:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 7;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 16:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 7;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 17:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 9;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 18:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 8;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 19:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 8;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;case&lt;/span&gt; 20:&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfLettersInNumberWrittenInEnglish = 6;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfLettersInNumberWrittenInEnglish;&lt;br&gt;                 }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 0;&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt;  &lt;p&gt;A cleaner way to implement would be to build up the string in English, then do a word count.. this would mean it would be far easier to test as could dump out to the screen.&lt;/p&gt;  &lt;p&gt;This was a very TDD way of implementing it.&lt;/p&gt;</Content>
      <Created>2012-06-05T16:19:32.568-04:00</Created>
      <Modified>2012-06-05T16:19:32.568-04:00</Modified>
      <EntryId>a8ebfe49-7085-40cc-84f7-5faab6be5ee7</EntryId>
      <Description />
      <Title>Euler 17</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>