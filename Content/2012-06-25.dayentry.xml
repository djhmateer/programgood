<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-06-24T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;Tried this problem and found my 1st try became too complex, so backed out (with extensive working tests) and tried these approaches:&lt;/p&gt;  &lt;p&gt;I liked this solution for simplicity: &lt;a href="http://locationcube.blogspot.com/2010/12/euler-problem-31.html"&gt;http://locationcube.blogspot.com/2010/12/euler-problem-31.html&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Then the dynamic programming solution from &lt;a href="http://www.mathblog.dk/project-euler-31-combinations-english-currency-denominations/"&gt;http://www.mathblog.dk/project-euler-31-combinations-english-currency-denominations/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Dynamic programming – breaking down a problem into smaller sub-problems.&lt;/p&gt;  &lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f0296a77-8699-4739-940c-b684143441d2" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E31Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HowManyWaysToMake_Given3Pence_Return2DifferentWays()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E31&lt;/span&gt;.HowManyWaysToMake(3);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(2, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;/* 1111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;211&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;22 */&lt;/span&gt;&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HowManyWaysToMake_Given4Pence_Return3DifferentWays()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E31&lt;/span&gt;.HowManyWaysToMake(4);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(3, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;/* 11111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;2111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;221&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;5 */&lt;/span&gt;&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HowManyWaysToMake_Given5Pence_Return4DifferentWays()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E31&lt;/span&gt;.HowManyWaysToMake(5);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(4, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;/* 111111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;21111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;2211&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;222&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;51 */&lt;/span&gt;&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HowManyWaysToMake_Given6Pence_Return5DifferentWays()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E31&lt;/span&gt;.HowManyWaysToMake(6);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(5, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;/* 1111111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;211111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;22111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;2221&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;511&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;52 */&lt;/span&gt;&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HowManyWaysToMake_Given7Pence_Return6DifferentWays()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E31&lt;/span&gt;.HowManyWaysToMake(7);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(6, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;/* 11111111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;2111111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;221111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;22211&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;2222&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;5111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;521&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;*/&lt;/span&gt;&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HowManyWaysToMake_Given8Pence_Return6DifferentWays()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E31&lt;/span&gt;.HowManyWaysToMake(8);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(7, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;/* 111111111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;21111111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;2211111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;222111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;22221&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;51111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;5211&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;522&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;*/&lt;/span&gt;&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HowManyWaysToMake_Given9Pence_Return6DifferentWays()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E31&lt;/span&gt;.HowManyWaysToMake(9);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(8, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;/* 1111111111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;211111111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;22111111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;2221111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;222211&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;22222&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;511111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;52111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;5221&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;55&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;10&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;*/&lt;/span&gt;&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HowManyWaysToMake_Given10Pence_Return6DifferentWays()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E31&lt;/span&gt;.HowManyWaysToMake(10);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(11, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;/* 11111111111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;2111111111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;221111111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;22211111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;2222111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;222221&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;5111111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;521111&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;52211&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;5222&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;551&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;10 1&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;*/&lt;/span&gt;&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HowManyWaysToMake_Given11Pence_Return12DifferentWays()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E31&lt;/span&gt;.HowManyWaysToMake(11);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(12, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HowManyWaysToMake_Given1Pence_ReturnAnswer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E31&lt;/span&gt;.HowManyWaysToMake(1);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(1, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HowManyWaysToMake_Given3Pence_ReturnAnswer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E31&lt;/span&gt;.HowManyWaysToMake(3);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(2, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HowManyWaysToMake_Given4Pence_ReturnAnswer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E31&lt;/span&gt;.HowManyWaysToMake(4);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(3, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HowManyWaysToMake_Given200Pence_ReturnAnswer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E31&lt;/span&gt;.HowManyWaysToMake(200);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(73682, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E31&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; HowManyWaysToMake(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; penceTarget)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[] array = { 1, 2, 5, 10, 20, 50, 100, 200 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[] ways = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[penceTarget + 1];&lt;br&gt;         ways[0] = 1;&lt;br&gt;         &lt;span style="color:#008000"&gt;//building up all solutions in the array&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; coinValue = 0; coinValue &amp;lt; array.Length; coinValue++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//start with coinValue 1 pence which will give us 200 ways&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//ways[1] will always be 1 as only 1pence&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//ways[2] will be 2... as 11 and 2pence&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//ways[3] will be 2... 111,21&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//ways[4] will be 3 ... 1111,211,22&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; j = array[coinValue]; j &amp;lt;= penceTarget; j++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#008000"&gt;//for higher values, uses lower values in array to add&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#008000"&gt;//see maths logic in article&lt;/span&gt;&lt;br&gt;                 ways[j] += ways[j - array[coinValue]];&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; x = 1;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; ways[penceTarget];&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; HowManyWaysToMakeX(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; pence)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; total = 0; &lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; p1 = 0; p1 &amp;lt; 201; p1++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; p2 = 0; p2 &amp;lt; 201; p2 += 2)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; p5 = 0; p5 &amp;lt; 201; p5 += 5)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; p10 = 0; p10 &amp;lt; 201; p10 += 10)&lt;br&gt;                     {&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; p20 = 0; p20 &amp;lt; 201; p20 += 20)&lt;br&gt;                         {&lt;br&gt;                             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; p50 = 0; p50 &amp;lt; 201; p50 += 50)&lt;br&gt;                             {&lt;br&gt;                                 &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; p100 = 0; p100 &amp;lt; 201; p100 += 100)&lt;br&gt;                                 {&lt;br&gt;                                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (p1 + +p2 + p5 + p10 + p20 + p50 + p100 == pence)&lt;br&gt;                                     {&lt;br&gt;                                         total++;&lt;br&gt;                                     }&lt;br&gt;                                 }&lt;br&gt;                             }&lt;br&gt;                         }&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (pence == 200)&lt;br&gt;         {&lt;br&gt;             total++;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; total;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt;  &lt;p&gt;A good example here of solutions with a simple to understand brute force method, and a more logical way that needs greater explanation.&lt;/p&gt;</Content>
      <Created>2012-06-25T19:20:23.0059863-04:00</Created>
      <Modified>2012-06-26T11:28:14.5315733-04:00</Modified>
      <EntryId>d3e727df-b329-4946-8ff6-377b5c79ad03</EntryId>
      <Description />
      <Title>Euler 31–British Money and Dynamic Programming</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;An interesting problem.&amp;#160; My solution turned out not to work, so turned to this solution:&amp;#160; &lt;a href="http://locationcube.blogspot.com/2010/12/euler-problem-30.html"&gt;http://locationcube.blogspot.com/2010/12/euler-problem-30.html&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I like the way of getting digits.&amp;#160; &lt;/p&gt;  &lt;p&gt;The Math.Pow method takes doubles as parameters which lead to this question on rounding errors:&amp;#160; &lt;a href="http://stackoverflow.com/questions/11196700/math-pow-taking-an-integer-value"&gt;http://stackoverflow.com/questions/11196700/math-pow-taking-an-integer-value&lt;/a&gt;&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:728bff85-4a53-45ed-94f4-adb391170721" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E30Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SumOfNumbersOfPowersOfDigits_Given4_Return19316()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E30&lt;/span&gt;.SumOfNumbersOfPowersOfDigits(4);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(19316, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SumOfNumbersOfPowersOfDigits_Given5_ReturnAnswer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E30&lt;/span&gt;.SumOfNumbersOfPowersOfDigits(5);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(443839, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E30&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; SumOfNumbersOfPowersOfDigits(&lt;span style="color:#0000ff"&gt;uint&lt;/span&gt; power)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; overallSum = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 2; i &amp;lt;= 400000; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; number = i.ToString();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; sum = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; j = 0; j &amp;lt; number.Length; j++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#008000"&gt;//get each number in main loop&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; digit = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(number.Substring(j, 1));&lt;br&gt;                 &lt;span style="color:#008000"&gt;//Math.Pow takes a double...doing an implicit converstion to double&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#008000"&gt;//sum += Convert.ToInt32(Math.Pow(digit, power)); &lt;/span&gt;&lt;br&gt;                 sum += IntPow(digit, power);&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (sum == i)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0:N0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;,i);&lt;br&gt;                 overallSum += sum;&lt;br&gt;             }&lt;br&gt; &lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; overallSum;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; IntPow(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number, &lt;span style="color:#0000ff"&gt;uint&lt;/span&gt; power)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = 1;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; power; i++)&lt;br&gt;         {&lt;br&gt;             result *= number;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//public static int IntPow(int x, uint pow)&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    int ret = 1;&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    while (pow != 0)&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    {&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//        //unary operator.. logical AND&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//        if ((pow &amp;amp; 1) == 1)&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//            ret *= x;&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//        x *= x;&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//        pow &amp;gt;&amp;gt;= 1;&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    }&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    return ret;&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Euler30Powers_BB3C/image_2.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Euler30Powers_BB3C/image_thumb.png" width="406" height="265" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;and put on Arithmetic Overflow checking on.&lt;/p&gt;</Content>
      <Created>2012-06-25T17:14:39.9928455-04:00</Created>
      <Modified>2012-06-25T17:16:55.1095104-04:00</Modified>
      <EntryId>d245bb26-31f6-42d7-b3e4-9146953c038c</EntryId>
      <Description />
      <Title>Euler30–Powers</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;TDD and linq:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8c7c91ea-1216-41ed-97b7-fb126c98aa9b" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E29Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DistinctTerms_GivenA2AndB5_Answer15()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E29&lt;/span&gt;.DistinctTerms(2,5);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(15, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DistinctTerms_GivenA2AndB100_Answer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E29&lt;/span&gt;.DistinctTerms(2, 100);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(9183, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E29&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; DistinctTerms(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; b)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; list = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt;&amp;gt;();&lt;br&gt;         &lt;span style="color:#008000"&gt;//rows&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = a; i &amp;lt;= b; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//elements&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; k = a; k &amp;lt;= b; k++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; number = (&lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt;)&lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Pow(i, k);&lt;br&gt;                 list.Add(number);&lt;br&gt;                 &lt;span style="color:#008000"&gt;//Console.WriteLine(&amp;quot;row {0} element {1} number {2}&amp;quot;, i,k, number);&lt;/span&gt;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberOfDistinctTerms = list.Distinct().Count();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; numberOfDistinctTerms;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-06-25T12:29:24.4685559-04:00</Created>
      <Modified>2012-06-25T12:29:24.4685559-04:00</Modified>
      <EntryId>0e8c4f40-c27c-4050-a6c3-7c1850c4e002</EntryId>
      <Description />
      <Title>Euler 29–Equations</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;TDDing again and got the right answer first time.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:df458b2b-7488-4873-9a4a-e36edea45879" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E28Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CreateSequence_GivenSpiralSize_ReturnArrayOfMoves()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E28&lt;/span&gt;.CreateSequence(3);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] array = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] { &lt;span style="color:#a31515"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;,&lt;span style="color:#a31515"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;,&lt;span style="color:#a31515"&gt;&amp;quot;l&amp;quot;&lt;/span&gt;,&lt;span style="color:#a31515"&gt;&amp;quot;l&amp;quot;&lt;/span&gt;,&lt;span style="color:#a31515"&gt;&amp;quot;u&amp;quot;&lt;/span&gt;,&lt;span style="color:#a31515"&gt;&amp;quot;u&amp;quot;&lt;/span&gt;,&lt;span style="color:#a31515"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;,&lt;span style="color:#a31515"&gt;&amp;quot;r&amp;quot;}&lt;/span&gt;;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; s &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; result)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(s);&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(array, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; BuildArray_Given3_ReturnCorrectArray()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[,] result = &lt;span style="color:#2b91af"&gt;E28&lt;/span&gt;.BuildArray(3);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[,] array = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[,]&lt;br&gt;                            {&lt;br&gt;                                {7,8,9},&lt;br&gt;                                {6,1,2},&lt;br&gt;                                {5,4,3}&lt;br&gt;                            };&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(array, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SumOfDiagonals_Given3_Return24()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E28&lt;/span&gt;.SumOfDiagonals(3);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(25, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SumOfDiagonals_Given5_Return101()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E28&lt;/span&gt;.SumOfDiagonals(5);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(101, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SumOfDiagonals_Given1001_ReturnAnswer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E28&lt;/span&gt;.SumOfDiagonals(1001);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(669171001, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E28&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; SumOfDiagonals(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; spiralSize)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[,] array = BuildArray(spiralSize);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; counter = 0;&lt;br&gt;         &lt;span style="color:#008000"&gt;//top left to bottom right&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; spiralSize; i++)&lt;br&gt;         {&lt;br&gt;             counter += array[i, i];&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#008000"&gt;//top right to bottom left&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; rowCounter = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = spiralSize-1; i &amp;gt;= 0; i--)&lt;br&gt;         {&lt;br&gt;             counter += array[rowCounter, i];&lt;br&gt;             rowCounter++;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#008000"&gt;//take away the middle one which has been counted twice&lt;/span&gt;&lt;br&gt;         counter -= array[spiralSize/2, spiralSize/2];&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; counter;&lt;br&gt;     }&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] CreateSequence(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; spiralSize)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; maxNumberOfMoves0Based = (spiralSize*spiralSize)-1;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] array = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[maxNumberOfMoves0Based];&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; currentDir = &lt;span style="color:#a31515"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; counter = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; maxNumberOfMoves0Based; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (currentDir == &lt;span style="color:#a31515"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;)&lt;br&gt;             {&lt;br&gt;                 counter++;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; z = 1; z &amp;lt;= counter; z++)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i == maxNumberOfMoves0Based)&lt;br&gt;                     {&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;break&lt;/span&gt;;&lt;br&gt;                     }&lt;br&gt;                     array[i] = &lt;span style="color:#a31515"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;;&lt;br&gt;                     i++;&lt;br&gt;                 }&lt;br&gt;                 i--;&lt;br&gt;                 currentDir = &lt;span style="color:#a31515"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;else&lt;/span&gt; &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (currentDir == &lt;span style="color:#a31515"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; z = 1; z &amp;lt;= counter; z++)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i == maxNumberOfMoves0Based)&lt;br&gt;                     {&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;break&lt;/span&gt;;&lt;br&gt;                     }&lt;br&gt;                     array[i] = &lt;span style="color:#a31515"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;;&lt;br&gt;                     i++;&lt;br&gt;                 }&lt;br&gt;                 i--;&lt;br&gt;                 currentDir = &lt;span style="color:#a31515"&gt;&amp;quot;l&amp;quot;&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;else&lt;/span&gt; &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (currentDir == &lt;span style="color:#a31515"&gt;&amp;quot;l&amp;quot;&lt;/span&gt;)&lt;br&gt;             {&lt;br&gt;                 counter++;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; z = 1; z &amp;lt;= counter; z++)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i == maxNumberOfMoves0Based)&lt;br&gt;                     {&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;break&lt;/span&gt;;&lt;br&gt;                     }&lt;br&gt;                     array[i] = &lt;span style="color:#a31515"&gt;&amp;quot;l&amp;quot;&lt;/span&gt;;&lt;br&gt;                     i++;&lt;br&gt;                 }&lt;br&gt;                 i--;&lt;br&gt;                 currentDir = &lt;span style="color:#a31515"&gt;&amp;quot;u&amp;quot;&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;else&lt;/span&gt; &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (currentDir == &lt;span style="color:#a31515"&gt;&amp;quot;u&amp;quot;&lt;/span&gt;)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; z = 1; z &amp;lt;= counter; z++)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i == maxNumberOfMoves0Based)&lt;br&gt;                     {&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;break&lt;/span&gt;;&lt;br&gt;                     }&lt;br&gt;                     array[i] = &lt;span style="color:#a31515"&gt;&amp;quot;u&amp;quot;&lt;/span&gt;;&lt;br&gt;                     i++;&lt;br&gt;                 }&lt;br&gt;                 i--;&lt;br&gt;                 currentDir = &lt;span style="color:#a31515"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; array;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[,] BuildArray(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; spiralSize)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[,] array = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[spiralSize,spiralSize];&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] sequence = CreateSequence(spiralSize);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; row = spiralSize/2;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; column = spiralSize/2;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; counter = 1;&lt;br&gt;         array[row, column] = counter;&lt;br&gt;         counter++;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; command &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; sequence)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (command == &lt;span style="color:#a31515"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;)&lt;br&gt;             {&lt;br&gt;                 column++;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (command == &lt;span style="color:#a31515"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;)&lt;br&gt;             {&lt;br&gt;                 row++;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (command == &lt;span style="color:#a31515"&gt;&amp;quot;l&amp;quot;&lt;/span&gt;)&lt;br&gt;             {&lt;br&gt;                 column--;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (command == &lt;span style="color:#a31515"&gt;&amp;quot;u&amp;quot;&lt;/span&gt;)&lt;br&gt;             {&lt;br&gt;                 row--;&lt;br&gt;             }&lt;br&gt;             array[row, column] = counter;&lt;br&gt;             counter++;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; array;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Another simpler approach here &lt;a href="http://locationcube.blogspot.com/2010/12/euler-problem-28.html"&gt;http://locationcube.blogspot.com/2010/12/euler-problem-28.html&lt;/a&gt;&amp;#160; seeing that that the matrix is acutally going up in multiples of 8 from different starting values.&amp;#160; Elegant.&lt;/p&gt;</Content>
      <Created>2012-06-25T12:02:19.9588741-04:00</Created>
      <Modified>2012-06-25T12:02:19.9588741-04:00</Modified>
      <EntryId>3740ef7a-f18e-4759-856c-ebafaee90aa3</EntryId>
      <Description />
      <Title>Euler 28–Spirals</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>