<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-06-27T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Euler43Pandital0x9_9E3A/image_2.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Euler43Pandital0x9_9E3A/image_thumb.png" width="442" height="278" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Using Parallel.For for the first time.&amp;#160; &lt;/p&gt;  &lt;p&gt;Goal is to get a sequence of Pandigitals to work with 0x9. ie from:&amp;#160; 1023456789 to 9876543210&lt;/p&gt;  &lt;p&gt;This is a brute force approach to get the PD’s into a list, which I’ll save to a CSV.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://stackoverflow.com/questions/2774170/parallel-for-update-variable-outside-of-loop"&gt;http://stackoverflow.com/questions/2774170/parallel-for-update-variable-outside-of-loop&lt;/a&gt;&amp;#160; - race conditions and parallel…caution.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://stackoverflow.com/questions/10846550/disappointing-performance-with-parallel-for"&gt;http://stackoverflow.com/questions/10846550/disappointing-performance-with-parallel-for&lt;/a&gt; – using each thread/core to do subtotals pattern in parallel.&lt;/p&gt;  &lt;h2&gt;Delegates / Lambdas / Actions&lt;/h2&gt;  &lt;p&gt;&lt;a href="http://stackoverflow.com/questions/11233704/writing-a-delegate-as-a-func"&gt;http://stackoverflow.com/questions/11233704/writing-a-delegate-as-a-func&lt;/a&gt;&lt;/p&gt;    &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b2e62896-65cd-4a76-9b6e-1b97980822d5" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#008000"&gt;//delegate&lt;/span&gt;&lt;br&gt; &lt;span style="color:#2b91af"&gt;Parallel&lt;/span&gt;.For(1023456789, 9876543210, &lt;span style="color:#0000ff"&gt;delegate&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; i)&lt;br&gt;                                          {&lt;br&gt;                                              &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i % 10000000 == 0) &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0:N0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, i);&lt;br&gt;                                              &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsPanDigital(i))&lt;br&gt;                                              {&lt;br&gt;                                                  &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;****&amp;quot;&lt;/span&gt; + i);&lt;br&gt;                                                  list.Add(i); &lt;span style="color:#008000"&gt;//not thread safe&lt;/span&gt;&lt;br&gt;                                              }&lt;br&gt;                                          }&lt;br&gt;     );&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;//lambda expression&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;//Parallel.For(1023456789, 1033456789, i =&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;//                                         {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;//                                             if (i%10000000 == 0) Console.WriteLine(&amp;quot;{0:N0}&amp;quot;, i);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;//                                             if (IsPanDigital(i))&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;//                                             {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;//                                                 list.Add(i);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;//                                             }&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;//                                         }&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;//    );&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;    &lt;p&gt;I like the delegate syntax.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9cede39e-e6bf-422e-9642-69fb5701e183" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Action&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt; Blah(&lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt; list)&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;//return i =&amp;gt;&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//           {&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//               if (i%10000000 == 0) Console.WriteLine(&amp;quot;{0:N0}&amp;quot;, i);&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//               if (IsPanDigital(i))&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//               {&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//                   list.Add(i);&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//               }&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//           };&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;delegate&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; i)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i % 10000000 == 0) &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0:N0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, i);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsPanDigital(i))&lt;br&gt;         {&lt;br&gt;             list.Add(i);&lt;br&gt;         }&lt;br&gt;     };&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Can call out to another method Action&amp;lt;long&amp;gt;&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b2510d8d-7d90-482f-bef8-f9880bd8ebce" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#008000"&gt;Parallel.For(1023456789, 1033456789, Blah(list)); &lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;h2&gt;Write Out Sequence&lt;/h2&gt;  &lt;p&gt;The above brute force is taking about 2 hours.. so new strategy is to write out the sequence smallest to largest:&lt;/p&gt;  &lt;p&gt;1023456789    &lt;br /&gt;1023456798     &lt;br /&gt;1023456879     &lt;br /&gt;1023456897&lt;/p&gt;  &lt;p&gt;hmm seems hard&lt;/p&gt;  &lt;h2&gt;Other IsPanDigital Algorithms&lt;/h2&gt;  &lt;p&gt;google searched and a good one on SO: &lt;a href="http://stackoverflow.com/questions/2484892/fastest-algorithm-to-check-if-a-number-is-pandigital"&gt;http://stackoverflow.com/questions/2484892/fastest-algorithm-to-check-if-a-number-is-pandigital&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;but this didn’t seem to work easily for a long.&lt;/p&gt;  &lt;h2&gt;Other Part of Problem to reduce size of Pandigital Checking&lt;/h2&gt;  &lt;p&gt;Reduced size by looking at final 3 digits and only taking the ones which are multiples of 17.&amp;#160; Then same for middle digits multiples of 7.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Euler43Pandital0x9_9E3A/image_4.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Euler43Pandital0x9_9E3A/image_thumb_1.png" width="244" height="140" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;34secs runtime over 8 cores using Parallel.For loop.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5fcc609d-7411-4e9f-982e-6ab28acd7f7a" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E43Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SubstringDivOkay_Given1406357289_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E43&lt;/span&gt;.SubstringDivOkay(1406357289);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; MethodUnderTest_scenario_expectedbehaviour()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E43&lt;/span&gt;.SubstringDivOkay(3248456789);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPanDigital_Given1234567890_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E43&lt;/span&gt;.IsPanDigital(1234567890);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E43&lt;/span&gt;.IsPanDigital(1406357289);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetLast3DigitsDiv17_Given_ReturnList()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E43&lt;/span&gt;.GetLast3DigitsDiv17();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(58, result.Count);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetMiddleDigitsDiv7_Given_ReturnList()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E43&lt;/span&gt;.GetMid3DigitsDiv7();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(143, result.Count);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetAll0x9PandigitalNumbersSubStringGood_GivenListLast3Digits_ReturnAnswer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E43&lt;/span&gt;.GetAnswer();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(16695334890, result);&lt;br&gt;     }&lt;br&gt;     &lt;span style="color:#008000"&gt;//answer 16695334890..in 1hr 43. with strings below&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//making for loop smaller.. 36secs&lt;/span&gt;&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E43&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; GetAnswer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; lastDigits = &lt;span style="color:#2b91af"&gt;E43&lt;/span&gt;.GetLast3DigitsDiv17();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; midDigits = &lt;span style="color:#2b91af"&gt;E43&lt;/span&gt;.GetMid3DigitsDiv7();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E43&lt;/span&gt;.GetAll0x9PandigitalNumbersSubStringGood(lastDigits, midDigits);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; GetMid3DigitsDiv7()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; list = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt;();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; 1000; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i % 7 == 0)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i &amp;lt; 10)&lt;br&gt;                 {&lt;br&gt;                     list.Add(&lt;span style="color:#a31515"&gt;&amp;quot;00&amp;quot;&lt;/span&gt; + i.ToString());&lt;br&gt;                 }&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;else&lt;/span&gt; &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i &amp;lt; 100)&lt;br&gt;                 {&lt;br&gt;                     list.Add(&lt;span style="color:#a31515"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; + i.ToString());&lt;br&gt;                 }&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;else&lt;/span&gt;&lt;br&gt;                 {&lt;br&gt;                     list.Add(i.ToString());&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; list;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; GetLast3DigitsDiv17()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; list = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt;();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; 1000; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i % 17 == 0)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i &amp;lt; 100)&lt;br&gt;                 {&lt;br&gt;                     list.Add(&lt;span style="color:#a31515"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; + i.ToString());&lt;br&gt;                 }&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;else&lt;/span&gt;&lt;br&gt;                 {&lt;br&gt;                     list.Add(i.ToString());&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; list;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; SubstringDivOkay(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; i)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; s = i.ToString();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; d2 = s.Substring(1, 1);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; d3 = s.Substring(2, 1);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; d4 = s.Substring(3, 1);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; d5 = s.Substring(4, 1);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; d6 = s.Substring(5, 1);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; d7 = s.Substring(6, 1);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; d8 = s.Substring(7, 1);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; d9 = s.Substring(8, 1);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; d10 = s.Substring(9, 1);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number2 = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(d2 + d3 + d4);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number3 = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(d3 + d4 + d5);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number5 = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(d4 + d5 + d6);&lt;br&gt;         &lt;span style="color:#008000"&gt;//int number7 = Convert.ToInt32(d5 + d6 + d7);&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number11 = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(d6 + d7 + d8);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number13 = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(d7 + d8 + d9);&lt;br&gt;         &lt;span style="color:#008000"&gt;//int number17 = Convert.ToInt32(d8 + d9 + d10);&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//if (number17 % 17 == 0)&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (number13 % 13 == 0)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (number11 % 11 == 0)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#008000"&gt;//if (number7 % 7 == 0)&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (number5 % 5 == 0)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (number3 % 3 == 0)&lt;br&gt;                     {&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (number2 % 2 == 0)&lt;br&gt;                         {&lt;br&gt;                             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;                         }&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;                 &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; GetAll0x9PandigitalNumbersSubStringGood(&lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; lastDigits, &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; midDigits)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfPDs = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt;();&lt;br&gt; &lt;br&gt;         &lt;span style="color:#2b91af"&gt;Parallel&lt;/span&gt;.For(1023, 9923, &lt;span style="color:#0000ff"&gt;delegate&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; i)&lt;br&gt;                                      {&lt;br&gt;                                          &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i%1000 == 0) &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0:N0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, i);&lt;br&gt;                                          &lt;span style="color:#008000"&gt;//concat mid&lt;/span&gt;&lt;br&gt;                                          &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; midDigit &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; midDigits)&lt;br&gt;                                          {&lt;br&gt;                                              &lt;span style="color:#008000"&gt;//concat last digits&lt;/span&gt;&lt;br&gt;                                              &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; lastDigit &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; lastDigits)&lt;br&gt;                                              {&lt;br&gt;                                                  &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; j = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt64(i.ToString() + midDigit + lastDigit);&lt;br&gt; &lt;br&gt;                                                  &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (SubstringDivOkay(j))&lt;br&gt;                                                  {&lt;br&gt;                                                      &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsPanDigital(j))&lt;br&gt;                                                      {&lt;br&gt;                                                          &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;****&amp;quot;&lt;/span&gt; + j);&lt;br&gt;                                                          listOfPDs.Add(j);&lt;span style="color:#008000"&gt;//not thread safe&lt;/span&gt;&lt;br&gt;                                                      }&lt;br&gt;                                                  }&lt;br&gt;                                              }&lt;br&gt;                                          }&lt;br&gt;                                      });&lt;br&gt;      &lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; sum = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; l &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; listOfPDs)&lt;br&gt;         {&lt;br&gt;             sum += l;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; sum;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsPanDigital(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; number)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; list = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; s = number.ToString();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; num = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(s.Substring(i, 1));&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (list.Contains(num))&lt;br&gt;             {&lt;br&gt;                 list.Remove(num);&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;else&lt;/span&gt;&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-06-28T12:00:07.1946427-04:00</Created>
      <Modified>2012-06-28T12:00:07.1946427-04:00</Modified>
      <EntryId>29833427-926d-4999-8625-865b6044d9b9</EntryId>
      <Description />
      <Title>Euler43–Pandigital0x9</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;&lt;a href="http://www.quickmath.com/webMathematica3/quickmath/equations/solve/basic.jsp#c=solve_basicsolveequation&amp;amp;v1=x%3Dn(3n-1)%2F2&amp;amp;v2=n"&gt;http://www.quickmath.com/webMathematica3/quickmath/equations/solve/basic.jsp#c=solve_basicsolveequation&amp;amp;v1=x%3Dn(3n-1)%2F2&amp;amp;v2=n&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Inverse function was the trick here – getting IsPentagonal to work&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0221febf-5709-40ce-8a01-ff8624c26d76" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E44Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReturnPentagonal_Given1x10_ReturnListOfPents()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E44&lt;/span&gt;.ReturnPentagonalList(1, 10);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(10, result.Count);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.AreEquivalent(result, &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; { 1, 5, 12, 22, 35, 51, 70, 92, 117, 145 });&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPentagonal_Given51_True()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E44&lt;/span&gt;.IsPentagonal(51);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPentagonal_Given29_False()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E44&lt;/span&gt;.IsPentagonal(29);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPentagonal_Given48_False()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E44&lt;/span&gt;.IsPentagonal(48);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPentagonal_Given125_False()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E44&lt;/span&gt;.IsPentagonal(125);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPentagonal_GivenAllNumbersAndCompareToCorrectList_ShouldBeSameAsList()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfPents = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt;();&lt;br&gt; &lt;br&gt;         listOfPents = &lt;span style="color:#2b91af"&gt;E44&lt;/span&gt;.ReturnPentagonalList(1, 30000);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; 100; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (&lt;span style="color:#2b91af"&gt;E44&lt;/span&gt;.IsPentagonal(i))&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.Contains(listOfPents, i);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindPairOfPWhereSumAndDiffIsPent_Given_ReturnListPairs()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E44&lt;/span&gt;.FindPairOfPWhereSumAndDiffIsPent();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(1, result.Count);&lt;br&gt;         &lt;span style="color:#008000"&gt;//iPent 1560090, jPent 7042750, sum 8602840, difference 5482660&lt;/span&gt;&lt;br&gt; &lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E44&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; FindPairOfPWhereSumAndDiffIsPent()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; list = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt;();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; 10000; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(i);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; j = 1; j &amp;lt; 10000; j++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i &amp;lt; j)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#008000"&gt;//sum&lt;/span&gt;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; iPent = ReturnPentagonal(i);&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; jPent = ReturnPentagonal(j);&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; sum = iPent + jPent;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsPentagonal(sum))&lt;br&gt;                     {&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; difference = jPent - iPent;&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsPentagonal(difference))&lt;br&gt;                         {&lt;br&gt;                             &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; d = jPent - iPent;&lt;br&gt;                             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = iPent + &lt;span style="color:#a31515"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; + jPent + &lt;span style="color:#a31515"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; + d;&lt;br&gt;                             list.Add(x);&lt;br&gt;                             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;i: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;4}&lt;/span&gt;&lt;span style="color:#a31515"&gt;, j: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;5}&lt;/span&gt;&lt;span style="color:#a31515"&gt;, iPent {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;, jPent {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;, sum {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;2}&lt;/span&gt;&lt;span style="color:#a31515"&gt;, difference {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;3}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, iPent, jPent, sum, difference,i,j);&lt;br&gt;                         }&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; list;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsPentagonal(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; i)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; t = (&lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(1+ 24 * i) + 1.0) / 6.0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (t == (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;)t)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; ReturnPentagonal(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; result = a * ((3 * a) - 1) / 2;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt; ReturnPentagonalList(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; b)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; list = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;long&lt;/span&gt;&amp;gt;();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = a; i &amp;lt;= b; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; result = ReturnPentagonal(i);&lt;br&gt;             list.Add(result);&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; list;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-06-28T15:38:39.2132238-04:00</Created>
      <Modified>2012-06-28T15:38:39.2132238-04:00</Modified>
      <EntryId>ef034470-ec61-46a9-98bb-07912b7a58dd</EntryId>
      <Description />
      <Title>Euler 44–Pentagonal</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>