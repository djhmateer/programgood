<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-03-17T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;My current goal is to do these TDD style so I can practice.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;The &lt;i&gt;n&lt;/i&gt;&lt;sup&gt;th&lt;/sup&gt; term of the sequence of triangle numbers is given by, &lt;i&gt;t&lt;sub&gt;n&lt;/sub&gt;&lt;/i&gt; = ½&lt;i&gt;n&lt;/i&gt;(&lt;i&gt;n&lt;/i&gt;+1); so the first ten triangle numbers are:&lt;/p&gt;  &lt;p&gt;1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...&lt;/p&gt;  &lt;p&gt;By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = &lt;i&gt;t&lt;/i&gt;&lt;sub&gt;10&lt;/sub&gt;. If the word value is a triangle number then we shall call the word a triangle word.&lt;/p&gt;  &lt;p&gt;Using &lt;a href="http://projecteuler.net/project/words.txt"&gt;words.txt&lt;/a&gt; (right click and 'Save Link/Target As...'), a 16K text file containing nearly two-thousand common English words, how many are triangle words?&lt;/p&gt;  &lt;p&gt;&lt;a href="http://projecteuler.net/thread=42;page=8"&gt;http://projecteuler.net/thread=42;page=8&lt;/a&gt;&amp;#160; pzelnips explanation of the Maths is good.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:df45690e-f6cb-4de8-9a2e-0c571c631e5c" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Euler42Tests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Euler42&lt;/span&gt; e;&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;SetUp&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Euler42TestsSetup()&lt;br&gt;         {&lt;br&gt;             e = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Euler42&lt;/span&gt;();&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; LoadTextFile_GivenWordsTxt_ShouldReturnAsACSVString()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result = e.LoadWordsTxt();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsNotEmpty(result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; TakeOffQuotationMarks_GivenWordsTxt_ShouldReturnAsACleanCSVString()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; words = e.LoadWordsTxt();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; wordsNoQuotes = e.TakeOffQuotationMarks(words);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Debug&lt;/span&gt;.WriteLine(words);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Debug&lt;/span&gt;.WriteLine(wordsNoQuotes);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsNotEmpty(wordsNoQuotes);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ConvertCSVStringToList_GivenCSVString_ShouldReturnAList()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; words = e.LoadWordsTxt();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; wordsNoQuotes = e.TakeOffQuotationMarks(words);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; listOfWords = e.ConvertCsvStringToList(wordsNoQuotes);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Debug&lt;/span&gt;.WriteLine(listOfWords);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsNotEmpty(listOfWords);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.IsNotEmpty(listOfWords);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.AllItemsAreUnique(listOfWords);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetFirst1000TriangeNumbers_CallMethod_ShouldReturnAListOfTriangleNumbersUnder1000()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; listOfTriangeNumbers = e.GetFirst1000TriangeNumbers();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[] intArrayOfKnowTriangeNumbers = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[] { 1, 3, 6, 10, 15, 21, 28, 36, 45, 55 };&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; knownTriangeNumber &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; intArrayOfKnowTriangeNumbers)&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.Contains(listOfTriangeNumbers, knownTriangeNumber);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsTriangleNumber_GivenA1_ShouldReturnTrueAsItIsATriangleNumber()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = e.IsTriangleNumber(1);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsTriangleNumber_GivenA2_ShouldReturnFalseAsItIsNotATriangleNumber()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = e.IsTriangleNumber(2);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsTriangleNumber_GivenA6_ShouldReturnFalseAsItIsNotATriangleNumber()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = e.IsTriangleNumber(6);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsTriangleNumber_Given55_ShouldReturnTrueAsItIsATriangleNumber()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = e.IsTriangleNumber(55);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetWordValue_GivenSKY_ShouldReturn55()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = e.GetWordValue(&lt;span style="color:#a31515"&gt;&amp;quot;SKY&amp;quot;&lt;/span&gt;);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(55, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetWordValue_GivenSKZ_ShouldReturn56()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = e.GetWordValue(&lt;span style="color:#a31515"&gt;&amp;quot;SKZ&amp;quot;&lt;/span&gt;);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(56, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetWordValue_GivenAAA_ShouldReturn3()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = e.GetWordValue(&lt;span style="color:#a31515"&gt;&amp;quot;AAA&amp;quot;&lt;/span&gt;);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(3, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; HowManyAreTriangleWords_GivenNothing_ShouldReturnTheNumberOfWordsWhichAreTriange()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; sw = &lt;span style="color:#2b91af"&gt;Stopwatch&lt;/span&gt;.StartNew();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = e.HowManyAreTriangeWords();&lt;br&gt;             sw.Stop();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Debug&lt;/span&gt;.WriteLine(&lt;span style="color:#2b91af"&gt;String&lt;/span&gt;.Format(&lt;span style="color:#a31515"&gt;&amp;quot;Answer = {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;, took {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;ms&amp;quot;&lt;/span&gt;, result, sw.Elapsed.TotalMilliseconds));&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(162, result);&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;and the code:   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8188c741-cb71-44d0-b4f2-c1ff61839626" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Euler42&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; _first1000TriangeNumbers;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; Euler42()&lt;br&gt;         {&lt;br&gt;             _first1000TriangeNumbers = GetFirst1000TriangeNumbers();&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; LoadWordsTxt()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;using&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; streamReader = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;StreamReader&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;words.txt&amp;quot;&lt;/span&gt;))&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; streamReader.ReadToEnd();&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; TakeOffQuotationMarks(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result.Replace(&lt;span style="color:#a31515"&gt;&amp;quot;&amp;#92;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; ConvertCsvStringToList(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; csvstring)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] stringArray = csvstring.Split(&lt;span style="color:#a31515"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; stringArray.ToList();&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; GetFirst1000TriangeNumbers()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; triangeNumberList = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; n = 1; n &amp;lt; 1000; n++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; t = 0.5 * n * (n + 1);&lt;br&gt;                 triangeNumberList.Add(&lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(t));&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; triangeNumberList;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsInteger(&lt;span style="color:#0000ff"&gt;double&lt;/span&gt; number)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; (number % 1 == 0);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsTriangleNumber(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberToTry)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//first method is precomputing the triangle numbers and comparing&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//var listOfTriangleNumbers = first1000TriangeNumbers;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//if (listOfTriangleNumbers.Contains(i))&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//    return true;&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//second method is testing each number to see if it is triangular&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//equation is the result of solving original with &lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//quadratic equation&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; squareRoot = &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(1 + (8*numberToTry));&lt;br&gt;             &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; n = (-1 + squareRoot)/2;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; IsInteger(n);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; GetWordValue(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; inputString)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//get the word and split into each letter&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; letterCount = inputString.Length;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; wordValue = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; letterCount; i++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;char&lt;/span&gt; x = inputString[i];   &lt;br&gt;  &lt;br&gt;                 &lt;span style="color:#008000"&gt;//get the position of that letter eg a=1, b=2, c=3&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; z = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(x);&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; charPosition = z - 64;&lt;br&gt;                 wordValue += charPosition;&lt;br&gt;             }&lt;br&gt;             &lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; wordValue;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; HowManyAreTriangeWords()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result = LoadWordsTxt();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result2 = TakeOffQuotationMarks(result);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; result3 = ConvertCsvStringToList(result2);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; counter = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; word &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; result3)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result4 = GetWordValue(word);&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result5 = IsTriangleNumber(result4);&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (result5)&lt;br&gt;                     counter++;&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; counter;&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/p&gt;</Content>
      <Created>2012-03-18T14:53:17.7775-04:00</Created>
      <Modified>2012-03-18T14:53:17.7775-04:00</Modified>
      <EntryId>49174462-cec3-4096-952a-927cfd834e09</EntryId>
      <Description />
      <Title>Project Euler 42</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>