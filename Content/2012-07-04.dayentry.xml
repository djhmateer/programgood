<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-07-03T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:6453899c-e243-43ad-a9ff-8b16391b0685" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E49Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReturnPermutationsOfFourDigit_GivenInt1234_ReturnAllPermutations()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E49&lt;/span&gt;.ReturnPermutationsOfFourDigit(1234);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(24, result.Count);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.IsSubsetOf(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; { 1234, 4321 }, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReturnPermutationsOfFourDigit_GivenInt_ReturnAllPermutations()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E49&lt;/span&gt;.ReturnPermutationsOfFourDigitHelper(1487);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(24, result.Count);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.IsSubsetOf(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; { 4817, 8147 }, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReturnPermutationsOfFourDigit_GivenInt2969_ReturnAllPermutations()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E49&lt;/span&gt;.ReturnPermutationsOfFourDigitHelper(2969);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(12, result.Count);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.IsSubsetOf(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; { 6299 }, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//[Test]&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindArithmeticSequence_Given_ReturnConcat()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E49&lt;/span&gt;.FindArithmeticSequence(1487);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;148748178147&amp;quot;&lt;/span&gt;, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindArithmeticSequence_Given1488_ReturnConcat()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E49&lt;/span&gt;.FindArithmeticSequence(1000);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;296962999629&amp;quot;&lt;/span&gt;, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E49&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; ReturnPermutationsOfFourDigitHelper(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; retList = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; incoming = i.ToString();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; helper = ReturnPermutationsOfFourDigit(1234);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; helper)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; s = number.ToString();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; d0 = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(s.Substring(0, 1)) - 1;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; d1 = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(s.Substring(1, 1)) - 1;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; d2 = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(s.Substring(2, 1)) - 1;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; d3 = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(s.Substring(3, 1)) - 1;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; first = incoming.Substring(d0, 1);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; second = incoming.Substring(d1, 1);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; third = incoming.Substring(d2, 1);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; fourth = incoming.Substring(d3, 1);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; newNumber = first + second + third + fourth;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; n = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(newNumber);&lt;br&gt;             retList.Add(n);&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#008000"&gt;//if 1123 is i.. then inherently we&amp;#39;ll have duplicates&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; retList.Distinct().ToList();&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; ReturnPermutationsOfFourDigit(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; list = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; number = a.ToString();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; n0 = number.Substring(0, 1);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; n1 = number.Substring(1, 1);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; n2 = number.Substring(2, 1);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; n3 = number.Substring(3, 1);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listString = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt;() { n0, n1, n2, n3 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; 4; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; j = 0; j &amp;lt; 4; j++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; k = 0; k &amp;lt; 4; k++)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; l = 0; l &amp;lt; 4; l++)&lt;br&gt;                     {&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; h = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;HashSet&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;                         &lt;span style="color:#008000"&gt;//don&amp;#39;t want duplicates eg 1111&lt;/span&gt;&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; temp = listString[i] + listString[j] + listString[k] + listString[l];&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; duplicates = &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; ch &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; temp)&lt;br&gt;                         {&lt;br&gt;                             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!h.Add(ch))&lt;br&gt;                             {&lt;br&gt;                                 duplicates = &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;                             }&lt;br&gt;                         }&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!duplicates)&lt;br&gt;                         {&lt;br&gt;                             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; num = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(temp);&lt;br&gt;                             list.Add(num);&lt;br&gt;                         }&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; list;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; FindArithmeticSequence(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; start)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = start; i &amp;lt;= 9999; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; list = ReturnPermutationsOfFourDigitHelper(i);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfPrimes = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; perm &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; list)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (perm &amp;gt; 1000)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsPrime(perm))&lt;br&gt;                     {&lt;br&gt;                         listOfPrimes.Add(perm);&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             list.Sort();&lt;br&gt;             listOfPrimes.Sort();&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (listOfPrimes.Count &amp;gt;= 3)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#008000"&gt;//see if there is a 3330 increase anywhere in sequence&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#008000"&gt;//don&amp;#39;t know where to start.. so try 0.&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; j = 0; j &amp;lt; listOfPrimes.Count - 2; j++)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; prime2 = listOfPrimes[j] + 3330;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (listOfPrimes.Contains(prime2))&lt;br&gt;                     {&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; prime3 = prime2 + 3330;&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (listOfPrimes.Contains(prime3))&lt;br&gt;                         {&lt;br&gt;                             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result = listOfPrimes[j].ToString() + prime2.ToString() + prime3.ToString();&lt;br&gt;                             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (result != &lt;span style="color:#a31515"&gt;&amp;quot;148748178147&amp;quot;&lt;/span&gt;)&lt;br&gt;                             {&lt;br&gt;                                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;                             }&lt;br&gt;                         }&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsPrime(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; a)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a == 1) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a == 2) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 2; i &amp;lt;= &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(a); i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a % i == 0)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Ambiguous question, which turned into some interesting code.&amp;#160; Used HashSet for the first time as a way of checking for duplicates.&amp;#160; Used Linq to only return distinct items.&amp;#160; Came up with own simple way of getting all permutations of a series of numbers, even if that series contains duplicates.&amp;#160; I used a mapping for this.&lt;/p&gt;</Content>
      <Created>2012-07-03T20:26:03.3031609-04:00</Created>
      <Modified>2012-07-03T20:26:03.3031609-04:00</Modified>
      <EntryId>b00a5d1c-9082-4f6b-a4df-982675a1034e</EntryId>
      <Description />
      <Title>Euler49–Sequence</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:64b98305-7895-4bad-99cf-8f50de29116e" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E50Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; LongestSumOfConsecutivePrimesBelow_Given100_Return41()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E50&lt;/span&gt;.LongestSumOfConsecutivePrimesBelow(100);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(41, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; LongestSumOfConsecutivePrimesBelow_Given1000_Return953()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E50&lt;/span&gt;.LongestSumOfConsecutivePrimesBelow(1000);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(953, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; LongestSumOfConsecutivePrimesBelow_Given10000_Return()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E50&lt;/span&gt;.LongestSumOfConsecutivePrimesBelow(1000000);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(997651, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E50&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; LongestSumOfConsecutivePrimesBelow(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; max)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; list = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;         &lt;span style="color:#008000"&gt;//a rough number of primes&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 2; i &amp;lt;= max/2; i++)&lt;br&gt;         {&lt;br&gt;            &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsPrime(i)) list.Add(i);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//starting at every place in list&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; largestNumberOfConsecTerms = 1;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; largestSum = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; list.Count; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; sum = list[i];&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberConsecTerms = 1;&lt;br&gt;             &lt;span style="color:#008000"&gt;//ending at every place in list&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; j = i+1; j &amp;lt; list.Count; j++)&lt;br&gt;             {&lt;br&gt;                 sum += list[j];&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (sum &amp;gt; max)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;break&lt;/span&gt;;&lt;br&gt;                 }&lt;br&gt;                 numberConsecTerms++;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsPrime(sum))&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (numberConsecTerms &amp;gt;= largestNumberOfConsecTerms)&lt;br&gt;                     {&lt;br&gt;                         largestNumberOfConsecTerms = numberConsecTerms;&lt;br&gt;                         largestSum = sum;&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; largestSum;&lt;br&gt;     }&lt;br&gt;     &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsPrime(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; a)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a == 1) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a == 2) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 2; i &amp;lt;= &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(a); i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a % i == 0)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Get primes roughly in the right area.&amp;#160; Start at every item of list, and end at every item in list.&amp;#160; See which sums to the most, and how many consecutive numbers.&lt;/p&gt;</Content>
      <Created>2012-07-03T23:49:02.0613685-04:00</Created>
      <Modified>2012-07-03T23:49:02.0613685-04:00</Modified>
      <EntryId>ea6f4e8c-7110-4bd2-9f76-d9ec6de2a305</EntryId>
      <Description />
      <Title>Euler 50–Primes</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>