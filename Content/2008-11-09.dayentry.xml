<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2008-11-08T19:00:00-05:00</Date>
  <Entries>
    <Entry>
      <Content>microISV&lt;br&gt;&lt;br&gt;http://www.ericsink.com/ - makes CodeGear&lt;br&gt;&lt;br&gt;http://network.businessofsoftware.org/&lt;br&gt;&lt;br&gt;&lt;br&gt;Microsoft Empower Program - https://partner.microsoft.com/NZ/program/40011351&lt;br&gt;&lt;br&gt;Microsoft Action Pack - https://partner.microsoft.com/nz/40016472&lt;br&gt;&lt;br&gt;Microsoft BizSpark - http://www.microsoft.com/bizspark/Default.aspx&lt;br&gt;&lt;br&gt;&lt;br&gt;Joel Spolsky - http://www.joelonsoftware.com/&lt;br&gt;&lt;br&gt;www.inc.com&lt;br&gt;&lt;br&gt;http://www.microsoftstartupzone.com/pages/home.aspx&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</Content>
      <Created>2008-11-09T17:51:47.765-05:00</Created>
      <Modified>2008-11-10T23:35:15.46875-05:00</Modified>
      <EntryId>4f067926-4bac-429b-95d1-7d1bb7de5551</EntryId>
      <Description />
      <Title>Business of Software</Title>
      <Categories>Business Of Software</Categories>
      <Author>admin</Author>
      <IsPublic>false</IsPublic>
      <Syndicated>false</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>Goal: To show a simple OOP Program which shows the language we use.&lt;br&gt;&lt;br&gt;&lt;img src="http://www.programgood.net/content/binary/climber.gif" border="0"&gt;&lt;br&gt;&lt;br&gt;Form1.cs&lt;br&gt;&lt;pre&gt;&lt;span style="color: Black; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;&lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;// Which .NET Libraries to use&lt;/span&gt;&lt;br&gt;&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;using&lt;/span&gt; System;&lt;br&gt;&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;using&lt;/span&gt; System.Collections.Generic;&lt;br&gt;&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;using&lt;/span&gt; System.ComponentModel;&lt;br&gt;&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;using&lt;/span&gt; System.Data;&lt;br&gt;&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;using&lt;/span&gt; System.Drawing;&lt;br&gt;&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;using&lt;/span&gt; System.Linq;&lt;br&gt;&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;using&lt;/span&gt; System.Text;&lt;br&gt;&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;using&lt;/span&gt; System.Windows.Forms;&lt;br&gt;&lt;br&gt;&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;namespace&lt;/span&gt; OOP&lt;br&gt;{&lt;br&gt;    &lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;// Class Form1 extends off the class Form.&lt;/span&gt;&lt;br&gt;    &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; partial &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;class&lt;/span&gt; Form1 : Form&lt;br&gt;    {&lt;br&gt;        &lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;// Variable climber of type Person&lt;/span&gt;&lt;br&gt;        Person climber;&lt;br&gt;&lt;br&gt;        &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; Form1()&lt;br&gt;        {&lt;br&gt;            InitializeComponent();&lt;br&gt;            &lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;// Instantiating the climber as a person&lt;/span&gt;&lt;br&gt;            &lt;/span&gt;&lt;span style="color: Black; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;&lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;// climber is the reference variable&lt;/span&gt;&lt;/span&gt;&lt;span style="color: Black; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;&lt;br&gt;            climber &lt;span style="color: Red; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;new&lt;/span&gt; Person();&lt;br&gt;            &lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;// Setting the public property of the climber&lt;/span&gt;&lt;br&gt;            climber.age &lt;span style="color: Red; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; 35;&lt;br&gt;            climber.name &lt;span style="color: Red; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; &lt;span style="color: rgb(102, 102, 102); background-color: rgb(228, 228, 228); font-family: Courier New; font-size: 11px;"&gt;"Dave"&lt;/span&gt;;&lt;br&gt;        }&lt;br&gt;&lt;br&gt;        &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;private&lt;/span&gt; &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;void&lt;/span&gt; button1_Click(&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;object&lt;/span&gt; sender, EventArgs e)&lt;br&gt;        {&lt;br&gt;            textBox1.Text &lt;span style="color: Red; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;=&lt;/span&gt; climber.age.ToString();&lt;br&gt;        }&lt;br&gt;&lt;br&gt;        &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;private&lt;/span&gt; &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;void&lt;/span&gt; button2_Click(&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;object&lt;/span&gt; sender, EventArgs e)&lt;br&gt;        {&lt;br&gt;            &lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;// Calling the method&lt;/span&gt;&lt;br&gt;            climber.Add1YearToAge();&lt;br&gt;        }&lt;br&gt;&lt;br&gt;        &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;private&lt;/span&gt; &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;void&lt;/span&gt; button3_Click(&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;object&lt;/span&gt; sender, EventArgs e)&lt;br&gt;        {&lt;br&gt;            &lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;// Calling another method and passing a parameter&lt;/span&gt;&lt;br&gt;            climber.AddAnyYearToAge(5);&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;}&lt;br&gt;&lt;/span&gt;&lt;/pre&gt;Person.cs&lt;br&gt;&lt;pre&gt;&lt;span style="color: Black; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;using&lt;/span&gt; System;&lt;br&gt;&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;using&lt;/span&gt; System.Collections.Generic;&lt;br&gt;&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;using&lt;/span&gt; System.Linq;&lt;br&gt;&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;using&lt;/span&gt; System.Text;&lt;br&gt;&lt;br&gt;&lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;// Use a namespace so don't have to reference each file to each other&lt;/span&gt;&lt;br&gt;&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;namespace&lt;/span&gt; OOP&lt;br&gt;{&lt;br&gt;    &lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;// A Person Object or Class&lt;/span&gt;&lt;br&gt;    &lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;// This describes a blueprint for what a Person is, and what a Person does.&lt;/span&gt;&lt;br&gt;    &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;class&lt;/span&gt; Person&lt;br&gt;    {&lt;br&gt;        &lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;// The object (or thing)'s characteristics&lt;/span&gt;&lt;br&gt;        &lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;// public Fields&lt;/span&gt;&lt;br&gt;        &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;int&lt;/span&gt; Age;&lt;br&gt;        &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;string&lt;/span&gt; Name;&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;span style="color: Black; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;&lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;        // Encapsulation - using private fields&lt;/span&gt;&lt;br&gt;        &lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;// Fields&lt;/span&gt;&lt;br&gt;        &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;private&lt;/span&gt; &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;int&lt;/span&gt; xxx;&lt;br&gt;&lt;/span&gt;&lt;span style="color: Black; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;&lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;        // if miss off public or private, it is private&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span style="color: Black; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;        &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;&lt;/span&gt;&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;string&lt;/span&gt; yyy;&lt;br&gt;&lt;/span&gt;&lt;br&gt;&lt;span style="color: Black; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;&lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;        // Properties - special methods&lt;/span&gt;&lt;br&gt;&lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;&lt;/span&gt;        &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;private&lt;/span&gt; &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;int&lt;/span&gt; numberOfClimbs;&lt;br&gt;public int NumberOfClimbs &lt;br&gt;{&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;span style="color: Black; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;&lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;        // if miss off public or private, it is private&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span style="color: Black; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;        &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;&lt;/span&gt;&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;string&lt;/span&gt; yyy;&lt;/span&gt;&lt;br&gt;&lt;span style="color: Black; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;&lt;br&gt;        &lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;// The object's behaviour - methods&lt;/span&gt;&lt;br&gt;         &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;void&lt;/span&gt; Add1YearToAge()&lt;br&gt;        {&lt;br&gt;            age += 1;&lt;br&gt;        }&lt;br&gt;&lt;br&gt;        &lt;span style="color: Green; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;// This method is taking a parameter&lt;/span&gt;&lt;br&gt;        &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;public&lt;/span&gt; &lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;void&lt;/span&gt; AddAnyYearToAge(&lt;span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;"&gt;int&lt;/span&gt; ageToAdd)&lt;br&gt;        {&lt;br&gt;            age += ageToAdd;&lt;br&gt;        }&lt;br&gt;&lt;br&gt;    }&lt;br&gt;}&lt;br&gt;&lt;/span&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</Content>
      <Created>2008-11-09T04:30:05.109-05:00</Created>
      <Modified>2009-01-29T15:10:57.70075-05:00</Modified>
      <EntryId>6a2a8459-ae03-492e-9d2b-d1c5cc37a792</EntryId>
      <Description />
      <Title>Object Oriented Programming</Title>
      <Categories>Object Oriented Programming</Categories>
      <Author>admin</Author>
      <IsPublic>false</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>