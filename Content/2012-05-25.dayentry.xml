<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-05-24T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d9b9728f-411b-4861-98ca-1dc7465e2881" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; [&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;StringTest&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Length()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;; &lt;span style="color:#008000"&gt;//string is an alias to System.String&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//String y = &amp;quot;hello&amp;quot;; //System.String&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//string is a sequence of unicode characters&lt;/span&gt;&lt;br&gt;             &lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(5,x.Length);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//char is a single character&lt;/span&gt;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; NullTermination()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;char&lt;/span&gt;[] nullTerminated = {&lt;span style="color:#a31515"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;#39;&amp;#92;0&amp;#39;}&lt;/span&gt;; &lt;span style="color:#008000"&gt;//null terminator&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//System.Windows.Forms.MessageBox.Show(&amp;quot;Hello&amp;#92;0world&amp;quot;); //only prints hello.. stops when it hits the null terminator&lt;/span&gt;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Literals()  &lt;span style="color:#008000"&gt;//embedding a value in source code&lt;/span&gt;&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;char&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;; &lt;span style="color:#008000"&gt;//single quotes character literal&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y = &lt;span style="color:#a31515"&gt;&amp;quot;y&amp;#92;u1234&amp;#92;&amp;quot;asdf&amp;quot;&lt;/span&gt;; &lt;span style="color:#008000"&gt;//double are string literals..&amp;#92;u is unicode&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; z = &lt;span style="color:#a31515"&gt;@&amp;quot;z&amp;#92;0a&amp;quot;&lt;/span&gt;; &lt;span style="color:#008000"&gt;//verbatim string literal...ie can include backslashes and they are not treated specially&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(y);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; a = &lt;span style="color:#a31515"&gt;&amp;quot;first line&amp;#92;r&amp;#92;nsecondline&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; sampleFile =&lt;br&gt;                 &lt;span style="color:#a31515"&gt;@&amp;quot;heading1  heading2    heading3&lt;/span&gt;&lt;br&gt; &lt;span style="color:#a31515"&gt;value1  value2  value3&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Regex&lt;/span&gt; sampleRegex = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Regex&lt;/span&gt;(&lt;span style="color:#a31515"&gt;@&amp;quot;Matches brakcets &amp;#92;(&amp;#92;)&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//string is a reference type&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//strings are immutable&lt;/span&gt;&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Assignment()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;; &lt;span style="color:#008000"&gt;//writing directions to some object..&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y = x; &lt;span style="color:#008000"&gt;//copying the directions..so both refer to same object&lt;/span&gt;&lt;br&gt;             x.Replace(&lt;span style="color:#a31515"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;#39;j&amp;#39;&lt;/span&gt;); &lt;span style="color:#008000"&gt;//effectivly useless.... because it is immutable&lt;/span&gt;&lt;br&gt; &lt;br&gt;             x = x.Replace(&lt;span style="color:#a31515"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;#39;j&amp;#39;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(x);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(y);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;jello&amp;quot;&lt;/span&gt;,x);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;,y);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DifferentEqualObjects()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;br&gt;             x = x.Replace(&lt;span style="color:#a31515"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;#39;j&amp;#39;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;object&lt;/span&gt; o1 = x;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;object&lt;/span&gt; o2 = &lt;span style="color:#a31515"&gt;&amp;quot;jello&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreNotSame(o1,o2);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(o1==o2);&lt;span style="color:#008000"&gt;//overloading compile time&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(o1.Equals(o2)); &lt;span style="color:#008000"&gt;//overriding happens at execution time.. based on their actual type rather than type of variable&lt;/span&gt;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DifferentEqualStrings()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;br&gt;             x = x.Replace(&lt;span style="color:#a31515"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;#39;j&amp;#39;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; s1 = x;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; s2 = &lt;span style="color:#a31515"&gt;&amp;quot;jello&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreNotSame(s1, s2);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(s1 == s2);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(&lt;span style="color:#0000ff"&gt;object&lt;/span&gt;.Equals(s1,s2)); &lt;span style="color:#008000"&gt;//slightly safer if one is a null ref then this wont blow up&lt;/span&gt;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; InterningOfConstants()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y = &lt;span style="color:#a31515"&gt;&amp;quot;he&amp;quot;&lt;/span&gt; + &lt;span style="color:#a31515"&gt;&amp;quot;llo&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreSame(x,y);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; NonInterningOfNonConstants()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; he = &lt;span style="color:#a31515"&gt;&amp;quot;he&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y = he + &lt;span style="color:#a31515"&gt;&amp;quot;llo&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreNotSame(x,y);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(x,y);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; BadConcatenation()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; simple = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;,10000);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; bad = &lt;span style="color:#a31515"&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10000; i++)&lt;br&gt;             {&lt;br&gt;                     bad = bad + &lt;span style="color:#a31515"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;;  &lt;span style="color:#008000"&gt;//value of bad is a reference..create a new string called bad..so by later iterations it will be copy 900 chars each iteration&lt;/span&gt;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(simple,bad);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GoodConcatenation() &lt;span style="color:#008000"&gt;//we cant build strings well with strings, as they are immutable&lt;/span&gt;&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; simple = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;,100000);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;StringBuilder&lt;/span&gt; builder = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;StringBuilder&lt;/span&gt;();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; 100000; i++)&lt;br&gt;             {&lt;br&gt;                 builder.Append(&lt;span style="color:#a31515"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;); &lt;span style="color:#008000"&gt;//rule of thumb.. if using concatenation in a loop use stringBuilder&lt;/span&gt;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; good = builder.ToString();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(simple,good);&lt;br&gt;             builder.Append(&lt;span style="color:#a31515"&gt;&amp;quot;this wont appear in good&amp;quot;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(simple, good);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; BadUseOfStringBuilder()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y = &lt;span style="color:#a31515"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#008000"&gt;//we want x + &amp;quot; &amp;quot; + y;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;StringBuilder&lt;/span&gt; builder = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;StringBuilder&lt;/span&gt;();&lt;br&gt;             builder.Append(x);&lt;br&gt;             builder.Append(&lt;span style="color:#a31515"&gt;&amp;quot; &amp;quot;&lt;/span&gt;);&lt;br&gt;             builder.Append(y);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result = builder.ToString();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;x y&amp;quot;&lt;/span&gt;, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GoodUseOfConcatenation()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y = &lt;span style="color:#a31515"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result = x + &lt;span style="color:#a31515"&gt;&amp;quot; &amp;quot;&lt;/span&gt; + y;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;x y&amp;quot;&lt;/span&gt;, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CompilerTranslationofConcatenation()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y = &lt;span style="color:#a31515"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result = &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;.Concat(x, &lt;span style="color:#a31515"&gt;&amp;quot; &amp;quot;&lt;/span&gt;, y);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;x y&amp;quot;&lt;/span&gt;, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; StringJoin() &lt;span style="color:#008000"&gt;//nice way of doing csv&lt;/span&gt;&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] values = {&lt;span style="color:#a31515"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;y&amp;quot;}&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; commaSeperated = &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;.Join(&lt;span style="color:#a31515"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;, values);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;x, ,y&amp;quot;&lt;/span&gt;, commaSeperated);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; StringFormat()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y = &lt;span style="color:#a31515"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result = &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;.Format(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt; {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, x,y);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;x y&amp;quot;&lt;/span&gt;, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; StringFormat2()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y = &lt;span style="color:#a31515"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result = &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;.Format(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt; {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, x, y);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;y x&amp;quot;&lt;/span&gt;, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; StringFormat3()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x = 100;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y = &lt;span style="color:#a31515"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result = &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;.Format(&lt;span style="color:#a31515"&gt;&amp;quot;x={&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt; y={&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, x, y);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;x=100 y=y&amp;quot;&lt;/span&gt;, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; StringFormat4()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; value = 100; &lt;span style="color:#008000"&gt;//also int value = 0x64&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y = &lt;span style="color:#a31515"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result = &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;.Format(&lt;span style="color:#a31515"&gt;&amp;quot;value=0x{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0:x}&lt;/span&gt;&lt;span style="color:#a31515"&gt; y={&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, value, y);&lt;span style="color:#008000"&gt;//notice x here for hex&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;value=0x64 y=y&amp;quot;&lt;/span&gt;, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; StringFormat5()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;decimal&lt;/span&gt; price = 10.50m;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result = &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;.Format(&lt;span style="color:#a31515"&gt;&amp;quot;price={&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0:c}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, price);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;price=$10.50&amp;quot;&lt;/span&gt;, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; InternMethod()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y = &lt;span style="color:#a31515"&gt;&amp;quot;jello&amp;quot;&lt;/span&gt;.Replace(&lt;span style="color:#a31515"&gt;&amp;#39;j&amp;#39;&lt;/span&gt;,&lt;span style="color:#a31515"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreNotSame(x, y);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; z = &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;.Intern(y);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreSame(x,z);&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-24T23:12:32.181-04:00</Created>
      <Modified>2012-05-24T23:12:32.181-04:00</Modified>
      <EntryId>af8d08f4-8e49-4995-aa17-6814c5a05a17</EntryId>
      <Description />
      <Title>Tekpub - Strings</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>