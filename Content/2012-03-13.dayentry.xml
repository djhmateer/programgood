<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-03-12T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;ul&gt;   &lt;li&gt;A Data Access Pattern &lt;/li&gt;    &lt;li&gt;Separate persistence responsibility from business logic classes &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;talks about unit of work..&lt;/p&gt;  &lt;p&gt;In DDD the most coarsely grained items will each have a repository.&lt;/p&gt;  &lt;h3&gt;Data Access Evolution&lt;/h3&gt;  &lt;p&gt;Interesting:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns-2.-Repository_C4BE/image_2.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns-2.-Repository_C4BE/image_thumb.png" width="644" height="406" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;To test this app, you need to run the UI.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns-2.-Repository_C4BE/image_4.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns-2.-Repository_C4BE/image_thumb_1.png" width="644" height="418" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;2 tier.&amp;#160; ADO.NET code pushed into the helper.&amp;#160; Hard to test business logic as its still in the UI.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns-2.-Repository_C4BE/image_6.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns-2.-Repository_C4BE/image_thumb_2.png" width="644" height="427" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;eg ICustomerRepository.. and CustomerRepository&lt;/p&gt;  &lt;p&gt;Commonly Strategy Pattern is used in Repository&lt;/p&gt;  &lt;p&gt;mvcmusicstore.codeplex.com&lt;/p&gt;  &lt;p&gt;&lt;a href="http://mvcmusicstore.codeplex.com/SourceControl/network/forks/ssmith/MvcMusicStoreRepositoryPattern"&gt;http://mvcmusicstore.codeplex.com/SourceControl/network/forks/ssmith/MvcMusicStoreRepositoryPattern&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Original Code:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:08102676-b33b-4812-82f7-5436a220ea26" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;HomeController&lt;/span&gt; : &lt;span style="color:#2b91af"&gt;Controller&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;// GET: /Home/&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;MusicStoreEntities&lt;/span&gt; storeDB = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;MusicStoreEntities&lt;/span&gt;();&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ActionResult&lt;/span&gt; Index()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;// Get most popular albums&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; albums = GetTopSellingAlbums(5);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; View(albums);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;Album&lt;/span&gt;&amp;gt; GetTopSellingAlbums(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; count)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;// Group the order details by album and return&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;// the albums with the highest count&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; storeDB.Albums&lt;br&gt;                 .OrderByDescending(a =&amp;gt; a.OrderDetails.Count())&lt;br&gt;                 .Take(count)&lt;br&gt;                 .ToList();&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns-2.-Repository_C4BE/image_8.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns-2.-Repository_C4BE/image_thumb_3.png" width="419" height="159" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;where DbContext is in System.Data.Entity (EF) – this uses a unit of work and repository pattern (need to clarify).&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns-2.-Repository_C4BE/image_10.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns-2.-Repository_C4BE/image_thumb_4.png" width="529" height="295" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;So looks like we’re using code first.&lt;/p&gt;  &lt;p&gt;In global.asax there is a line which will seed the db if need be.&lt;/p&gt;  &lt;p&gt;In web.config there is a connection string to a SQL CE DB.&lt;/p&gt;  &lt;p&gt;Applying Repository Pattern&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns-2.-Repository_C4BE/image_12.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns-2.-Repository_C4BE/image_thumb_5.png" width="1012" height="497" /&gt;&lt;/a&gt;&lt;/p&gt;    &lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:567d7cb1-c7f2-4431-b2c7-1ea4da91f4d6" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;    &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;HomeController&lt;/span&gt; : &lt;span style="color:#2b91af"&gt;Controller&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IAlbumRepository&lt;/span&gt; _albumRepository;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//poor mans dependency injection&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//can put in a fake repository here&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; HomeController(&lt;span style="color:#2b91af"&gt;IAlbumRepository&lt;/span&gt; albumRepository)&lt;br&gt;         {&lt;br&gt;             _albumRepository = albumRepository;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//as mvc3 calls constructor without parameter&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//can assume that all testing will call the above&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//so can hard code in the actual db calls here&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//uses a constructor initializer&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; HomeController() : &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;EfAlbumRepository&lt;/span&gt;()) { }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ActionResult&lt;/span&gt; Index()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; albums = _albumRepository.GetTopSellingAlbums(5);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; View(albums);&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Where to put stuff:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns-2.-Repository_C4BE/image_14.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Patterns-2.-Repository_C4BE/image_thumb_6.png" width="679" height="405" /&gt;&lt;/a&gt;&lt;/p&gt;    &lt;p&gt;he uses structuremap for IoC&lt;/p&gt;</Content>
      <Created>2012-03-13T16:30:32.250625-04:00</Created>
      <Modified>2012-03-14T03:13:24.89125-04:00</Modified>
      <EntryId>c6f92439-7189-4614-b01c-63e807a19b79</EntryId>
      <Description />
      <Title>Patterns 2. Repository</Title>
      <Categories>Patterns</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;Intent:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Way to decouple things which are dependant on one another &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;SRP – Single Responsibility&lt;/p&gt;  &lt;p&gt;OCP – Open to extension (can change its behaviour), but closed to modification (change the source code and recompile) eg a plugin structure.. paramaters.. pass in different parameters to change the behaviour&lt;/p&gt;  &lt;p&gt;Commonly used for Dependency Injection.&lt;/p&gt;</Content>
      <Created>2012-03-13T11:07:00-04:00</Created>
      <Modified>2012-03-14T02:08:32.5475-04:00</Modified>
      <EntryId>7416ecff-a95f-43ef-a9f0-b53ebbeae7c1</EntryId>
      <Description />
      <Title>Patterns–1.Strategy</Title>
      <Categories>Patterns</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;Notes from Steve Smith’s Commonly Used Design patterns dnrtv show.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://dnrtv.com/dnrtvplayer/player.aspx?ShowNum=0194"&gt;http://dnrtv.com/dnrtvplayer/player.aspx?ShowNum=0194&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://csharpindepth.com/Articles/General/Singleton.aspx"&gt;http://csharpindepth.com/Articles/General/Singleton.aspx&lt;/a&gt; – Jon Skeets article on this&lt;/p&gt;  &lt;p&gt;&lt;a href="http://ardalis.com/"&gt;http://ardalis.com/&lt;/a&gt; Steves blog (running Orchard)&lt;/p&gt;  &lt;p&gt;Intent:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Ensure a class has only 1 instance &lt;/li&gt;    &lt;li&gt;Make the class itself responsible for keeping track of its sole instance &lt;/li&gt;    &lt;li&gt;“There can be only 1” &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Not thread-safe&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2b42ac17-82cb-4808-9e67-02d10be4bac4" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;&lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Program&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] args)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//Call singleton&amp;#39;s DoStuff() method&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;.Instance.DoStuff();&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//Assign to another variable&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; myObject = &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;.Instance;&lt;br&gt;             myObject.DoStuff();&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//Pas as a paramater&lt;/span&gt;&lt;br&gt;             SomeOtherMethod(&lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;.Instance);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SomeOtherMethod(&lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; singleton)&lt;br&gt;         {&lt;br&gt;             singleton.DoStuff();&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//warning - not thread safe eg aspnet&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; _instance;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; Singleton() { }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt; Instance&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;get&lt;/span&gt;&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (_instance == &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;)&lt;br&gt;                     _instance = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Singleton&lt;/span&gt;();&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; _instance;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; DoStuff()&lt;br&gt;         {&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Thread-safe and fast&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;default pattern is Not thread safe and should &lt;/p&gt;  &lt;p&gt;Tight coupling&lt;/p&gt;  &lt;p&gt;Notoriously difficult to test – commonly regarded as an anti-pattern..&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Using an IoC Container is a way to avoid coupling eg ninject, unity&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;“Singletons allow you to reuse code and control object state much easier. This improves code-sharing, and can result in a far cleaner body of code. With less code, your programs will usually have fewer bugs and will be easier to maintain.”&lt;/p&gt;  &lt;p&gt;Steve doesn’t use singletons. Violates SRP – because it does 2 things:&amp;#160; eg if you want all file management to go through 1 instance of a class ie a singleton&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Class has to mange its own lifetime (IoC containers job)&lt;/li&gt;    &lt;li&gt;Deal with the filesystem&lt;/li&gt; &lt;/ul&gt;</Content>
      <Created>2012-03-13T09:40:48.156875-04:00</Created>
      <Modified>2012-03-13T09:47:22.20375-04:00</Modified>
      <EntryId>060fb20e-ba62-412a-8e90-3e6eb04224e6</EntryId>
      <Description />
      <Title>Design Patterns - 0 Singleton</Title>
      <Categories>Patterns</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;I love listening to full albums.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Organising-Music_99AE/image_4.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Organising-Music_99AE/image_thumb_1.png" width="244" height="121" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;So my music collection now only contains full albums.&amp;#160; I organise myself on the file system, then import into iTunes.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Organising-Music_99AE/image_2.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Organising-Music_99AE/image_thumb.png" width="234" height="244" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;A dump in excel from iTunes of all artists and albums.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.computeraudiophile.com/content/Extraction-Artist-and-Album-database-iTunes"&gt;http://www.computeraudiophile.com/content/Extraction-Artist-and-Album-database-iTunes&lt;/a&gt;&lt;/p&gt;</Content>
      <Created>2012-03-13T06:57:43.89125-04:00</Created>
      <Modified>2012-03-13T06:57:43.89125-04:00</Modified>
      <EntryId>00a0848b-98e1-4b4f-bb92-1baa20a7ed97</EntryId>
      <Description />
      <Title>Organising Music</Title>
      <Categories>Music</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>