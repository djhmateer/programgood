<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2010-12-26T19:00:00-05:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.&lt;/p&gt;  &lt;p&gt;Find the sum of all the primes below two million.&lt;/p&gt;  &lt;p&gt;Here is code which didn’t work as I’d used int’s instead of longs:&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;[TestClass]&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; UnitTest1&lt;br /&gt;    {&lt;br /&gt;        [TestMethod]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; CalculateTheSumOfPrimesBelow10()&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;long&lt;/span&gt; result = PrimeTester.calculateTheSumOfPrimesBelow(10);&lt;br /&gt;            Assert.AreEqual(17, result);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        [TestMethod]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; CalculateTheSumOfPrimesBelow20()&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;long&lt;/span&gt; result = PrimeTester.calculateTheSumOfPrimesBelow(20);&lt;br /&gt;            Assert.AreEqual(77, result);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;        [TestMethod]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; CalculateTheSumOfPrimesBelow2million()&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = PrimeTester.calculateTheSumOfPrimesBelow(2000000); &lt;span style="color: #008000"&gt;// 2million&lt;/span&gt;&lt;br /&gt;            Assert.AreEqual(1179908154, result); &lt;span style="color: #008000"&gt;// 1,179,908,154 .. this was what I got with an int...&lt;/span&gt;&lt;br /&gt;                                                 &lt;span style="color: #008000"&gt;// correct answer was 142,913,828,922 with a long&lt;/span&gt;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; PrimeTester&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; calculateTheSumOfPrimesBelow(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; maxPrimeBelow)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #008000"&gt;// we know 2 is a prime number&lt;/span&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; sumOfPrimes = 2;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; currentNumberBeingTested = 3;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;while&lt;/span&gt; (currentNumberBeingTested &amp;lt; maxPrimeBelow)&lt;br /&gt;            {&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; squareRootOfNumberBeingTested = (&lt;span style="color: #0000ff"&gt;double&lt;/span&gt;)Math.Sqrt(currentNumberBeingTested);&lt;br /&gt;&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; isPrime = &lt;span style="color: #0000ff"&gt;true&lt;/span&gt;;&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 2; i &amp;lt;= squareRootOfNumberBeingTested; i++)&lt;br /&gt;                {&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (currentNumberBeingTested % i == 0)&lt;br /&gt;                    {&lt;br /&gt;                        isPrime = &lt;span style="color: #0000ff"&gt;false&lt;/span&gt;;&lt;br /&gt;                        &lt;span style="color: #0000ff"&gt;break&lt;/span&gt;;&lt;br /&gt;                    }&lt;br /&gt;                }&lt;br /&gt;&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (isPrime)&lt;br /&gt;                    sumOfPrimes += currentNumberBeingTested;&lt;br /&gt;&lt;br /&gt;                currentNumberBeingTested += 2; &lt;span style="color: #008000"&gt;// as we don't want to test even numbers&lt;/span&gt;&lt;br /&gt;            }&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; sumOfPrimes;&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;and here is the working version with the checked keyword:&lt;/p&gt;

&lt;div&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;br /&gt;        [TestMethod]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; CalculateTheSumOfPrimesBelow2million()&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;long&lt;/span&gt; result = PrimeTester.calculateTheSumOfPrimesBelow(2000000); &lt;span style="color: #008000"&gt;// 2million&lt;/span&gt;&lt;br /&gt;            Assert.AreEqual(1179908154, result); &lt;span style="color: #008000"&gt;// 1,179,908,154 .. this was what I got with an int...&lt;/span&gt;&lt;br /&gt;                                                 &lt;span style="color: #008000"&gt;// correct answer was 142,913,828,922 with a long&lt;/span&gt;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; PrimeTester&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff"&gt;long&lt;/span&gt; calculateTheSumOfPrimesBelow(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; maxPrimeBelow)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #008000"&gt;// we know 2 is a prime number&lt;/span&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; sumOfPrimes = 2;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; currentNumberBeingTested = 3;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;while&lt;/span&gt; (currentNumberBeingTested &amp;lt; maxPrimeBelow)&lt;br /&gt;            {&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; squareRootOfNumberBeingTested = (&lt;span style="color: #0000ff"&gt;double&lt;/span&gt;)Math.Sqrt(currentNumberBeingTested);&lt;br /&gt;&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; isPrime = &lt;span style="color: #0000ff"&gt;true&lt;/span&gt;;&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 2; i &amp;lt;= squareRootOfNumberBeingTested; i++)&lt;br /&gt;                {&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (currentNumberBeingTested % i == 0)&lt;br /&gt;                    {&lt;br /&gt;                        isPrime = &lt;span style="color: #0000ff"&gt;false&lt;/span&gt;;&lt;br /&gt;                        &lt;span style="color: #0000ff"&gt;break&lt;/span&gt;;&lt;br /&gt;                    }&lt;br /&gt;                }&lt;br /&gt;&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;checked&lt;/span&gt;&lt;br /&gt;                {&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (isPrime)&lt;br /&gt;                        sumOfPrimes += currentNumberBeingTested;&lt;br /&gt;                }&lt;br /&gt;&lt;br /&gt;                currentNumberBeingTested += 2; &lt;span style="color: #008000"&gt;// as we don't want to test even numbers&lt;/span&gt;&lt;br /&gt;            }&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; sumOfPrimes;&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;
&lt;/div&gt;

&lt;div&gt;&amp;#160;&lt;/div&gt;

&lt;div&gt;or we can use a compiler option tick for check for arithmetic overflow/underflow.&lt;/div&gt;

&lt;div&gt;&lt;a href="http://www.programgood.net/content/binary/WindowsLiveWriter/Euler10Longs_ED4D/screen_2.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="screen" border="0" alt="screen" src="http://www.programgood.net/content/binary/WindowsLiveWriter/Euler10Longs_ED4D/screen_thumb.png" width="595" height="484" /&gt;&lt;/a&gt; &lt;/div&gt;

&lt;div&gt;
  &lt;br /&gt;&lt;/div&gt;</Content>
      <Created>2010-12-27T01:33:26.37775-05:00</Created>
      <Modified>2010-12-27T01:43:19.69025-05:00</Modified>
      <EntryId>7a747e5c-668e-4cfb-9cb7-3c6df80ed87d</EntryId>
      <Description />
      <Title>Euler #10 – Longs and Checked</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;Attacked this using TDD one step at a time:&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;[TestMethod]&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; GetRow1Col2ShouldBe99()&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = ArrayTester.GetData(1, 2);&lt;br /&gt;    Assert.AreEqual(99, result);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;[TestMethod]&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; GetHorizontalProductOfFirstFourNumbersInRow0()&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; resultingProduct = 0;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt;= 3; i++)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (i == 0)&lt;br /&gt;            resultingProduct = ArrayTester.GetData(0, 0);&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;else&lt;/span&gt;&lt;br /&gt;            resultingProduct = resultingProduct * ArrayTester.GetData(0, i);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    Assert.AreEqual(34144, resultingProduct);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;[TestMethod]&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; FindMaxHorizonatalProductsInRow0()&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = ArrayTester.FindMaxHorizonalProductInRow(0);&lt;br /&gt;    Assert.AreEqual(4204200, result);&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;and code:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; FindMaxHorizonalProductInRow(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; row)&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt; listOfProducts = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; startingPosition = 0; startingPosition &amp;lt;= 16; startingPosition++) &lt;span style="color: #008000"&gt;// as we know it will finish at 19&lt;/span&gt;&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; resultingProduct = 0;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; j = 0; j &amp;lt;= 3; j++)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (j == 0)&lt;br /&gt;                resultingProduct = ArrayTester.GetData(row, startingPosition);&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;else&lt;/span&gt;&lt;br /&gt;                resultingProduct = resultingProduct * ArrayTester.GetData(row, startingPosition + j);    &lt;br /&gt;        }&lt;br /&gt;        listOfProducts.Add(resultingProduct);&lt;br /&gt;    }&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; listOfProducts.Max();&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;static&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; GetData(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; row, &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; col)&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt;[,] numberArray = { { 08, 02, 22, 97, 38, 15, 00, 40, 00, 75, 04, 05, 07, 78, 52, 12, 50, 77, 91, 08 },&lt;br /&gt;                         {49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 04, 56, 62, 00},&lt;br /&gt;                         {81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 03, 49, 13, 36, 65 },&lt;br /&gt;                         {52, 70, 95, 23, 04, 60, 11, 42, 69, 24, 68, 56, 01, 32, 56, 71, 37, 02, 36, 91},&lt;br /&gt;                         {22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80},&lt;br /&gt;                         {24, 47, 32, 60, 99, 03, 45, 02, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50},&lt;br /&gt;                         {32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70},&lt;br /&gt;                         {67, 26, 20, 68, 02, 62, 12, 20, 95, 63, 94, 39, 63, 08, 40, 91, 66, 49, 94, 21},&lt;br /&gt;                         {24, 55, 58, 05, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72},&lt;br /&gt;                         {21, 36, 23, 09, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95},&lt;br /&gt;                         {78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 03, 80, 04, 62, 16, 14, 09, 53, 56, 92},&lt;br /&gt;                         {16, 39, 05, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57},&lt;br /&gt;                         {86, 56, 00, 48, 35, 71, 89, 07, 05, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58},&lt;br /&gt;                         {19, 80, 81, 68, 05, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 04, 89, 55, 40},&lt;br /&gt;                         {04, 52, 08, 83, 97, 35, 99, 16, 07, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66},&lt;br /&gt;                         {88, 36, 68, 87, 57, 62, 20, 72, 03, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69},&lt;br /&gt;                         {04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 08, 46, 29, 32, 40, 62, 76, 36},&lt;br /&gt;                         {20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 04, 36, 16},&lt;br /&gt;                         {20, 73, 35, 29, 78, 31, 90, 01, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 05, 54},&lt;br /&gt;                         {01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 01, 89, 19, 67, 48}&lt;br /&gt;};&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = numberArray[row, col];&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; result;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;then just build out the solution using:&lt;/p&gt;

&lt;p&gt;horizontal checking&lt;/p&gt;

&lt;p&gt;vertical checking&lt;/p&gt;

&lt;p&gt;diagonalDown checking&lt;/p&gt;

&lt;p&gt;diagonalUp checking&lt;/p&gt;</Content>
      <Created>2010-12-27T00:58:52.034-05:00</Created>
      <Modified>2010-12-27T00:58:52.034-05:00</Modified>
      <EntryId>d3a158c3-5c00-458a-9f8f-e53a871061c1</EntryId>
      <Description />
      <Title>Euler #11 - Arrays</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>