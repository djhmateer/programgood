<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-04-03T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;Sequence:&lt;/p&gt;  &lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ae2788f3-468a-4ebc-aaac-c21e4f0113b8" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;&lt;span style="color:#0000ff"&gt;namespace&lt;/span&gt; Euler14&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Euler14Core&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt; ReturnTerms(&lt;span style="color:#0000ff"&gt;double&lt;/span&gt; n)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfTerms = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt; { n };&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; keepgoing = &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;while&lt;/span&gt; (keepgoing)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;double&lt;/span&gt; result = 0;&lt;br&gt;                 &lt;span style="color:#008000"&gt;//odd&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (n % 2 != 0)&lt;br&gt;                     result = (3 * n) + 1;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;else&lt;/span&gt;&lt;br&gt;                     result = n / 2;&lt;br&gt;                 listOfTerms.Add(result);&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (result == 1)&lt;br&gt;                     keepgoing = &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (result &amp;lt; 0)&lt;br&gt;                     &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;problem&amp;quot;&lt;/span&gt;);&lt;br&gt;                 n = result;&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; listOfTerms;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; ReturnNumberOfTerms(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt; result = ReturnTerms(i);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result.Count();&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; ReturnAnswer()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; highestNumberOfTerms = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; whichStartingNumberGaveHighestNumberOfTerms = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; k = 2; k &amp;lt; 1000000; k++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; current = 0;&lt;br&gt;                 current = ReturnNumberOfTerms(k);&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (current &amp;gt; highestNumberOfTerms)&lt;br&gt;                 {&lt;br&gt;                     highestNumberOfTerms = current;&lt;br&gt;                     whichStartingNumberGaveHighestNumberOfTerms = k;&lt;br&gt;                     &lt;span style="color:#2b91af"&gt;Debug&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;highest is now: &amp;quot;&lt;/span&gt; + highestNumberOfTerms);&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; whichStartingNumberGaveHighestNumberOfTerms;&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt;  &lt;p&gt;code&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c870f61f-dea5-4fae-9030-5b2a6b11c88c" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;&lt;span style="color:#0000ff"&gt;namespace&lt;/span&gt; Euler14&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Euler14CoreTests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Euler14Core&lt;/span&gt; e;&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;SetUp&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Euler14CoreTestsSetup()&lt;br&gt;         {&lt;br&gt;             e = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Euler14Core&lt;/span&gt;();&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReturnTerms_Given13_ShouldReturnAListOfIntsInSequence()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = e.ReturnTerms(13);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; expected = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;double&lt;/span&gt;&amp;gt;() { 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 };&lt;br&gt;             &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.AreEquivalent(expected, result);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Debug&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;done&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReturnNumberOfTerms_Given13_ShouldReturn10()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = e.ReturnNumberOfTerms(13);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(10, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//main test for getting answer&lt;/span&gt;&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReturnAnswer_GivenNothing_ShouldReturnNumberWithMostTermsUnder1m()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = e.ReturnAnswer();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(837799, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//tests to get around int/double overflow of main algorithm having numbers&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//in sequence which are bigger than an int&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//113383 made the sequence go over an ints range&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//[Test]&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//public void ReturnTerms_Given113383_ShouldReturnAListOfIntsInSequence()&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    var result = e.ReturnTerms(113383);&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    var expected = new List&amp;lt;double&amp;gt;() { 1, 2, 3 };&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    CollectionAssert.AreEquivalent(expected, result);&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;tests&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Euler-14_E47C/image_2.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Euler-14_E47C/image_thumb.png" width="602" height="484" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;checking for overflow/underflow would have saved me a lot of time!&lt;/p&gt;</Content>
      <Created>2012-04-04T11:30:54.399125-04:00</Created>
      <Modified>2012-04-04T11:30:54.399125-04:00</Modified>
      <EntryId>3f9172ec-ae83-4429-8928-6646e0834eff</EntryId>
      <Description />
      <Title>Euler 14</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>