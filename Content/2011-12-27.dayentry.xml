<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2011-12-26T19:00:00-05:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;Code Kata are exercises that you can do&lt;/p&gt;  &lt;p&gt;osherove.com/kata&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;1 method, 1 parameter &lt;/li&gt;    &lt;li&gt;0 or more numbers &lt;/li&gt;    &lt;li&gt;seperated by a comma &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;eg var sum = Calculator.Sum(1,3,10);&lt;/p&gt;  &lt;p&gt;Alt N for PackageManagerConsole.&lt;/p&gt;  &lt;p&gt;Start with simplest test..empty string.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:873d604a-42ee-4e28-b53b-9d7b21cc13be" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #000000; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;&lt;span style="color:#f1f2f3"&gt;[&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestFixture&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;    &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;class&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculatorTests&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;    {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;Test&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Add_EmptyString_ReturnsZero()&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//start with this even though StringCalculator doesn&amp;#39;t exist yet&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;new&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//method doesn&amp;#39;t exist&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; result &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Add(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//first kind of syntax&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//Assert.AreEqual(0, result);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//second kind of syntax&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;That(result, &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Is&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;EqualTo(&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;0&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;));&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;Test&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Add_SingleNumber_ReturnsThatSingleNumber()&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;new&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; result &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Add(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;AreEqual(&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;1&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, result);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;    }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;    &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;class&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;    {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Add(&lt;/span&gt;&lt;span style="color:#93c763"&gt;string&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; numbers)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;return&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;0&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;;&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;    }&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;just about to get the 2nd test passing… notice no refactoring yet as only do that when 2 tests are actually passing!&lt;/p&gt;  &lt;p&gt;Just assigned Alt Y to rerun all tests so can keep the cursor in the add method.&lt;/p&gt;  &lt;p&gt;Ctrl Alt P – assign parameter&lt;/p&gt;  &lt;h3&gt;String Calc – first bits&lt;/h3&gt;  &lt;h3&gt;nCover&lt;/h3&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/TDD-2Code-Kata_FC89/image_thumb1_2.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image_thumb1" border="0" alt="image_thumb1" src="http://www.programgood.net/content/binary/Windows-Live-Writer/TDD-2Code-Kata_FC89/image_thumb1_thumb.png" width="676" height="218" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;100% code coverage at the moment.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4f21e510-6c43-4e19-b23b-8a0fac0bb1e4" class="class"&gt;   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid"&gt;     &lt;div style="padding-bottom: 2px; background-color: #000000; padding-left: 5px; padding-right: 5px; white-space: nowrap; overflow: auto; padding-top: 2px"&gt;&lt;span style="color: #f1f2f3"&gt;[&lt;/span&gt;&lt;span style="color: #678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color: #ec7600"&gt;&amp;quot;1,2&amp;quot;&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;,&lt;/span&gt;&lt;span style="color: #ffcd22"&gt;3&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;)]&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;[&lt;/span&gt;&lt;span style="color: #678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color: #ec7600"&gt;&amp;quot;1,3&amp;quot;&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;,&lt;/span&gt;&lt;span style="color: #ffcd22"&gt;4&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;)]&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;[&lt;/span&gt;&lt;span style="color: #678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color: #ec7600"&gt;&amp;quot;4,5&amp;quot;&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;,&lt;/span&gt;&lt;span style="color: #ffcd22"&gt;9&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;)]&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;[&lt;/span&gt;&lt;span style="color: #678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color: #ec7600"&gt;&amp;quot;14,44&amp;quot;&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;,&lt;/span&gt;&lt;span style="color: #ffcd22"&gt;58&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;)]&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;[&lt;/span&gt;&lt;span style="color: #678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color: #ec7600"&gt;&amp;quot;1,2,3&amp;quot;&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color: #ffcd22"&gt;6&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;)]&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;[&lt;/span&gt;&lt;span style="color: #678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color: #ec7600"&gt;&amp;quot;1,2,3,4,5&amp;quot;&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color: #ffcd22"&gt;15&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;)]&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;&lt;span style="color: #93c763"&gt;public&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; &lt;/span&gt;&lt;span style="color: #93c763"&gt;void&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; Add_MultipleNumbers_ReturnsTheSum(&lt;/span&gt;&lt;span style="color: #93c763"&gt;string&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; numbers, &lt;/span&gt;&lt;span style="color: #93c763"&gt;int&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; expected)&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;{&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;&lt;span style="color: #678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; sc &lt;/span&gt;&lt;span style="color: #e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; MakeCalc();&lt;/span&gt;        &lt;br /&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;&lt;span style="color: #93c763"&gt;int&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; result &lt;/span&gt;&lt;span style="color: #e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; sc&lt;/span&gt;&lt;span style="color: #e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;Add(numbers);&lt;/span&gt;        &lt;br /&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;&lt;span style="color: #678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color: #e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;AreEqual(expected, result);&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;}&lt;/span&gt;        &lt;br /&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;&lt;span style="color: #93c763"&gt;private&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; &lt;/span&gt;&lt;span style="color: #93c763"&gt;static&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; &lt;/span&gt;&lt;span style="color: #678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; MakeCalc()&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;{&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;&lt;span style="color: #93c763"&gt;return&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; &lt;/span&gt;&lt;span style="color: #93c763"&gt;new&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; &lt;/span&gt;&lt;span style="color: #678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;();&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;}&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;}&lt;/span&gt;        &lt;br /&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;&lt;span style="color: #93c763"&gt;public&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; &lt;/span&gt;&lt;span style="color: #93c763"&gt;class&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; &lt;/span&gt;&lt;span style="color: #678cb1"&gt;StringCalculator&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;{&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;&lt;span style="color: #93c763"&gt;public&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; &lt;/span&gt;&lt;span style="color: #93c763"&gt;int&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; Add(&lt;/span&gt;&lt;span style="color: #93c763"&gt;string&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; numbers)&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;{&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;&lt;span style="color: #93c763"&gt;if&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; (numbers&lt;/span&gt;&lt;span style="color: #e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;Length &lt;/span&gt;&lt;span style="color: #e8e2b7"&gt;==&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; &lt;/span&gt;&lt;span style="color: #ffcd22"&gt;0&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;)&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;&lt;span style="color: #93c763"&gt;return&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; &lt;/span&gt;&lt;span style="color: #ffcd22"&gt;0&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;;&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;&lt;span style="color: #93c763"&gt;if&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; (numbers&lt;/span&gt;&lt;span style="color: #e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;Length &lt;/span&gt;&lt;span style="color: #e8e2b7"&gt;==&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; &lt;/span&gt;&lt;span style="color: #ffcd22"&gt;1&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;)&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;&lt;span style="color: #93c763"&gt;return&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; &lt;/span&gt;&lt;span style="color: #93c763"&gt;int&lt;/span&gt;&lt;span style="color: #e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;Parse(numbers);&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;&lt;span style="color: #93c763"&gt;var&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; listOfNumbers &lt;/span&gt;&lt;span style="color: #e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; numbers&lt;/span&gt;&lt;span style="color: #e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;Split(&lt;/span&gt;&lt;span style="color: #ec7600"&gt;','&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;);&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;&lt;span style="color: #93c763"&gt;int&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; sumOfNumbers &lt;/span&gt;&lt;span style="color: #e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; &lt;/span&gt;&lt;span style="color: #ffcd22"&gt;0&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;;&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;&lt;span style="color: #93c763"&gt;foreach&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; (&lt;/span&gt;&lt;span style="color: #93c763"&gt;var&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; number &lt;/span&gt;&lt;span style="color: #93c763"&gt;in&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; listOfNumbers)&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;sumOfNumbers &lt;/span&gt;&lt;span style="color: #e8e2b7"&gt;+=&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; &lt;/span&gt;&lt;span style="color: #93c763"&gt;int&lt;/span&gt;&lt;span style="color: #e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt;Parse(number);&lt;/span&gt;        &lt;br /&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;&lt;/span&gt;&lt;span style="color: #93c763"&gt;return&lt;/span&gt;&lt;span style="color: #f1f2f3"&gt; sumOfNumbers;&lt;/span&gt;        &lt;br /&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;}&lt;/span&gt;        &lt;br /&gt;&lt;span style="color: #f1f2f3"&gt;}&lt;/span&gt;&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;first shot at getting multiple numbers being summed together&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:3164eeb0-1a40-4e9f-9307-ea4df8c4b242" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #000000; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;&lt;span style="color:#f1f2f3"&gt; [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestFixture&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;    &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;class&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculatorTests&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;    {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;private&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;static&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; MakeCalc()&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;return&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;new&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;();&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;Test&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Add_EmptyString_ReturnsZero()&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//start with this even though StringCalculator doesn&amp;#39;t exist yet&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; MakeCalc();&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//method doesn&amp;#39;t exist&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; result &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Add(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//first kind of syntax&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//Assert.AreEqual(0, result);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//second kind of syntax&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;That(result, &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Is&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;EqualTo(&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;0&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;));&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;,&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;1&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;2&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Add_SingleNumber_ReturnsThatSingleNumber(&lt;/span&gt;&lt;span style="color:#93c763"&gt;string&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; numbers, &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; expected)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; MakeCalc();&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; result &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Add(numbers);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;AreEqual(expected, result);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;1,2&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;,&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;3&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;1,3&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;,&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;4&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;4,5&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;,&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;9&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;14,44&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;,&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;58&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;1,2,3&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;6&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;1,2,3,4,5&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;15&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Add_MultipleNumbers_ReturnsTheSum(&lt;/span&gt;&lt;span style="color:#93c763"&gt;string&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; numbers, &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; expected)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; MakeCalc();&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; result &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Add(numbers);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;AreEqual(expected, result);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;Test&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Add_TwoNumbersWithLineFeedDelimeter_ReturnsTheSum()&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; MakeCalc();&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; result &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Add(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;1&amp;#92;n2&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;AreEqual(&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;3&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, result);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;1&amp;#92;n3&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;4&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;1&amp;#92;n2&amp;#92;n3&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;6&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;1&amp;#92;n222&amp;#92;n3&amp;#92;n20&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;246&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Add_MultipleNumbersWithLineFeedDelimeter_ReturnsTheSum(&lt;/span&gt;&lt;span style="color:#93c763"&gt;string&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; numbers, &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; expected)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; MakeCalc();&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; result &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Add(numbers);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;AreEqual(expected, result);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;Test&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Add_TwoNumbersWithGeneralDelimeter_ReturnsTheSum()&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; MakeCalc();&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; result &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Add(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;//;&amp;#92;n1;2&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;AreEqual(&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;3&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, result);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;//;&amp;#92;n1;2&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;3&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;//;&amp;#92;n1;2;3&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;6&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;//;&amp;#92;n1;2;3;20&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;26&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;//x&amp;#92;n1x2x3x20&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;26&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Add_MultipleNumbersWithGeneralDelimeter_ReturnsTheSum(&lt;/span&gt;&lt;span style="color:#93c763"&gt;string&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; numbers, &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; expected)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; MakeCalc();&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; result &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Add(numbers);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;AreEqual(expected, result);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;Test&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Add_NegativeNumber_ThrowsCorrectExceptionWithNegativeNumber()&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; MakeCalc();&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Exception&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; exception &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Throws&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#678cb1"&gt;Exception&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#93c763"&gt;delegate&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                                                                {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                                                                    sc&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Add(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;-1&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                                                                });&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;AreEqual(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;Negatives not allowed: -1&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, exception&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Message);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;Test&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Add_MultipleNegativeNumbers_ThrowsAnExceptionWithAllNegativeNumbers()&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; MakeCalc();&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Exception&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; exception &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Throws&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#678cb1"&gt;Exception&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#93c763"&gt;delegate&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                                                                {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                                                                    sc&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Add(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;-1,-2&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                                                                });&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;AreEqual(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;Negatives not allowed: -1, -2&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, exception&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Message);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;-1,-2&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;-1, -2&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;-1,-2,-3&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;-1, -2, -3&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;-1,2,-3&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;-1, -3&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Add_MixedMultipleNegativeAndPositiveNumbers_ThrowsAnExceptionWithAllNegativeNumbers(&lt;/span&gt;&lt;span style="color:#93c763"&gt;string&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; numbers, &lt;/span&gt;&lt;span style="color:#93c763"&gt;string&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; expected)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sc &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; MakeCalc();&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Exception&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; exception &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Throws&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#678cb1"&gt;Exception&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#93c763"&gt;delegate&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                                                                {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                                                                    sc&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Add(numbers);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                                                                });&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;AreEqual(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;Negatives not allowed: &amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;+&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; expected, exception&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Message);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;    }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;    &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;class&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#678cb1"&gt;StringCalculator&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;    {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Add(&lt;/span&gt;&lt;span style="color:#93c763"&gt;string&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; numbers)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;string&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; delimeter;&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;if&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; (numbers&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Contains(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;//&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;))&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                delimeter &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; numbers&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Substring(&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;2&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;1&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                numbers &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; numbers&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Substring(&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;4&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, numbers&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Length&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;-&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;4&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                numbers &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; numbers&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Replace(delimeter, &lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            }&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;else&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;if&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; (numbers&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Contains(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;&amp;#92;n&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;))&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                numbers &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; numbers&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Replace(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;&amp;#92;n&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;if&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; (numbers&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Length &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;==&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;0&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                &lt;/span&gt;&lt;span style="color:#93c763"&gt;return&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;0&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;;&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;if&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; (numbers&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Length &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;==&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;1&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                &lt;/span&gt;&lt;span style="color:#93c763"&gt;return&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Parse(numbers);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;if&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; (numbers&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Length &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;==&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;2&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; i &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Parse(numbers);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                &lt;/span&gt;&lt;span style="color:#93c763"&gt;if&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; (i &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;0&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                    &lt;/span&gt;&lt;span style="color:#93c763"&gt;throw&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;new&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Exception&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;Negatives not allowed: &amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;+&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; i&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;ToString());&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                &lt;/span&gt;&lt;span style="color:#93c763"&gt;return&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; i;&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;string&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;[] listOfNumbers &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; numbers&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Split(&lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;string&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; errorMesssage &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;Negatives not allowed: &amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;;&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;bool&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; showErrorMessage &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;false&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;;&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;foreach&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; (&lt;/span&gt;&lt;span style="color:#93c763"&gt;var&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; number &lt;/span&gt;&lt;span style="color:#93c763"&gt;in&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; listOfNumbers)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; i &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Parse(number);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                &lt;/span&gt;&lt;span style="color:#93c763"&gt;if&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; (i &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;0&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                    errorMesssage &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;+=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; i&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;ToString() &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;+&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#ec7600"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;;&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                    showErrorMessage &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;true&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;;&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                }&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//get rid of final comma and space&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;if&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; (showErrorMessage)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                errorMesssage &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; errorMesssage&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Substring(&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;0&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, errorMesssage&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Length &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;-&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;2&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                &lt;/span&gt;&lt;span style="color:#93c763"&gt;throw&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;new&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Exception&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(errorMesssage);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sumOfNumbers &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;0&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;;&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;foreach&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; (&lt;/span&gt;&lt;span style="color:#93c763"&gt;var&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; number &lt;/span&gt;&lt;span style="color:#93c763"&gt;in&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; listOfNumbers)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                sumOfNumbers &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;+=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Parse(number);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;return&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; sumOfNumbers;&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;    }&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;first show at just getting tests to pass.&lt;/p&gt;  &lt;p&gt;Started refactorugb with help from videos on: &lt;a href="http://osherove.com/tdd-kata-1/"&gt;http://osherove.com/tdd-kata-1/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;linq, extension methods, make more readable using methods&lt;/p&gt;  &lt;p&gt;&lt;a href="http://vimeo.com/27977192"&gt;http://vimeo.com/27977192&lt;/a&gt;&lt;/p&gt;</Content>
      <Created>2011-12-27T16:50:51.446125-05:00</Created>
      <Modified>2011-12-27T20:09:09.696125-05:00</Modified>
      <EntryId>08670210-7219-4c0c-abdc-9527ba2c09d0</EntryId>
      <Description />
      <Title>TDD Master Class 2 – Code Kata</Title>
      <Categories>kata;TDD;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;variables or local variables – declared inside methods&lt;/p&gt;  &lt;p&gt;fields – variable (public or private) that is a member of a class&lt;/p&gt;  &lt;p&gt;property – has a getter or setter&lt;/p&gt;</Content>
      <Created>2011-12-26T23:07:14.7759743-05:00</Created>
      <Modified>2011-12-26T23:07:14.7759743-05:00</Modified>
      <EntryId>d564eef5-441c-4560-82eb-0436912a5e41</EntryId>
      <Description />
      <Title>C# Names</Title>
      <Categories>c# language</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;From tekpub.com&lt;/p&gt;  &lt;p&gt;Unit Tests – “.. a test of a small functional piece of code”&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;run in memory (not db!).. all under our control…always expect unit tests to pass&lt;/p&gt;    &lt;p&gt;ie not integration test.. which has dependencies.&lt;/p&gt;    &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Creating a new blank solution (actually called it MyProduct)&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/TDDRoy_9956/image_2.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/TDDRoy_9956/image_thumb.png" width="584" height="484" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;then create a class library called MyProduct.Logic&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/TDDRoy_9956/image_4.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/TDDRoy_9956/image_thumb_1.png" width="644" height="323" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;downloaded Resharper.&lt;/p&gt;  &lt;p&gt;Alt Enter to get rid of usings&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/TDDRoy_9956/image_6.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/TDDRoy_9956/image_thumb_2.png" width="244" height="229" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;setting up a separate project for UnitTests (and further down the line, integration tests).&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/TDDRoy_9956/image_8.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/TDDRoy_9956/image_thumb_3.png" width="244" height="144" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;installing unit via nuget console window. (Alt t n o)&lt;/p&gt;  &lt;p&gt;Don’t need punit or the mock dlls.&amp;#160; So just nunit.framework.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;tests – don’t test math forumulae.&amp;#160; Just logic.&lt;/p&gt;  &lt;h3&gt;Test Naming&lt;/h3&gt;  &lt;p&gt;whats being tested:&amp;#160; Add &lt;/p&gt;  &lt;p&gt;scenario:&amp;#160; TwoNumbers&lt;/p&gt;  &lt;p&gt;expected behaviour&lt;/p&gt;  &lt;p&gt;eg Add_TwoNumbers_ReturnsTheSum&lt;/p&gt;  &lt;p&gt;Test Lint – tells you if no asserts.&amp;#160; Logic in tests eg 1+2&amp;#160;&amp;#160; Assert.AreEqual(1+2, result)&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;h3&gt;TestDriven.NET&lt;/h3&gt;  &lt;p&gt;Tools Options Keyboard&lt;/p&gt;  &lt;p&gt;he uses alt R to rerun tests ( I use Alt T, and Alt D for debug)&lt;/p&gt;  &lt;h3&gt;Refactoring&lt;/h3&gt;  &lt;p&gt;refactor out constructor stuff when &amp;gt; 2 tests&lt;/p&gt;  &lt;p&gt;put initialisation in setup – but this can be confusing when looking at a test way down the page.. so refactor to factory&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fdcd513d-91ba-415f-8079-9ea94cdd8d14" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #000000; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;&lt;span style="color:#f1f2f3"&gt; [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestFixture&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;    &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;class&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#678cb1"&gt;MyCalculatorTests&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;    {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;Test&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Add_TwoNumbers_ReturnsTheSum()&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;MyCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; c &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; GetNewCalc();&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; result &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; c&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Add(&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;1&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;2&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;AreEqual(&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;3&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, result);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;private&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;static&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#678cb1"&gt;MyCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; GetNewCalc()&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;return&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;new&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#678cb1"&gt;MyCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;();&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;    }&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;static factory.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/TDDRoy_9956/image_10.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/TDDRoy_9956/image_thumb_4.png" width="644" height="365" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;but attribute hmmm.. GetNewCalc could throw and exception.&lt;/p&gt;  &lt;p&gt;Use Assert.Throws.&lt;/p&gt;  &lt;h3&gt;Delegates and Lambda expressions&lt;/h3&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:65eb25ae-2ac3-475a-87bb-ef80cc426355" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #000000; max-height: 500px; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;&lt;span style="color:#f1f2f3"&gt; [&lt;/span&gt;&lt;span style="color:#678cb1"&gt;Test&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#66747b"&gt;//[ExpectedException(typeof(Exception))]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Add_FirstParamNegative_Throw()&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;MyCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; c &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; GetNewCalc();&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; ANY_POSITIVE &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;1&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;;&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//c.Add(-1, ANY_POSITIVE);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//parameter is a delegate to a method here&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//but would have same problem as putting in an attribute&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//ie wouldn&amp;#39;t know that GetNewCalc didn&amp;#39;t fire an exception&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//any line of Code could throw an exception&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//Assert.Throws&amp;lt;Exception&amp;gt;(Code);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//anonymous delegate or anonymous method&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//even though its in the scope on an anon method&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//it knows about c&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Throws&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#678cb1"&gt;Exception&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#93c763"&gt;delegate&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                                         {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                                             c&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;Add(&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;-&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;1&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, ANY_POSITIVE);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;                                         });&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//lambda expression - shorter delegate notation&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//method doesn&amp;#39;t have any name.&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//after =&amp;gt; body of method only has one line&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//Assert.Throws&amp;lt;Exception&amp;gt;(() =&amp;gt; c.Add(-1, ANY_POSITIVE));&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d874e296-cc25-44f7-8d9b-b2e298d7dae6" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #000000; max-height: 300px; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;&lt;span style="color:#f1f2f3"&gt;  &lt;/span&gt;&lt;span style="color:#93c763"&gt;private&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; Code()&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#66747b"&gt;//c.Add(-1, ANY_POSITIVE);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;he prefers the delegate way – things more&amp;#160; readable than lambda&lt;/p&gt;  &lt;h3&gt;TDD and Learning new things&lt;/h3&gt;  &lt;ul&gt;   &lt;li&gt;Copy &lt;/li&gt;    &lt;li&gt;Why &lt;/li&gt;    &lt;li&gt;Improvise..eg make own naming convention &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Start with a failing test&lt;/p&gt;  &lt;p&gt;Make test pass – make code as dumb and simple as possible.&amp;#160; Not generic.&amp;#160; Better tests.. better code coverage…how would 11 year old solve it?&lt;/p&gt;  &lt;p&gt;Refactor – changing existing code without changing functionality&lt;/p&gt;  &lt;p&gt;So, writing the test first for second param being negative throwing:&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;h3&gt;New Feature – Calculator Remembers Last Result&lt;/h3&gt;  &lt;p&gt;Doing the test first.. so can see that the field / property&amp;#160; c.LastResult doesn’t exist yet!&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8c0a65de-70bd-4a2e-909c-c93de794eb66" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #000000; max-height: 300px; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;&lt;span style="color:#f1f2f3"&gt;[&lt;/span&gt;&lt;span style="color:#678cb1"&gt;Test&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; ResultMemory_CallingAdd_ResultIsSavedForLater()&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;MyCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; c &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; GetNewCalc();&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; result &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; c&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;AddPositives(&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;1&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;2&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;AreEqual(&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;3&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;, c&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#ff0000"&gt;LastResult&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;easiest way to make the test pass:&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f20f23b0-b975-4c47-8481-fb2afe41d0b0" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #000000; max-height: 300px; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;&lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#66747b"&gt;//a backing field&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;private&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; _lastResult;&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#66747b"&gt;//property (not an auto property)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; LastResult&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;get&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; { &lt;/span&gt;&lt;span style="color:#93c763"&gt;return&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#ffcd22"&gt;3&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;set&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; { _lastResult &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;value&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;h3&gt;TestCase – parameterised&lt;/h3&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9464aa99-903f-40fc-98d5-4e3a8bf1734a" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #000000; max-height: 300px; overflow: auto; padding: 2px 5px; white-space: nowrap"&gt;&lt;span style="color:#f1f2f3"&gt;[&lt;/span&gt;&lt;span style="color:#678cb1"&gt;TestCase&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;(&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;1&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;,&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;2&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;,&lt;/span&gt;&lt;span style="color:#ffcd22"&gt;3&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;)]&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        &lt;/span&gt;&lt;span style="color:#93c763"&gt;public&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; &lt;/span&gt;&lt;span style="color:#93c763"&gt;void&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; ResultMemory_CallingAdd_ResultIsSavedForLater(&lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; a, &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; b, &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; expected)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        {&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;MyCalculator&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; c &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; GetNewCalc();&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#93c763"&gt;int&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; result &lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;=&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt; c&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;AddPositives(a, b);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;            &lt;/span&gt;&lt;span style="color:#678cb1"&gt;Assert&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;AreEqual(expected, c&lt;/span&gt;&lt;span style="color:#e8e2b7"&gt;.&lt;/span&gt;&lt;span style="color:#f1f2f3"&gt;LastResult);&lt;/span&gt;&lt;br&gt; &lt;span style="color:#f1f2f3"&gt;        }&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2011-12-26T21:17:53.433241-05:00</Created>
      <Modified>2011-12-27T16:50:36.618-05:00</Modified>
      <EntryId>404d0417-df4d-4583-a39e-b4641d980745</EntryId>
      <Description />
      <Title>TDD Master Class 1 – Roy Osherove</Title>
      <Categories>TDD;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;Alt Enter – get rid of usings, introduce variable&lt;/p&gt;  &lt;p&gt;Ctrl R Ctrl R – Rename&lt;/p&gt;  &lt;p&gt;Ctrl Alt Space – If have a reference but don’t have a using yet&lt;/p&gt;  &lt;p&gt;Naming convention warning:&amp;#160; Alt Enter, Inspection Options, Hint (gets rid of blue squiggly) eg for&amp;#160;&amp;#160; Add_TwoNumbers_ReturnsTheSum()&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;Introduce var.. turn off.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Ctrl R, Ctrl M&amp;#160; - Extract Method&amp;#160;&amp;#160; eg MyCalculator c = &lt;font style="background-color: #9bbb59"&gt;new MyCalculator()&lt;/font&gt;;&amp;#160; highlight green bit, then Ctrl R, Ctrl M.&amp;#160; extract as a static method.&amp;#160; Factory.&lt;/p&gt;  &lt;p&gt;Resharper Snippets&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Resharper-Keyboard-Shortcuts_9D2F/image_4.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Resharper-Keyboard-Shortcuts_9D2F/image_thumb_1.png" width="640" height="507" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;test tab will then do this.&amp;#160; $xxx$ are dynamic, and $END$ is where cursor will end up.&lt;/p&gt;  &lt;p&gt;Ctrl E, Ctrl U – Surround with eg Try Catch&lt;/p&gt;  &lt;p&gt;Ctrl E, Ctrl C – Cleanup code.. VS is Ctrl K, Ctrl D&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/Resharper-Keyboard-Shortcuts_9D2F/image_6.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/Resharper-Keyboard-Shortcuts_9D2F/image_thumb_2.png" width="745" height="433" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Ctrl R, Ctrl P – Introduce parameter&lt;/p&gt;  &lt;p&gt;Ctrl D – Duplicate&lt;/p&gt;  &lt;p&gt;Ctrl R O – Move to Folder&lt;/p&gt;  &lt;p&gt;Ctrl x – without highlighting will cut a line&lt;/p&gt;  &lt;p&gt;Ctrl E Ctrl U – Surround with&lt;/p&gt;</Content>
      <Created>2011-12-26T21:15:24.4833494-05:00</Created>
      <Modified>2012-02-14T17:15:47.27425-05:00</Modified>
      <EntryId>dac9d0e0-c182-42db-8380-bbc64a2ab682</EntryId>
      <Description />
      <Title>Resharper Keyboard Shortcuts</Title>
      <Categories>Keyboard Shortcuts;Resharper</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>