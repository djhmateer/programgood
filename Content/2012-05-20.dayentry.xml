<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-05-19T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:70b6fd2f-3bc8-40e6-aa12-87b5f2ed451f" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;//field&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//generally speaking don&amp;#39;t give other classes access to your fields&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//can think of it as how it is storing state for the class&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; speaker;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//property.. this is public.. the behaviour&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; Speaker&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;get&lt;/span&gt; { &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; speaker; }&lt;br&gt;         &lt;span style="color:#008000"&gt;//we&amp;#39;ve got an immutable type.. something that can&amp;#39;t be changed after it is constructed&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//immutable is nice as don&amp;#39;t need to worry about change of state&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//set { speaker = value; }&lt;/span&gt;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; Greeter(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; speaker)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//this is referring to current object&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.speaker = speaker;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//public methods are part of the API&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; SayHello(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; recipient)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (recipient == &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;throw&lt;/span&gt; &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ArgumentNullException&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;recipient&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (speaker == &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;)&lt;br&gt;         {   &lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#a31515"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; + recipient;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#a31515"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; + recipient + &lt;span style="color:#a31515"&gt;&amp;quot; from &amp;quot;&lt;/span&gt; + speaker;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;private fields good.. readonly v.good as then we’re immutable therefore easier as don’t need to worry about changes in state&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:157a1340-7437-4327-aacd-9bc19f012924" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]                                                   &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SpeakerProperty_IsSetFromConstructor()&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt; greeter = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;Rob&amp;quot;&lt;/span&gt;);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Rob&amp;quot;&lt;/span&gt;, greeter.Speaker);&lt;br&gt;     &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreNotEqual(&lt;span style="color:#a31515"&gt;&amp;quot;rob&amp;quot;&lt;/span&gt;, greeter.Speaker);&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;asdf&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:3daaf738-74f9-45cb-abab-11acf8a1f2cf" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//field&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//generally speaking don&amp;#39;t give other classes access to your fields&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//can think of it as how it is storing state for the class&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//private string speaker;&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//property.. this is public.. the behaviour&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//public string Speaker&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    get { return speaker; }&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    //we&amp;#39;ve got an immutable type.. something that can&amp;#39;t be changed after it is constructed&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    //immutable is nice as don&amp;#39;t need to worry about change of state&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//    //value is a contextual keyword&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//    set { speaker = value; }&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//auto props introduced in C#3&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//with private property is now immutable..however not quite as could change it in this class&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//if want to protect against this, then make a backing field with readonly like above&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; Speaker { &lt;span style="color:#0000ff"&gt;get&lt;/span&gt;; &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;set&lt;/span&gt;; }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; Greeter(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; speaker)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//this is referring to current object&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.Speaker = speaker;&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;asdf&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b3d797f1-1ea6-4652-b3d5-a13133f92af9" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;//field&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//generally speaking don&amp;#39;t give other classes access to your fields&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//can think of it as how it is storing state for the class&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//private string speaker;&lt;/span&gt;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//property.. this is public.. the behaviour&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//public string Speaker&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    get { return speaker; }&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    //we&amp;#39;ve got an immutable type.. something that can&amp;#39;t be changed after it is constructed&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    //immutable is nice as don&amp;#39;t need to worry about change of state&lt;/span&gt;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//    //value is a contextual keyword&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    set { speaker = value; }&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//auto props introduced in C#3&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//with private property is now immutable..however not quite as could change it in this class&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//if want to protect against this, then make a backing field with readonly like above&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; Speaker { &lt;span style="color:#0000ff"&gt;get&lt;/span&gt;; &lt;span style="color:#0000ff"&gt;set&lt;/span&gt;; }&lt;br&gt;     &lt;span style="color:#008000"&gt;//private readonly string speaker;&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//public string Speaker&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    get&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    {&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//        Console.WriteLine(&amp;quot;Returning speaker = &amp;quot; + speaker);&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//        return speaker;&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    }&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; Greeter(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; speaker)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.Speaker = speaker;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//public methods are part of the API&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; SayHello(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; recipient)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (recipient == &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;throw&lt;/span&gt; &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ArgumentNullException&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;recipient&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (Speaker == &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;)&lt;br&gt;         {   &lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#a31515"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; + recipient;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#a31515"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; + recipient + &lt;span style="color:#a31515"&gt;&amp;quot; from &amp;quot;&lt;/span&gt; + Speaker;&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;auto properties.&amp;#160; Backing fields.&lt;/p&gt;</Content>
      <Created>2012-05-20T14:04:01.2435-04:00</Created>
      <Modified>2012-05-20T14:32:15.759125-04:00</Modified>
      <EntryId>bd110f83-9804-4d7b-882e-1dc722ae449a</EntryId>
      <Description />
      <Title>Mastering C#–Properties</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c2d5a367-4577-47b5-87b0-80ae095e1512" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//adding a parameter&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; SayHello(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; recipient)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//return &amp;quot;Hello &amp;quot; + recipient;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;.Concat(&lt;span style="color:#a31515"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt;,recipient);&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt;  &lt;p&gt;compiled changes the + to a string.Concat&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a6ebda93-f76a-481d-b82b-b60a5d239741" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;GreeterTest&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SayHello_ReturnsHelloWithReceipientName()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt; greeter = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt;();&lt;br&gt;         &lt;span style="color:#008000"&gt;//adding an argument&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; greeting = greeter.SayHello(&lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Hello Jon&amp;quot;&lt;/span&gt;, greeting);&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:bb4bb6f1-47b7-450f-bff3-65fbb6accd8b" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#008000"&gt;//constructor is used to build an instance of a class, an object&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;//if no constructor the compiler will make one for us.&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;//which calls the base class constructor..&lt;/span&gt;&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; Greeter() : &lt;span style="color:#0000ff"&gt;base&lt;/span&gt;()&lt;br&gt; {&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;    &lt;p&gt;adding a constructor (ctor)&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b28a571d-f676-4c5a-8c8a-222f6e2191c1" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//a private field..if it is only set within the constructor then set it readonly&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//the = &amp;quot;asdf&amp;quot; is a variable initialiser&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; speaker = &lt;span style="color:#a31515"&gt;&amp;quot;Rob&amp;quot;&lt;/span&gt;;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; Greeter(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; speaker)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.speaker = speaker;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; SayHello(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; recipient)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#a31515"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; + recipient + &lt;span style="color:#a31515"&gt;&amp;quot; from &amp;quot;&lt;/span&gt; + speaker;&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;variable initialiser.. and readonly field&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4c34ccf0-00e0-4674-a824-b05f599b3914" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;GreeterTest&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SayHello_ReturnsHelloWithReceipientNameAndSpeakerName()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt; greeter = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;Rob&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; greeting = greeter.SayHello(&lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Hello Jon from Rob&amp;quot;&lt;/span&gt;, greeting);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; CanConstructingGreeterWithoutSpeakerName()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//null here... is a special kind of reference.. ie a blank piece of paper with directions to nowhere&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//it is not an empty string&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;null&lt;/span&gt;);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SayHello_ReturnsHelloWithReceipientNameButNoSpeakerName()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt; greeter = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt;(&lt;span style="color:#0000ff"&gt;null&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; greeting = greeter.SayHello(&lt;span style="color:#a31515"&gt;&amp;quot;Jon&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Hello Jon&amp;quot;&lt;/span&gt;, greeting);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SayHello_ThrowsExceptionWithNullReceipient()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt; greeter = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;Rob&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#008000"&gt;//Assert.Throws&amp;lt;ArgumentNullException&amp;gt;(() =&amp;gt; greeter.SayHello(null));&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.Throws(&lt;span style="color:#0000ff"&gt;typeof&lt;/span&gt; (&lt;span style="color:#2b91af"&gt;ArgumentNullException&lt;/span&gt;), &lt;span style="color:#0000ff"&gt;delegate&lt;/span&gt;&lt;br&gt;                                                           {&lt;br&gt;                                                               greeter.SayHello(&lt;span style="color:#0000ff"&gt;null&lt;/span&gt;);&lt;br&gt;                                                           });&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;null references.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:daea5a5d-ae5f-4b29-acf7-c2f6ac41d776" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#008000"&gt;//a private field..if it is only set within the constructor then set it readonly&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//the = &amp;quot;asdf&amp;quot; is a variable initialiser&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; speaker;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; Greeter(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; speaker)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.speaker = speaker;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; SayHello(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; recipient)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (recipient == &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;throw&lt;/span&gt; &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ArgumentNullException&lt;/span&gt;(&lt;span style="color:#a31515"&gt;&amp;quot;recipient&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (speaker == &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;)&lt;br&gt;         {   &lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#a31515"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; + recipient;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#a31515"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; + recipient + &lt;span style="color:#a31515"&gt;&amp;quot; from &amp;quot;&lt;/span&gt; + speaker;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;variable initialiser.&amp;#160; readonly fields – use where only set in the constructor&lt;/p&gt;</Content>
      <Created>2012-05-20T13:32:16.540375-04:00</Created>
      <Modified>2012-05-20T13:32:33.352875-04:00</Modified>
      <EntryId>e1094a33-fd51-4c0b-897d-31a2789cf9ff</EntryId>
      <Description />
      <Title>C# Jon Skeet–Methods Constructors and Exceptions</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;an assembly is a library or executable or website&lt;/p&gt;  &lt;p&gt;System.Core&amp;#160;&amp;#160; are the standard(ish) libraries..more general&lt;/p&gt;  &lt;p&gt;Microsoft.CSharp&amp;#160; .. are something lke the mono team would create their own ones..? eg Win32 specific..but mono would probably have to do a Microsoft.CSharp..&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/CJon-Skeet-VS-Environment_11EF9/image_2.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/CJon-Skeet-VS-Environment_11EF9/image_thumb.png" width="306" height="178" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Jon doesn’t like warnings.. there is a VS setting to make all warnings errors.&lt;/p&gt;    &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e61c7239-1189-48e8-be3e-c54f69118e8d" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#008000"&gt;//PascalCase&lt;/span&gt;&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;GreeterTest&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SayHello_ReturnsHello()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//declaring a variable of type Greeter.&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//calling the constructor&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//assign the value back from the constructor to greeter&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//the value of the greeter variable is &amp;#39;directions&amp;#39; to the Greeter... way of getting to the object&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//eg directions to house of a bit of paper&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//ie it is the reference type&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt; greeter = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt;();&lt;br&gt;         &lt;span style="color:#008000"&gt;//this has the same reference.. there is only 1 instance of greeter&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//the value isn&amp;#39;t the object&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt; theSameGreeter = greeter;&lt;br&gt;         &lt;span style="color:#008000"&gt;//camelCase&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//Greeter greeterOther;&lt;/span&gt;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//all types begin with Capital&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//string, int, unit, byte, object.. alias for full type name System.String ... int is to System.Int32 &lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//not Random&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//string (System.String) is a reference type&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; greeting = greeter.SayHello();&lt;br&gt;         &lt;span style="color:#008000"&gt;//passing in arguments.. a string literal&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;, greeting);&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;    &lt;p&gt;Jon describing in detail 3 lines of code.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:64adf30c-f56b-43c4-9e80-c749c4c50204" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; &lt;span style="color:#008000"&gt;//a class is a sort of blueprint of an object&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//some information&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//some associated behaviours&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//eg a house... &lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//colour walls are, colour windows are...&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//behaviour change colour, turn on heating&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Greeter&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//behaviour is usually in methods in c#&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; SayHello()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#a31515"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-19T22:03:06.8534359-04:00</Created>
      <Modified>2012-05-20T12:48:39.7435-04:00</Modified>
      <EntryId>bbbf20de-d517-4619-adf3-e89b025da68c</EntryId>
      <Description />
      <Title>C#–Jon Skeet VS Environment and First Class</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>