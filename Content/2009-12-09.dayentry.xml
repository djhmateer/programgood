<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2009-12-08T19:00:00-05:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt; &lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.amazon.com/Beginning-3-0-Introduction-Oriented-Programming/dp/0470261293/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1260380569&amp;sr=8-1"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="beginning" border="0" alt="beginning" src="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/beginning_3.jpg" width="201" height="244" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;This book looked interesting as it seemed to be written by someone with a lot of experience teaching.  Sometimes it is great to go back to basics, as there is always something new to learn, and I was so right!  Here are my notes, source code, screenshots.&lt;/p&gt;  &lt;h4&gt;Chapter 1 – Getting Started&lt;/h4&gt;  &lt;p&gt;setting up the IDE.. VS2008 Express.   And installing the MSDN library.. 2GB download here: &lt;a title="http://www.microsoft.com/downloads/details.aspx?FamilyID=7BBE5EDA-5062-4EBB-83C7-D3C5FF92A373&amp;displaylang=en" href="http://www.microsoft.com/downloads/details.aspx?FamilyID=7BBE5EDA-5062-4EBB-83C7-D3C5FF92A373&amp;displaylang=en"&gt;http://www.microsoft.com/downloads/details.aspx?FamilyID=7BBE5EDA-5062-4EBB-83C7-D3C5FF92A373&amp;displaylang=en&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Also a tool to take msdn into a chm help file: &lt;a title="http://www.codeplex.com/packagethis" href="http://www.codeplex.com/packagethis"&gt;http://www.codeplex.com/packagethis&lt;/a&gt;&lt;/p&gt;  &lt;h4&gt;Chapter 2 - Understanding Objects&lt;/h4&gt;  &lt;p&gt;Class eg Person.. a template used to describe an object    &lt;br /&gt;  properties..that describe the object     &lt;br /&gt;  methods.. or actions that we associate with the object &lt;/p&gt;  &lt;p&gt;Object eg the Person Object for Jack &lt;/p&gt;  &lt;p&gt;naming convention    &lt;br /&gt;  cls - class     &lt;br /&gt;  txt - textbob     &lt;br /&gt;  btn - button &lt;/p&gt;  &lt;p&gt;  good for selecting in the ide &lt;/p&gt;  &lt;p&gt;making a blank project    &lt;br /&gt;putting in references for winform:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;System, System.Drawing, System.Windows.Forms&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;putting in bootstrapper    &lt;br /&gt;change output to winform and tell which startup object asdf&lt;/p&gt;  &lt;p&gt;using System;    &lt;br /&gt;using System.Windows.Forms; &lt;/p&gt;  &lt;p&gt;public class frmMain : Form    &lt;br /&gt;{     &lt;br /&gt;    #region Windows code     &lt;br /&gt;    private void InitializeComponent()     &lt;br /&gt;    {     &lt;br /&gt;    }     &lt;br /&gt;    #endregion &lt;/p&gt;  &lt;p&gt;    public frmMain()    &lt;br /&gt;    {     &lt;br /&gt;        InitializeComponent();     &lt;br /&gt;    } &lt;/p&gt;  &lt;p&gt;    public static void Main()    &lt;br /&gt;    {     &lt;br /&gt;        frmMain main = new frmMain();     &lt;br /&gt;        Application.Run(main);     &lt;br /&gt;    } &lt;/p&gt;  &lt;p&gt;}&lt;/p&gt;  &lt;p&gt;3d on labels cool    &lt;br /&gt;making a default enter button (acceptbutton)     &lt;br /&gt;ctrl x and ctrl d shortcut keys with the ampersand on Text     &lt;br /&gt;True Type vs non fonts.. good to make things line up properly.&lt;/p&gt;  &lt;p&gt;**screenshot mailing label program&lt;/p&gt;  &lt;p&gt;**source code here too … c:\code\oopbook&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen_2.gif"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="screen" border="0" alt="screen" src="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen_thumb.gif" width="406" height="362" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt; &lt;/p&gt;  &lt;h1&gt;&lt;/h1&gt;  &lt;h4&gt;Part II – Understand C# Syntax&lt;/h4&gt;  &lt;h4&gt;Chapter 3 – Understanding Data Types&lt;/h4&gt;  &lt;p&gt;Integer Division    &lt;br /&gt;.Focus property when coming back from an error     &lt;br /&gt;Int.TryParse method to see if it really is an integer     &lt;br /&gt;.Visible proerty of a textbox &lt;/p&gt;  &lt;p&gt;Floating Point    &lt;br /&gt;AcceptButton     &lt;br /&gt;StartPosition - CenterScreen &lt;/p&gt;  &lt;p&gt;int    &lt;br /&gt;float - 32 bit.. F,f     &lt;br /&gt;double - 64 bit... this is the usual one.. D,d     &lt;br /&gt;Decimal - 128bit (28 digit precision)..  M,m&lt;/p&gt;  &lt;p&gt;eg int i = 0.5M&lt;/p&gt;  &lt;p&gt;**insert source code  c:\code\oopbook\ch3IntegerDivision\&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen1_2.gif"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="screen1" border="0" alt="screen1" src="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen1_thumb.gif" width="304" height="212" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Also Fahrehiegh converter:&lt;/p&gt;  &lt;p&gt;** put in source code link… c:\code\oopbook\ch3TempConvert&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen2_2.gif"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="screen2" border="0" alt="screen2" src="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen2_thumb.gif" width="302" height="167" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Interesting here was the use of consts…&lt;/p&gt;  &lt;p&gt;how a division takes up more cycles, so better not to do 5/9 but to put in the decimal equivalent.  The out.. focus when  coming back from an error.  And unhiding the results box when it needs to be.&lt;/p&gt;  &lt;p&gt;bool flag;    &lt;br /&gt;        double operand1;     &lt;br /&gt;        double answer;     &lt;br /&gt;        const double FIVENINTHS = 0.55555555;     &lt;br /&gt;        const double ZEROFAHRENHEIGHT = 32; &lt;/p&gt;  &lt;p&gt;        flag = double.TryParse(txtOperand1.Text, out operand1);    &lt;br /&gt;        if (flag == false)     &lt;br /&gt;        {     &lt;br /&gt;            MessageBox.Show("Enter a whole number", "Input Error");     &lt;br /&gt;            txtOperand1.Focus();     &lt;br /&gt;            return;     &lt;br /&gt;        } &lt;/p&gt;  &lt;p&gt;        answer = FIVENINTHS *(operand1 - ZEROFAHRENHEIGHT); &lt;/p&gt;  &lt;p&gt;        txtResult.Text = operand1.ToString() + " degressF "  + " equals " + answer.ToString() + " degreesC";    &lt;br /&gt;        txtResult.Visible = true;&lt;/p&gt;  &lt;h4&gt;Ch4 – Understanding C# Statements&lt;/h4&gt;  &lt;p&gt;operand   eg 10    &lt;br /&gt;operator eg +, -, *, /, % these are binary operators     &lt;br /&gt;  unary     &lt;br /&gt;  binary     &lt;br /&gt;  ternary &lt;/p&gt;  &lt;p&gt;expression    &lt;br /&gt;  one or more operands and their associated operator &lt;/p&gt;  &lt;p&gt;statements    &lt;br /&gt;  one or more expressions terminated by a semicolon. &lt;/p&gt;  &lt;p&gt;lvalue - location value.. memory address    &lt;br /&gt;rvalue - register value..actual value &lt;/p&gt;  &lt;p&gt;eg int i    &lt;br /&gt;this is defining a variable to be at address 900,000 ie lvalue     &lt;br /&gt;i = 10     &lt;br /&gt;this is declaring a variable to have an rvalue of 10 &lt;/p&gt;  &lt;p&gt;if narly bug, hardcode data into the textboxes to make it easy!    &lt;br /&gt;10 / 6 &lt;/p&gt;  &lt;p&gt;avoid magic numbers    &lt;br /&gt;use const &lt;/p&gt;  &lt;h4&gt;Ch5 - Reference Data Types&lt;/h4&gt;  &lt;p&gt;If you're not going to manipulate data with Maths, store it as a string. &lt;/p&gt;  &lt;p&gt;intellisense (expect in Resharper which is clearer)    &lt;br /&gt;  hand is a property     &lt;br /&gt;  diamond is a method&lt;/p&gt;  &lt;p&gt;Pass by reference vs Pass by Value&lt;/p&gt;  &lt;p&gt;Ctrl spacebar to give help on methods/props near current selection.&lt;/p&gt;  &lt;p&gt;**insert source…c:\code\oopbook\ch5StringTester&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen3_4.gif"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="screen3" border="0" alt="screen3" src="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen3_thumb_1.gif" width="732" height="498" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;Escape characters eg string message = “this is a \\ backlash, and this is a quote \””;&lt;/p&gt;  &lt;p&gt;String literals eg string message = @”Go the the c:\program files\ directory and”;&lt;/p&gt;  &lt;p&gt;DateTime reference Objects&lt;/p&gt;  &lt;p&gt;**upload source code** c:\code\oopbook\ch5DateTime&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen4_2.gif"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="screen4" border="0" alt="screen4" src="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen4_thumb.gif" width="730" height="493" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;Interesting code here is:&lt;/p&gt;  &lt;p&gt;txtLongDate.Text = myTime.ToString("D");&lt;/p&gt;  &lt;p&gt;Starting the app (everything gets populated automatically without having to press Test)&lt;/p&gt;  &lt;p&gt;public frmMain()    &lt;br /&gt;{     &lt;br /&gt;    // 2) place all the label, textbox and button objects in correct positions on the form and set their properties     &lt;br /&gt;    InitializeComponent();  &lt;br /&gt;    UpdateTimeInfo();  // 3) set the properties of the objects just created     &lt;br /&gt;} &lt;/p&gt;  &lt;p&gt;public static void Main()    &lt;br /&gt;{     &lt;br /&gt;    // 1) start here then this goes to constructor now everything is in memory ready to go     &lt;br /&gt;    frmMain main = new frmMain();  &lt;br /&gt;    Application.Run(main);  // 4) run the app     &lt;br /&gt;    MessageBox.Show("hello"); // 5) this would only be displayed when Close() is called.     &lt;br /&gt;}&lt;/p&gt;  &lt;h4&gt;Ch6 – Making Decisions In Code&lt;/h4&gt;  &lt;p&gt;20% of a programs time is spent in initial development&lt;/p&gt;  &lt;p&gt;80% of a programs time is spent in testing, debugging, and maintenance&lt;/p&gt;  &lt;p&gt;flag = int.TryParse(txtOperand1.Text, out operand1);&lt;/p&gt;  &lt;p&gt;don’t need to initialise operand1 to any value.. int operand1 is fine.&lt;/p&gt;  &lt;p&gt;**upload code ** c:\code\oopbook\ch6OddOrEven&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen5_2.gif"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="screen5" border="0" alt="screen5" src="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen5_thumb.gif" width="421" height="198" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Interesting here is the .Clear method after the check.&lt;/p&gt;  &lt;p&gt;MessageBox.Show("Enter a whole number", "Input Error");    &lt;br /&gt;        txtOperand1.Clear();     &lt;br /&gt;        txtOperand1.Focus();     &lt;br /&gt;        return;&lt;/p&gt;  &lt;h5&gt;Brackets Style:&lt;/h5&gt;  &lt;p&gt;K&amp;R (Kernighan and Ritchie… 1978 book on C)&lt;/p&gt;  &lt;p&gt;if (x == 2) {&lt;/p&gt;  &lt;p&gt;//do something&lt;/p&gt;  &lt;p&gt;}&lt;/p&gt;  &lt;p&gt;Other style:&lt;/p&gt;  &lt;p&gt;if (x == 2)&lt;/p&gt;  &lt;p&gt;{&lt;/p&gt;  &lt;p&gt;  //do something&lt;/p&gt;  &lt;p&gt;}&lt;/p&gt;  &lt;p&gt;or &lt;/p&gt;  &lt;p&gt;if (x == 2)&lt;/p&gt;  &lt;p&gt;  // do something&lt;/p&gt;  &lt;p&gt;the danger of the above is it’s easier to make a mistake like:&lt;/p&gt;  &lt;p&gt;if (x == 2);  // notice the semicolon!&lt;/p&gt;  &lt;p&gt;  //do something&lt;/p&gt;  &lt;p&gt;Nested If Statements / Cascading if statements&lt;/p&gt;  &lt;h5&gt;Switch&lt;/h5&gt;  &lt;p&gt;statements are better&lt;/p&gt;  &lt;p&gt;switch (expression1)&lt;/p&gt;  &lt;p&gt;{&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;case 1:&lt;/p&gt;    &lt;p&gt;// do stuff here&lt;/p&gt;    &lt;p&gt;break;&lt;/p&gt;    &lt;p&gt;case 2:&lt;/p&gt;    &lt;p&gt;// do other stuff&lt;/p&gt;    &lt;p&gt;break;&lt;/p&gt;    &lt;p&gt;default:&lt;/p&gt;    &lt;p&gt;// do the default stuff.&lt;/p&gt;    &lt;p&gt;break;&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;}&lt;/p&gt;  &lt;h4&gt;Ch7 Statement Repetition Using Loops&lt;/h4&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen1_4.gif"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="screen1" border="0" alt="screen1" src="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen1_thumb_1.gif" width="324" height="317" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;for (i = start; i &lt;= end; i++)   &lt;br /&gt;{    &lt;br /&gt;    // {0, 5} first argument and right-justify it in a field of five characters    &lt;br /&gt;    // {1,20} second argument and right-justify in a field of twenty characters    &lt;br /&gt;    buff = string.Format("{0, 5}{1, 20}", i, i*i);    &lt;br /&gt;    lstOutput.Items.Add(buff);    &lt;br /&gt;}&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;for loops – ideally suited for counting operations&lt;/p&gt;  &lt;p&gt;while loops are good for searching for a particular value in a set&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen6_2.gif"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="screen6" border="0" alt="screen6" src="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen6_thumb.gif" width="534" height="210" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;bucket = 1;   &lt;br /&gt;        for (int i = num; i &gt; 1; i--)    &lt;br /&gt;        {    &lt;br /&gt;            bucket *= i;    &lt;br /&gt;        }&lt;/p&gt;  &lt;p&gt;Don’t need to do the last factorial as it multiplies by 1, so leave i &gt; 1.&lt;/p&gt;  &lt;p&gt;Keyboard shortcut – F7 to view designer / view code&lt;/p&gt;  &lt;p&gt; &lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen7_2.gif"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="screen7" border="0" alt="screen7" src="http://www.programgood.net/content/binary/WindowsLiveWriter/Beg.0AnIntroductiontoObjectOrientedProgr_820F/screen7_thumb.gif" width="536" height="335" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Notice the currency here:&lt;/p&gt;  &lt;p&gt;buff = string.Format("{0,4}, {1,15:C}", i, assetIsWorth);   &lt;br /&gt;lblResults.Items.Add(buff);&lt;/p&gt;http://www.programgood.net/2009/12/14/ParameterPassingInCValueAndReferenceTypes.aspx</Content>
      <Created>2009-12-09T12:57:59.231-05:00</Created>
      <Modified>2009-12-23T11:44:52.501625-05:00</Modified>
      <EntryId>8e7876d9-cad0-4a57-a6ec-36cc42b13e36</EntryId>
      <Description />
      <Title>Beginning C# 3.0 – An Introduction to Object Oriented Programming</Title>
      <Categories>Beginning C# OOP;Object Oriented Programming</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>