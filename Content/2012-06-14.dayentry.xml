<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-06-13T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:6e7f00b9-5a0b-411a-9926-ecc42caf1435" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E26Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindRecurrance_GivenLongStringResultOf1Over7_ReturnLengthOfReccurance6()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E26&lt;/span&gt;.FindRecurrance(&lt;span style="color:#a31515"&gt;&amp;quot;14285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714285714&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(result, 6);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindRecurrance_Given7_Return6()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; x = &lt;span style="color:#2b91af"&gt;E26&lt;/span&gt;.GetRecurringCycle(7);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E26&lt;/span&gt;.FindRecurrance(x.ToString());&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(6, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//17 gives us recurring at 16 places&lt;/span&gt;&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindRecurrance_Given17_Return16()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; x = &lt;span style="color:#2b91af"&gt;E26&lt;/span&gt;.GetRecurringCycle(17);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E26&lt;/span&gt;.FindRecurrance(x.ToString());&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(16, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; PrintRecurringCyclesToConsole_GivenNothing_ReturnAllFrom1To1000ToScreen()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E26&lt;/span&gt;.PrintRecurringCycle();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; count = 1;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; number &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; result)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, count, number);&lt;br&gt;             count++;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.IsNotEmpty(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindLongestRecurringCycle_GiveNothing_ReturnResult()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E26&lt;/span&gt;.FindLongestRecurringCycleBelow1000();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(983, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindRecurrance_Given983_Return982()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; x = &lt;span style="color:#2b91af"&gt;E26&lt;/span&gt;.GetRecurringCycle(983);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E26&lt;/span&gt;.FindRecurrance(x.ToString());&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(982, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E26&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; FindLongestRecurringCycleBelow1000()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberOfDigitsOfLongestRecurrance = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; denominatorOfLongestRecurrance = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; d = 2; d &amp;lt; 1000; d++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; bigNumber = &lt;span style="color:#2b91af"&gt;E26&lt;/span&gt;.GetRecurringCycle(d);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberOfDigitsOfReccurrance = &lt;span style="color:#2b91af"&gt;E26&lt;/span&gt;.FindRecurrance(bigNumber.ToString());&lt;br&gt;             &lt;span style="color:#008000"&gt;//Console.WriteLine(&amp;quot;d:{0}, numberOfDigitsOfReccurrance: {1}, number:{2}&amp;quot;, d, numberOfDigitsOfReccurrance, bigNumber.ToString());&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (numberOfDigitsOfReccurrance &amp;gt;= numberOfDigitsOfLongestRecurrance)&lt;br&gt;             {&lt;br&gt;                 numberOfDigitsOfLongestRecurrance = numberOfDigitsOfReccurrance;&lt;br&gt;                 denominatorOfLongestRecurrance = d;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; bigNumber2 = &lt;span style="color:#2b91af"&gt;E26&lt;/span&gt;.GetRecurringCycle(denominatorOfLongestRecurrance);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberOfDigitsOfReccurrance2 = &lt;span style="color:#2b91af"&gt;E26&lt;/span&gt;.FindRecurrance(bigNumber2.ToString());&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;i:{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;, occurranceLength: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;, number:{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;2}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, denominatorOfLongestRecurrance, numberOfDigitsOfReccurrance2, bigNumber2.ToString());&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; denominatorOfLongestRecurrance;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; FindRecurrance(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; s)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//make chunks doubled up so as they &amp;#39;repeat&amp;#39;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] array = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[(s.Length / 2) - 1];&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; (s.Length / 2) - 1; i++)&lt;br&gt;         {&lt;br&gt;             array[i] = s.Substring(0, i + 1);&lt;br&gt;             array[i] += s.Substring(0, i + 1);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//problem here is for lower numbers need to check for for lower group lengths&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//but then on higher numbers then chances of finding that group length will give false postives&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//3 gives all tests passing&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 3; i &amp;lt; array.Length; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//if contains the chunk doubled up&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (s.Contains(array[i]))&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; i + 1;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 0;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IEnumerable&lt;/span&gt; PrintRecurringCycle()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;IList&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt;&amp;gt; list = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt;&amp;gt;();&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 1000; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = GetRecurringCycle(i);&lt;br&gt;             &lt;span style="color:#008000"&gt;//Console.WriteLine(&amp;quot;i: {0} number: {1}&amp;quot;, i, result);&lt;/span&gt;&lt;br&gt;             list.Add(result);&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; list;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; GetRecurringCycle(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; denominator)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; number = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; x = &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt;.Pow(10, 2000);&lt;br&gt;         number = x / denominator;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; number;&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;/*&lt;/span&gt;&lt;br&gt;  &lt;span style="color:#008000"&gt;* A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;1/2    =     0.5&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;1/3    =     0.(3)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;1/4    =     0.25&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;1/5    =     0.2&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;1/6    =     0.1(6)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;1/7    =     0.(142857)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;1/8    =     0.125&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;1/9    =     0.(1)&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;1/10    =     0.1&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;Find the value of d&amp;lt;1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.&lt;/span&gt;&lt;br&gt;  &lt;span style="color:#008000"&gt;*/&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;This had a tricky bug in it.. important to:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;have test cases with higher numbers in it (was getting false positives)&lt;/li&gt;    &lt;li&gt;have more test cases&lt;/li&gt;    &lt;li&gt;have quick feedback cycles (NCrunch good for this)&lt;/li&gt;    &lt;li&gt;put comments in more complex pieces of code and name variables well&lt;/li&gt; &lt;/ul&gt;</Content>
      <Created>2012-06-14T10:43:30.3268502-04:00</Created>
      <Modified>2012-06-14T10:43:30.3268502-04:00</Modified>
      <EntryId>be14de3e-00dc-4c54-ab0d-37320d4cc325</EntryId>
      <Description />
      <Title>Euler 26–Fractions</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ec71e0bb-d001-4168-8e71-246b85dc3e3e" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E27Tests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPrime_GivenPrimesAndNonPrimes_ReturnAnswers()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;true&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;E27&lt;/span&gt;.IsPrime(3));&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;true&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;E27&lt;/span&gt;.IsPrime(5));&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;true&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;E27&lt;/span&gt;.IsPrime(7));&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;true&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;E27&lt;/span&gt;.IsPrime(11));&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;true&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;E27&lt;/span&gt;.IsPrime(17));&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;true&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;E27&lt;/span&gt;.IsPrime(23));&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;false&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;E27&lt;/span&gt;.IsPrime(4));&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;false&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;E27&lt;/span&gt;.IsPrime(10));&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;false&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;E27&lt;/span&gt;.IsPrime(15));&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;false&lt;/span&gt;, &lt;span style="color:#2b91af"&gt;E27&lt;/span&gt;.IsPrime(20));&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; NumberOfPrimes_Given1And41_Return40()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberOfPrimes = &lt;span style="color:#2b91af"&gt;E27&lt;/span&gt;.NumberOfPrimes(1, 41);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(40, numberOfPrimes);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; NumberOfPrimes_GivenMinus79And1601_Return80()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberOfPrimes = &lt;span style="color:#2b91af"&gt;E27&lt;/span&gt;.NumberOfPrimes(-79, 1601);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(80, numberOfPrimes);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#008000"&gt;//this is the answer&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; NumberOfPrimes_GivenMinus61And97_Return62()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberOfPrimes = &lt;span style="color:#2b91af"&gt;E27&lt;/span&gt;.NumberOfPrimes(-61, 971);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(71, numberOfPrimes);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; MaxNumberOfPrimes_GivenNothing_Returnanswer()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E27&lt;/span&gt;.MaxNumberOfPrimes();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(71, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E27&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; MaxNumberOfPrimes()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; maxA = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; maxB = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; largestNumberOfPrimes = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a = -1000; a &amp;lt; 1000; a++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; b = -1000; b &amp;lt; 1000; b++)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = NumberOfPrimes(a, b);&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (result &amp;gt; largestNumberOfPrimes)&lt;br&gt;                     {&lt;br&gt;                         largestNumberOfPrimes = result;&lt;br&gt;                         maxA = a;&lt;br&gt;                         maxB = b;&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; largestNumberOfPrimes;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; NumberOfPrimes(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; b)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; countOfPrimes = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10000; i++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Abs((i * i) + (a * i) + b);&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsPrime(result))&lt;br&gt;                 {&lt;br&gt;                     countOfPrimes++;&lt;br&gt;                 }&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;else&lt;/span&gt;&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfPrimes;&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; countOfPrimes;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsPrime(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//a number is prime if it can divide only by itself and 1 without a remainder&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 2; i &amp;lt;= &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(number); i++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (number % i == 0)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt;     &lt;span style="color:#008000"&gt;/*&lt;/span&gt;&lt;br&gt;      &lt;span style="color:#008000"&gt;* Euler published the remarkable quadratic formula:&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;n? + n + 41&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;It turns out that the formula will produce 40 primes for the consecutive values n = 0 to 39. &lt;/span&gt;&lt;br&gt;      &lt;span style="color:#008000"&gt;* However, when n = 40, 402 + 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and certainly&lt;/span&gt;&lt;br&gt;      &lt;span style="color:#008000"&gt;* when n = 41, 41? + 41 + 41 is clearly divisible by 41.&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;Using computers, the incredible formula  n? - 79n + 1601 was discovered, which produces 80 primes for the consecutive values n = 0 to 79. &lt;/span&gt;&lt;br&gt;      &lt;span style="color:#008000"&gt;* The product of the coefficients, -79 and 1601, is -126479.&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;Considering quadratics of the form:&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;n? + an + b, where |a|&amp;lt;1000 and |b|&amp;lt;1000&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;where |n| is the modulus/absolute value of n&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;e.g. |11| = 11 and |-4| = 4&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes&lt;/span&gt;&lt;br&gt;      &lt;span style="color:#008000"&gt;* for consecutive values of n, starting with n = 0.&lt;/span&gt;&lt;br&gt;      &lt;span style="color:#008000"&gt;*/&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Tricky due to Maths language of question.&lt;/p&gt;</Content>
      <Created>2012-06-14T13:27:08.0233315-04:00</Created>
      <Modified>2012-06-14T13:27:08.0233315-04:00</Modified>
      <EntryId>b96aefd5-b5bc-4cce-86b6-4ad4f254b4fb</EntryId>
      <Description />
      <Title>Euler 27–Quadratics</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>