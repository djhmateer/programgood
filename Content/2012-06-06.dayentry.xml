<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-06-05T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;Path through a triangle of numbers&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a8fea190-e165-4792-8059-c17765e5f9c5" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;ScratchTests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; MaximumTotalTopToBottomInTestTriangle_Go_ShouldReturn23()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Scratch&lt;/span&gt;.GetAnswerForTestTriangle();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(23, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; MaximumTotalTopToBottomInBigTriangle_Go_ShouldReturnAnwser()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Scratch&lt;/span&gt;.GetAnswerForBigTriangle();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(23, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; BuildArrayFromList_GivenData_GetArrayBackInFormatWeWant()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[,] result = &lt;span style="color:#2b91af"&gt;Scratch&lt;/span&gt;.BuildTestArrayFromList();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(3, result[0, 3]);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Scratch&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[,] BuildTestArrayFromList()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[,] array = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[4, 7];&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfInts1 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 3 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfInts2 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 7, 4 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfInts3 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 2, 4, 6 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfInts4 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 8, 5, 9, 3 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfListOfInts = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;&amp;gt;() { listOfInts1, listOfInts2, listOfInts3, listOfInts4 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; row = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberOfColumns = array.GetLength(1);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; column = numberOfColumns / 2;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; list &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; listOfListOfInts)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; startingColumn = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; list)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (startingColumn == 0)&lt;br&gt;                 {&lt;br&gt;                     startingColumn = column;&lt;br&gt;                 }&lt;br&gt;                 array[row, column] = number;&lt;br&gt;                 column = column + 2;&lt;br&gt;             }&lt;br&gt;             column = startingColumn - 1;&lt;br&gt;             row++;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; array;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[,] BuildArrayFromList()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[,] array = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[15, 29];&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfInts1 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 75 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfInts2 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 95,64 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfInts3 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 17,47,82 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfInts4 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 18,35,87,10 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; x5 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 20,04,82,47,65 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; x6 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 19,01,23,75,03,34 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; x7 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 88,02,77,73,07,63,67 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; x8 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 99,65,04,28,06,16,70,92 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; x9 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() { 41,41,26,56,83,40,80,70,33 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; x10 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() {41,48,72,33,47,32,37,16,94,29};&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; x11 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() {53,71,44,65,25,43,91,52,97,51,17};&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; x12 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() {70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57};&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; x13 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() {91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48};&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; x14 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() {63, 66, 04, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31};&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; x15 = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() {04, 62, 98, 27, 23, 09, 70, 98, 73, 93, 38, 53, 60, 04, 23};&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfListOfInts = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;&amp;gt;() { listOfInts1, listOfInts2, listOfInts3, listOfInts4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15 };&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; row = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberOfColumns = array.GetLength(1);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; column = numberOfColumns / 2;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; list &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; listOfListOfInts)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; startingColumn = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; list)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (startingColumn == 0)&lt;br&gt;                 {&lt;br&gt;                     startingColumn = column;&lt;br&gt;                 }&lt;br&gt;                 array[row, column] = number;&lt;br&gt;                 column = column + 2;&lt;br&gt;             }&lt;br&gt;             column = startingColumn - 1;&lt;br&gt;             row++;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; array;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; GetAnswerForTestTriangle()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//4 rows, 7 &amp;#39;columns&amp;#39;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//int[,] array = new int[4, 7];&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//array[0, 3] = 3;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//array[1, 2] = 7;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//array[1, 4] = 4;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//array[2, 1] = 2;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//array[2, 3] = 4;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//array[2, 5] = 6;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//array[3, 0] = 8;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//array[3, 2] = 5;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//array[3, 4] = 9;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//array[3, 6] = 3;&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[,] array = BuildTestArrayFromList();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Scratch&lt;/span&gt;.MaximumTotalInTriangle(array);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; GetAnswerForBigTriangle()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[,] array = BuildArrayFromList();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;Scratch&lt;/span&gt;.MaximumTotalInTriangle(array);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//recursion?&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//remember routes taken already? eg lrllr  for left right etc..&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; MaximumTotalInTriangle(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[,] array)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; random = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Random&lt;/span&gt;();&lt;br&gt;         &lt;span style="color:#008000"&gt;//4 rows, 7 columns for testTriangle&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberOfRows = array.GetLength(0);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numberOfColumns = array.GetLength(1);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; biggestSumSoFar = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; 1000000; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; sum = 0;&lt;br&gt;             &lt;span style="color:#008000"&gt;//int column = 3; **could be an issue here&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; column = numberOfColumns / 2;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; row = 0; row &amp;lt; numberOfRows; row++)&lt;br&gt;             {&lt;br&gt;                 sum += array[row, column];&lt;br&gt; &lt;br&gt;                 &lt;span style="color:#008000"&gt;//final row&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (row != numberOfRows - 1)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; rand = random.Next(1, 3);&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (rand == 1)&lt;br&gt;                     {&lt;br&gt;                         column--;&lt;br&gt;                     }&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;else&lt;/span&gt;&lt;br&gt;                     {&lt;br&gt;                         column++;&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (sum &amp;gt; biggestSumSoFar)&lt;br&gt;             {&lt;br&gt;                 biggestSumSoFar = sum;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; biggestSumSoFar;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;better way of making a listOfLists by just adding lists straight away and not needing intermediate variables eg x1&lt;/p&gt;  &lt;p&gt;&lt;a href="http://stackoverflow.com/questions/10925261/adding-many-lists/10925616#10925616"&gt;http://stackoverflow.com/questions/10925261/adding-many-lists/10925616#10925616&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Looks like a lot of people used recursion (a tree, so good fit).&amp;#160; And also used arrays instead of lists.&lt;/p&gt;</Content>
      <Created>2012-06-06T18:51:38.78675-04:00</Created>
      <Modified>2012-06-07T15:42:41.046875-04:00</Modified>
      <EntryId>787dac4f-20ef-4d44-8fb6-69da7542ab5e</EntryId>
      <Description />
      <Title>Euler 18</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>