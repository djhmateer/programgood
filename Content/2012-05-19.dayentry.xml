<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-05-18T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;When constructors get out of control and Factory gets cumbersome.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c4dd083d-5bad-428e-bb01-ac6ab857b1db" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; [&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BuilderTests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; BuilderPattern()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Period&lt;/span&gt; period = &lt;span style="color:#2b91af"&gt;Period&lt;/span&gt;.FromHours(5);&lt;br&gt;             &lt;span style="color:#008000"&gt;//gets longwinded&lt;/span&gt;&lt;br&gt;             period = &lt;span style="color:#2b91af"&gt;Period&lt;/span&gt;.FromHours(5) + &lt;span style="color:#2b91af"&gt;Period&lt;/span&gt;.FromMinutes(3);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//mandatory stuff in constructor&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//eg if this were an EmailBuilder then to, from etc..&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//PeriodBuilder builder = new PeriodBuilder();&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;////option stuff&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//builder.Hours = 5;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//builder.Minutes = 3;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//Period built = builder.Build();&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//using object initialiser syntax C#3&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Period&lt;/span&gt; built = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;PeriodBuilder&lt;/span&gt; { Hours = 5, Minutes = 3 }.Build();&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//this wont change anything&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//builder.Seconds = 10;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(0, built.Seconds);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(built, period);&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-19T12:33:42.3690609-04:00</Created>
      <Modified>2012-05-19T12:33:42.3690609-04:00</Modified>
      <EntryId>9cb222d4-ec06-495b-b053-e5fa1b84cbb2</EntryId>
      <Description />
      <Title>Tekpub–Jon Skeet–Builder Pattern</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b2504b65-04a9-4688-8199-172f125192c5" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; &lt;span style="color:#008000"&gt;//this is an immutable type&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;sealed&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Point&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//field&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; y;&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//property&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; X { &lt;span style="color:#0000ff"&gt;get&lt;/span&gt; { &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; x; } }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; Y { &lt;span style="color:#0000ff"&gt;get&lt;/span&gt; { &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; y; } }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; Point(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; y)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.x = x;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.y = y;&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;asdf&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:12c200af-5eea-46af-8736-27f8f8605850" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;struct&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BadDuration&lt;/span&gt;&lt;br&gt;    {&lt;br&gt;        &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; seconds;&lt;br&gt;        &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; milliseconds;&lt;br&gt;        &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; ticks;&lt;br&gt; &lt;br&gt;        &lt;span style="color:#008000"&gt;//multiple constructors are a code smell and can mean you&amp;#39;re trying to do too much with a single class or struct&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; BadDuration(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; ticks)&lt;br&gt;        {&lt;br&gt;            &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.ticks = ticks;&lt;br&gt;        }&lt;br&gt; &lt;br&gt;        &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; BadDuration(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; milliseconds)&lt;br&gt;        {&lt;br&gt;            &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.ticks = milliseconds * 10000;&lt;br&gt;        }&lt;br&gt; &lt;br&gt;        &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; BadDuration(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; seconds)&lt;br&gt;        {&lt;br&gt;            &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.ticks = seconds * 10000 * 1000;&lt;br&gt;        }&lt;br&gt;    }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;wont compile as signatures are the same eg all are longs&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:08fcb9d4-9114-4244-b302-6180c6d9e4c2" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;struct&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BadDuration&lt;/span&gt;&lt;br&gt;    {&lt;br&gt;        &lt;span style="color:#008000"&gt;//fields&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;//private readonly long seconds;&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#008000"&gt;//private readonly long milliseconds;&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;readonly&lt;/span&gt; &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; ticks;&lt;br&gt; &lt;br&gt;        &lt;span style="color:#008000"&gt;//property&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;long&lt;/span&gt; Ticks { &lt;span style="color:#0000ff"&gt;get&lt;/span&gt; { &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; ticks; } }&lt;br&gt; &lt;br&gt;        &lt;span style="color:#008000"&gt;//this works in a class.. sort of immutable&lt;/span&gt;&lt;br&gt; &lt;br&gt;        &lt;span style="color:#008000"&gt;//multiple constructors are a code smell and can mean you&amp;#39;re trying to do too much with a single class or struct&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; BadDuration(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; ticks)&lt;br&gt;        {&lt;br&gt;            &lt;span style="color:#0000ff"&gt;this&lt;/span&gt;.ticks = ticks;&lt;br&gt;        }&lt;br&gt;         &lt;br&gt;        &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BadDuration&lt;/span&gt; FromTicks(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; ticks)&lt;br&gt;        {&lt;br&gt;            &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BadDuration&lt;/span&gt;(ticks);&lt;br&gt;        }&lt;br&gt; &lt;br&gt;        &lt;span style="color:#008000"&gt;//the classic Factory pattern that can help clear up a constructor overload mess.  downside is requires a knowledge of your api.&lt;/span&gt;&lt;br&gt;        &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BadDuration&lt;/span&gt; FromMilliseconds(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; milliseconds)&lt;br&gt;        {&lt;br&gt;            &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BadDuration&lt;/span&gt;(milliseconds * 10000);&lt;br&gt;        }&lt;br&gt; &lt;br&gt;        &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BadDuration&lt;/span&gt; FromSeconds(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; seconds)&lt;br&gt;        {&lt;br&gt;            &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BadDuration&lt;/span&gt;(seconds * 10000 * 1000);&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//immutable - state cannot be modified after it has been created&lt;/span&gt;&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;SimpleImmutability&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FromSeconds()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;BadDuration&lt;/span&gt; duration = &lt;span style="color:#2b91af"&gt;BadDuration&lt;/span&gt;.FromMilliseconds(5);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(50000, duration.Ticks);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Ticks()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;BadDuration&lt;/span&gt; duration = &lt;span style="color:#2b91af"&gt;BadDuration&lt;/span&gt;.FromTicks(10);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(10, duration.Ticks);&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;very interesting code with with classic Factory pattern.&amp;#160; Very nice way of easily making objects.&lt;/p&gt;</Content>
      <Created>2012-05-18T22:39:06.4375-04:00</Created>
      <Modified>2012-05-18T22:39:06.4375-04:00</Modified>
      <EntryId>e4065768-8468-4a93-b10b-01517da211b4</EntryId>
      <Description />
      <Title>Tekpub8–Jon Skeet–Factory Pattern</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;SOLID Principles (Uncle Bob)&lt;/p&gt;  &lt;p&gt;Single Responsibility – Epi 6&lt;/p&gt;  &lt;p&gt;Open / Closed – 7&lt;/p&gt;  &lt;p&gt;Liskov Substitution – 7&lt;/p&gt;  &lt;p&gt;Interface Segregation – 2&lt;/p&gt;  &lt;p&gt;Dependency Inversion – 3 and 4&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;h2&gt;Open/Closed Principle&lt;/h2&gt;  &lt;p&gt;Change is inevitable in software, but when we change this chaotically we get chaotic results.&lt;/p&gt;  &lt;p&gt;Must easier to think of complex system of small bits, which are tested well, then we put them together.&lt;/p&gt;  &lt;p&gt;When a class is ‘done’.. it is &lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Open for extension&lt;/li&gt;    &lt;li&gt;Closed for modification&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;ie don’t touch stuff that works&lt;/p&gt;  &lt;p&gt;maybe derived from class… or chage source code of class… just don’t change behaviour&lt;/p&gt;  &lt;h2&gt;Barbara Liskovs Substitution Principle&lt;/h2&gt;  &lt;p&gt;all about inheritance.&lt;/p&gt;  &lt;p&gt;eg I should be able to use any implementation of IClock without knowing which one I’m using&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Software engineering is a tradeoff… pragmatic rather than dogmatic&lt;/p&gt;  &lt;p&gt;Jon – inheritance should be used judiciously!&lt;/p&gt;  &lt;p&gt;internal and sealed classes….&lt;/p&gt;  &lt;p&gt;System.Web is notorious for hiding classes making is very difficult to test&lt;/p&gt;  &lt;p&gt;HttpContext has caused many sleepless nights.&lt;/p&gt;  &lt;p&gt;“Deisgn for inheritance or prohibit it”&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2d0104ae-9481-4936-8b3d-d36ac762dca4" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Point&lt;/span&gt;&lt;br&gt;  {&lt;br&gt;      &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; X { &lt;span style="color:#0000ff"&gt;get&lt;/span&gt;; &lt;span style="color:#0000ff"&gt;set&lt;/span&gt;; }&lt;br&gt;      &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; Y { &lt;span style="color:#0000ff"&gt;get&lt;/span&gt;; &lt;span style="color:#0000ff"&gt;set&lt;/span&gt;; }&lt;br&gt;  }&lt;br&gt; &lt;br&gt;  &lt;span style="color:#008000"&gt;//I haven&amp;#39;t put the time into figuring out what this class should do under&lt;/span&gt;&lt;br&gt;  &lt;span style="color:#008000"&gt;//inheritance&lt;/span&gt;&lt;br&gt;  &lt;span style="color:#008000"&gt;//public sealed class Liskov&lt;/span&gt;&lt;br&gt;  &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Liskov&lt;/span&gt;&lt;br&gt;  {&lt;br&gt;      &lt;span style="color:#008000"&gt;//Virtual methods and properties in base classes &lt;/span&gt;&lt;br&gt;      &lt;span style="color:#008000"&gt;//REQUIRE derived classes to use the ?override? keyword when, well, overriding said methods and properties&lt;/span&gt;&lt;br&gt; &lt;br&gt;      &lt;span style="color:#008000"&gt;//document what it does, not how it achieves it&lt;/span&gt;&lt;br&gt;      &lt;span style="color:#008000"&gt;//ignoring derived.. Foo is going to return hello, Bar is going to return hello there&lt;/span&gt;&lt;br&gt;      &lt;span style="color:#008000"&gt;//noone else should care&lt;/span&gt;&lt;br&gt;      &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;virtual&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; FormatPoint(&lt;span style="color:#2b91af"&gt;Point&lt;/span&gt; point)&lt;br&gt;      {&lt;br&gt;          &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; FormatPoint(point.X, point.Y);&lt;br&gt;      }&lt;br&gt; &lt;br&gt;      &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;virtual&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; FormatPoint(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; y)&lt;br&gt;      {&lt;br&gt;          &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;.Format(&lt;span style="color:#a31515"&gt;&amp;quot;x={&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;, y={&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, x, y);&lt;br&gt;      }&lt;br&gt;  }&lt;br&gt; &lt;br&gt;  &lt;span style="color:#008000"&gt;//person deriving here, won&amp;#39;t know they&amp;#39;ve changed Bars behaviour too&lt;/span&gt;&lt;br&gt;  &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Breakage&lt;/span&gt; : &lt;span style="color:#2b91af"&gt;Liskov&lt;/span&gt;&lt;br&gt;  {&lt;br&gt;      &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;override&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; FormatPoint(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; y)&lt;br&gt;      {&lt;br&gt;          &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;base&lt;/span&gt;.FormatPoint(x, y) + &lt;span style="color:#a31515"&gt;&amp;quot;&amp;lt;====&amp;quot;&lt;/span&gt;;&lt;br&gt;      }&lt;br&gt;  }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-18T22:16:14.828125-04:00</Created>
      <Modified>2012-05-18T22:16:14.828125-04:00</Modified>
      <EntryId>80a44ba0-6ba6-4ad4-8c2e-16e846b674f3</EntryId>
      <Description />
      <Title>Tekpub 7–Jon Skeet–Open/Closed Principle and Liskov Substitution</Title>
      <Categories />
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;Designing types and using types.&lt;/p&gt;  &lt;p&gt;“Single Responsibility Principle” every class should be responsible for only one thing.&amp;#160; Part of this is being completely clear about what the class does&lt;/p&gt;  &lt;p&gt;Try to have types that represent what you want them to.&lt;/p&gt;  &lt;p&gt;Summary for DateTime:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;can’t represent just a date&lt;/li&gt;    &lt;li&gt;can’t represent just a time of day&lt;/li&gt;    &lt;li&gt;got to use same time whether universal time, this computer, another timezone&lt;/li&gt; &lt;/ul&gt;</Content>
      <Created>2012-05-18T21:27:16.515625-04:00</Created>
      <Modified>2012-05-18T21:27:16.515625-04:00</Modified>
      <EntryId>8c565a08-afc9-49b7-a0b1-a7efda897655</EntryId>
      <Description />
      <Title>Tekpub 6–Jon Skeet–Single Responsibility and Type Meaning</Title>
      <Categories>JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;Supposed to be the introduction episode &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://www.programgood.net/content/binary/Windows-Live-Writer/29d7293f30dc_C366/wlEmoticon-smile_2.png" /&gt;&lt;/p&gt;  &lt;h2&gt;Dynamic&lt;/h2&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:64f7a965-b356-44e1-b6dd-c29f8606726b" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] args)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;object&lt;/span&gt; x = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;             &lt;span style="color:#008000"&gt;//will give an InvalidCastException at runtime&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y = (&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;) x;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(y.Length);&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f5a82609-b590-4871-b2eb-6f439f6fa5cd" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 500px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;object&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y = (&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;) x;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(y.Length);&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;gives answer of 5&lt;/p&gt;  &lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d154d44a-01fe-4346-ad33-cddfe410c9ca" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;object&lt;/span&gt; x = &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;;&lt;br&gt;             &lt;span style="color:#008000"&gt;//we can cast a null reference&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y = (&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;)x;&lt;br&gt;             &lt;span style="color:#008000"&gt;//but we cant dereference it..get a nullReferenceException&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(y.Length);&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt;  &lt;p&gt;sdf&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ccf3e83e-09cb-4b0a-8a97-5c9a0cbfccdc" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#008000"&gt;//don&amp;#39;t think of x at any type... sort out at execution time&lt;/span&gt;&lt;br&gt; &lt;span style="color:#0000ff"&gt;dynamic&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;br&gt; &lt;span style="color:#008000"&gt;//5&lt;/span&gt;&lt;br&gt; &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(x.Length);&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;//an array&lt;/span&gt;&lt;br&gt; x = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt;[] {10, 20, 30 };&lt;br&gt; &lt;span style="color:#008000"&gt;//3&lt;/span&gt;&lt;br&gt; &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(x.Length);&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;from&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5191df73-7849-4858-91dd-2f91cf754dfd" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; x = 123;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; y = 10;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(x-y);&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/29d7293f30dc_C366/image_2.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/29d7293f30dc_C366/image_thumb.png" width="533" height="512" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;using ildasm to disassemble the debug assembly.&amp;#160; The nop statements are for debug.&lt;/p&gt;  &lt;p&gt;This is op code (IL).. i4 is like int32&lt;/p&gt;  &lt;p&gt;load 123 and put into stack position 0&lt;/p&gt;  &lt;p&gt;load 10 and put into stack position 1&lt;/p&gt;  &lt;p&gt;then put into dynamic types&lt;/p&gt;    &lt;h2&gt;Named Arguments&lt;/h2&gt;  &lt;p&gt;Whats an argument and whats a parameter?&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b4dac9ec-2f0d-4d1b-b1b9-c8e423a803dc" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;    &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] args)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//provide an argument&lt;/span&gt;&lt;br&gt;         Foo(&lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//x is a parameter&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Foo(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(x);&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/29d7293f30dc_C366/image_4.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/29d7293f30dc_C366/image_thumb_1.png" width="270" height="353" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Got it the wrong way round.. hard to tell which is which in MessageBox.Show&lt;/p&gt;    &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:23b168ab-1590-4db7-8367-b86e9c979516" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] args)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//named argument C#4&lt;/span&gt;&lt;br&gt;             Foo(x: &lt;span style="color:#a31515"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;, y:&lt;span style="color:#a31515"&gt;&amp;quot;Rob&amp;quot;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#008000"&gt;//referenced System.Windows.Forms&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;MessageBox&lt;/span&gt;.Show(caption:&lt;span style="color:#a31515"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;, text:&lt;span style="color:#a31515"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//x is a parameter&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Foo(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x, &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(x + &lt;span style="color:#a31515"&gt;&amp;quot; &amp;quot;&lt;/span&gt; + y);&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;better!&lt;/p&gt;  &lt;h2&gt;Optional Parameters&lt;/h2&gt;  &lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:af2b379f-46a9-43a6-bd15-e8c4cdb74cdc" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;    &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] args)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//named arguments&lt;/span&gt;&lt;br&gt;         Foo(y: &lt;span style="color:#a31515"&gt;&amp;quot;Rob&amp;quot;&lt;/span&gt;);&lt;br&gt;         Foo(y: &lt;span style="color:#a31515"&gt;&amp;quot;Dave&amp;quot;&lt;/span&gt;);&lt;br&gt;         Foo(y: &lt;span style="color:#a31515"&gt;&amp;quot;Mike&amp;quot;&lt;/span&gt;);&lt;br&gt;         Foo(y: &lt;span style="color:#a31515"&gt;&amp;quot;Bill&amp;quot;&lt;/span&gt;);&lt;br&gt;         Foo(&lt;span style="color:#a31515"&gt;&amp;quot;Hi&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;Anders&amp;quot;&lt;/span&gt;);&lt;br&gt;         Foo();&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//optional parameters&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//if first parameter is optional all have to be&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Foo(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; x = &lt;span style="color:#a31515"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;, &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; y = &lt;span style="color:#a31515"&gt;&amp;quot;Everone&amp;quot;&lt;/span&gt;)&lt;br&gt;     { &lt;br&gt;         &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(x + &lt;span style="color:#a31515"&gt;&amp;quot; &amp;quot;&lt;/span&gt; + y);&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt;  &lt;h2&gt;Covariance and Contravariance&lt;/h2&gt;  &lt;p&gt;Some code here.. poster child of the more used covariance is IEnumerable&amp;lt;T&amp;gt;.. look for out keword.&amp;#160; And it is to do with hierarchies.&lt;/p&gt;  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e1a928d3-bffc-47df-b173-ef3b54e9eceb" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Fruit&lt;/span&gt; { }&lt;br&gt;     &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Banana&lt;/span&gt; : &lt;span style="color:#2b91af"&gt;Fruit&lt;/span&gt; { }&lt;br&gt;     &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Apple&lt;/span&gt; : &lt;span style="color:#2b91af"&gt;Fruit&lt;/span&gt; { }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//interface IEnumerable&amp;lt;out T&amp;gt;&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    IEnumerator&amp;lt;T&amp;gt; GetEnumerator();&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//interface IEnumerator&amp;lt;out T&amp;gt; : IDisposable&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//{&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    T Current { get; }&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    bool MoveNext();&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//    void Reset();&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//}&lt;/span&gt;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//covariance values coming out of an interface&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#008000"&gt;//usually happens with IEnumerable of T&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;interface&lt;/span&gt; &lt;span style="color:#2b91af"&gt;IFoo&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;out&lt;/span&gt; T&amp;gt;&lt;br&gt;     {&lt;br&gt;         T GiveMeAnInstanceOfT();&lt;br&gt;         &lt;span style="color:#008000"&gt;//void TakeanInstanceOfT(T instance);&lt;/span&gt;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//contravariance is in&lt;/span&gt;&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Program&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Main(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] args)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//List&amp;lt;Banana&amp;gt; bunchOfBananas = new List&amp;lt;Banana&amp;gt;();&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;IFoo&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;Banana&lt;/span&gt;&amp;gt; bunchOfBananas = &lt;span style="color:#0000ff"&gt;null&lt;/span&gt;;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//cant convert from a list of banana to a list of fruit&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//List&amp;lt;Fruit&amp;gt; fruitBowl = new List&amp;lt;Banana&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//List&amp;lt;Fruit&amp;gt; fruitBowl = bunchOfBananas;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//fruitBowl.Add(new Apple());&lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//Banana banana = bunchOfBananas[0]; &lt;/span&gt;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//IEnumerable - sequence..cant add.. can only observe&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//IEnumerable&amp;lt;Fruit&amp;gt; fruitBowl = bunchOfBananas;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#2b91af"&gt;IFoo&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;Fruit&lt;/span&gt;&amp;gt; fruitBowl = bunchOfBananas;&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-05-19T16:20:34.7909359-04:00</Created>
      <Modified>2012-05-19T16:20:34.7909359-04:00</Modified>
      <EntryId>616d76f6-b63e-4e7e-b95d-313a442b6665</EntryId>
      <Description />
      <Title>TekPub C#4 Jon Skeet</Title>
      <Categories>c# language;JonSkeet;TekPub</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>