<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-06-25T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b1262c27-0ef9-4e22-bb0c-3667aa877be6" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E39Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; RAT_Given120_Return3()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E39&lt;/span&gt;.NumberOfSolutionsGivenPerimeterOfRightAngledTriangle(120);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(3, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetMaxSolutions_GivenNothing_ReturnValueOfP()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E39&lt;/span&gt;.GetMaxSolutions();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(840, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E39&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; GetMaxSolutions()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; maxSolutions = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; valueThatGaveMaxSolutions = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 1000; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = NumberOfSolutionsGivenPerimeterOfRightAngledTriangle(i);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (result &amp;gt; maxSolutions)&lt;br&gt;             {&lt;br&gt;                 maxSolutions = result;&lt;br&gt;                 valueThatGaveMaxSolutions = i;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; valueThatGaveMaxSolutions;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; NumberOfSolutionsGivenPerimeterOfRightAngledTriangle(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; p)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; sidesI = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; solutions = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; roughMaxValueOfSide = p/2;&lt;br&gt;         &lt;span style="color:#008000"&gt;//its a right angled triangle a^2 +  b^2 = c^2&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; roughMaxValueOfSide; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; j = 1; j &amp;lt; roughMaxValueOfSide; j++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; k = 1; k &amp;lt; roughMaxValueOfSide; k++)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; ((i + j + k) == p)&lt;br&gt;                     {&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (&lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Pow(i, 2) + &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Pow(j, 2) == &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Pow(k, 2))&lt;br&gt;                         {&lt;br&gt;                             &lt;span style="color:#008000"&gt;//looking for inverse so don&amp;#39;t double up&lt;/span&gt;&lt;br&gt;                             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!sidesI.Contains(j))&lt;br&gt;                             {&lt;br&gt;                                 solutions++;&lt;br&gt;                                 &lt;span style="color:#008000"&gt;//Console.WriteLine(&amp;quot;{0}, {1}, {2}&amp;quot;, i, j, k);&lt;/span&gt;&lt;br&gt;                                 sidesI.Add(i);&lt;br&gt;                             }&lt;br&gt;                         }&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; solutions;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-06-26T17:37:13.7656994-04:00</Created>
      <Modified>2012-06-26T17:37:13.7656994-04:00</Modified>
      <EntryId>046f0319-b528-4ad3-85af-5c3dbe016c7e</EntryId>
      <Description />
      <Title>Euler 39–Triangle</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b72750f5-0248-4796-a323-770b7abe50df" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E22Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetCP_Given192And3_ReturnCP()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E38&lt;/span&gt;.GetConcatenatedProduct(192, 3);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(192384576, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetCP_Given9And5_ReturnCP()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E38&lt;/span&gt;.GetConcatenatedProduct(9, 5);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(918273645, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPanDigital_Given192384576_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E38&lt;/span&gt;.IsPanDigital(192384576);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPanDigital_Given192384577_ReturnFalse()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E38&lt;/span&gt;.IsPanDigital(192384577);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetLargestPD9DigitNumberWithSeries_Given_ReturnAnswer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E38&lt;/span&gt;.GetLargestPD9DigitNumberWithSeries();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(932718654, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E38&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; GetLargestPD9DigitNumberWithSeries()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; largestSoFar = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; 500000; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; j = 1; j &amp;lt; 10; j++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = GetConcatenatedProduct(i, j);&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsPanDigital(result))&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (result &amp;gt; largestSoFar)&lt;br&gt;                     {&lt;br&gt;                         largestSoFar = result;&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; largestSoFar;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsPanDigital(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; s = number.ToString();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (s.Length != 9)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; 10; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!s.Contains(i.ToString()))&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; GetConcatenatedProduct(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; max)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; concat = &lt;span style="color:#a31515"&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt;= max; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = number * i;&lt;br&gt;             concat += result;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#008000"&gt;//as we are only intereted in 9 &lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (concat.Length &amp;gt; 9)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 0;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(concat);&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-06-26T16:32:41.7957723-04:00</Created>
      <Modified>2012-06-26T16:32:41.7957723-04:00</Modified>
      <EntryId>2727e666-b09a-42f4-88b6-6739e55be2f2</EntryId>
      <Description />
      <Title>Euler 38–Pandigital</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2b66d5a4-572c-4e4a-bb08-5ad0cf878bd0" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E37Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsTruncatablePrime_Given3797_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E37&lt;/span&gt;.IsTruncatablePrime(3797);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsTruncatablePrime_Given3798_ReturnFalse()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E37&lt;/span&gt;.IsTruncatablePrime(3798);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsTruncatablePrime_Given13_ReturnFalse()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E37&lt;/span&gt;.IsTruncatablePrime(13);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#008000"&gt;//[Test]&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; PrimesThatAreTruncatable_GivenNothin_ReturnList()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E37&lt;/span&gt;.PrimesThatAreTrucatable();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(11, result.Count);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindSumOfPrimes_GivenNothing_ReturnAnswer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E37&lt;/span&gt;.FindSumOfPrimes();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(748317, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E37&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; FindSumOfPrimes()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; list = &lt;span style="color:#2b91af"&gt;E37&lt;/span&gt;.PrimesThatAreTrucatable();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;var&lt;/span&gt; i &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; list)&lt;br&gt;         {&lt;br&gt;             result += i;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; PrimesThatAreTrucatable()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; truncatable = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 9; i &amp;lt; 1000000; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsTruncatablePrime(i))&lt;br&gt;             {&lt;br&gt;                 truncatable.Add(i);&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0:N0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;,i);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; truncatable;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsTruncatablePrime(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!IsPrime(number))&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//taking digits off left&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; s = number.ToString();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; sLength = s.Length;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; sLength; i++)&lt;br&gt;         {&lt;br&gt;             s = s.Substring(1);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!IsPrime(&lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(s)))&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#008000"&gt;//taking digits off right&lt;/span&gt;&lt;br&gt;         s = number.ToString();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; sLength; i++)&lt;br&gt;         {&lt;br&gt;             s = s.Substring(0,s.Length-1);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!IsPrime(&lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(s)))&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsPrime(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a == 1)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 2; i &amp;lt;= &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(a); i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a % i == 0)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-06-26T15:53:39.3075003-04:00</Created>
      <Modified>2012-06-26T15:53:39.3075003-04:00</Modified>
      <EntryId>7b3a5dcc-4bca-4f66-94c9-a2abfc91a538</EntryId>
      <Description />
      <Title>Euler 37–Truncated Primes</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0ac13c91-44bf-45eb-98d1-3c2bd3e9ca43" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E36Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPalindrome_GivenSingleDigits_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E36&lt;/span&gt;.IsPalindrome(&lt;span style="color:#a31515"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E36&lt;/span&gt;.IsPalindrome(&lt;span style="color:#a31515"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E36&lt;/span&gt;.IsPalindrome(&lt;span style="color:#a31515"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPalindrome_Given585_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E36&lt;/span&gt;.IsPalindrome(&lt;span style="color:#a31515"&gt;&amp;quot;585&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;     }&lt;br&gt;     &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPalindrome_GivenBinary_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E36&lt;/span&gt;.IsPalindrome(&lt;span style="color:#a31515"&gt;&amp;quot;1001001001&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPalindrome_GivenNonP_ReturnFalse()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E36&lt;/span&gt;.IsPalindrome(&lt;span style="color:#a31515"&gt;&amp;quot;5855&amp;quot;&lt;/span&gt;);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SumAllNumbersPalindromeBase10And2_Given1m_ReturnAnswer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E36&lt;/span&gt;.SumAllnumbersPalindromeBase10And2(1000000);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(872187, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E36&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; SumAllnumbersPalindromeBase10And2(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; maxNumber)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; total = 0;&lt;br&gt;         &lt;span style="color:#008000"&gt;//palindrome does not have to have more than 1 digit!&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; maxNumber; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!IsPalindrome(i.ToString()))&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;continue&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#008000"&gt;//binary&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!IsPalindrome(&lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToString(i,2)))&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;continue&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0:N0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;,i);&lt;br&gt;             total += i;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; total;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsPalindrome(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; s)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; newS = &lt;span style="color:#a31515"&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br&gt;         &lt;span style="color:#008000"&gt;//reverse the characters and should be the same&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = s.Length-1; i &amp;gt;= 0; i--)&lt;br&gt;         {&lt;br&gt;             newS += s[i];&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (s == newS)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-06-26T15:16:12.6667658-04:00</Created>
      <Modified>2012-06-26T15:16:12.6667658-04:00</Modified>
      <EntryId>7653c143-589e-4528-a6bf-3d5e3262efca</EntryId>
      <Description />
      <Title>Euler 36–Palindrome and Binary</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:3e714cf7-5175-4f6f-b3da-405984e44235" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E35Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPrime_Given2_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.IsPrime(2);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPrime_GivenGoodPrimes_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.IsPrime(7);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.IsPrime(11);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.IsPrime(13);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.IsPrime(17);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.IsPrime(19);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.IsPrime(23);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPrime_GivenBadPrimes_ReturnFalse()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.IsPrime(4);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.IsPrime(6);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.IsPrime(9);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.IsPrime(10);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.IsPrime(12);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.IsPrime(12312312);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsCircularPrime_Given197_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.IsCircularPrime(197);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsCircularPrime_Given19_ReturnFalse()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.IsCircularPrime(19);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetCircularPrimes_Given100_Return13()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.GetCircularPrimes(100);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(13, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetCircularPrimes_Given1m_ReturnAnswer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;.GetCircularPrimes(1000000);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(55, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E35&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; GetCircularPrimes(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; maxNumber)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; counter = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 2; i &amp;lt; maxNumber; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsCircularPrime(i))&lt;br&gt;             {&lt;br&gt;                 counter++;&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0:N0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, i);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; counter;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsCircularPrime(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#008000"&gt;//change digit order&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#008000"&gt;//eg put 1st digit at end etc..&lt;/span&gt;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!IsPrime(a))&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; b = a.ToString();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; b.Length; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; digitAtStart = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(b.Substring(0, 1));&lt;br&gt;             b = b.Substring(1) + digitAtStart;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!IsPrime(&lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(b)))&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsPrime(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a == 1)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 2; i &amp;lt;= &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(a); i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a % i == 0)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-06-26T14:50:57.9033813-04:00</Created>
      <Modified>2012-06-26T14:50:57.9033813-04:00</Modified>
      <EntryId>f37617bc-bcbd-4e06-99c3-064b07cbb89d</EntryId>
      <Description />
      <Title>Euler 35–Circular Primes</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5bfc07cc-4963-4a00-9ff8-e0b353a69b53" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E34Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Factorial_Given2_Return1()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E34&lt;/span&gt;.Factorial(2);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(2, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Factorial_Given3_Return6()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E34&lt;/span&gt;.Factorial(3);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(6, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Factorial_Given4_Return24()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E34&lt;/span&gt;.Factorial(4);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(24, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#008000"&gt;//testing arithmetic overflow&lt;/span&gt;&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Factorial_Given99999_Return24()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E34&lt;/span&gt;.Factorial(99999);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(24, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsCuriousNumber_Given145_ReturnTrue()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E34&lt;/span&gt;.IsCuriousNumber(145);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsCuriousNumber_Given146_ReturnFalse()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E34&lt;/span&gt;.IsCuriousNumber(146);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindSumOfAllCuriousNumbers_GivenNothing_ReturnAnswer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E34&lt;/span&gt;.FindSumOfAllCuriousNumbers();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(40730, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E34&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; FindSumOfAllCuriousNumbers()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; total = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 3; i &amp;lt; 10000000; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsCuriousNumber(i))&lt;br&gt;             {&lt;br&gt;                 total += i;&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0:N0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;, i);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; total;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsCuriousNumber(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; b = a.ToString();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; total = 0;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; b.Length; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; digit = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(b.Substring(i, 1));&lt;br&gt;             total += Factorial(digit);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (total == a)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; Factorial(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; total = 1;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = number; i &amp;gt; 1; i--)&lt;br&gt;         {&lt;br&gt;             total *= i;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; total;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-06-26T14:03:33.4722983-04:00</Created>
      <Modified>2012-06-26T14:03:33.4722983-04:00</Modified>
      <EntryId>2bdb7991-d461-48c1-b5e8-0374a855a506</EntryId>
      <Description />
      <Title>Euler 34–Factorial Digits</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:45737229-cc12-4fe4-a5d8-61f662b19e32" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E33Tests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsNonTrivialFraction_Given49x98_True()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E33&lt;/span&gt;.IsNonTrivialFraction(49, 98);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsNonTrivialFraction_Given39x98_False()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E33&lt;/span&gt;.IsNonTrivialFraction(39, 98);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsNonTrivialFraction_Given30x50_False()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E33&lt;/span&gt;.IsNonTrivialFraction(30, 50);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetNonTrivialFractions_GivenNothing_ListOfAnswers()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E33&lt;/span&gt;.GetNonTrivialFractions();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(4, result.Count);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ProductOfFractions_GivenNothing_ReturnFraction()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E33&lt;/span&gt;.ProductOfFractions();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(2, result.Count);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//387296&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//38729600&lt;/span&gt;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E33&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; ProductOfFractions()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;&amp;gt; result = GetNonTrivialFractions();&lt;br&gt;             &lt;span style="color:#008000"&gt;//multiple all numerators&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; numerators = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; denominators = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; fractionList &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; result)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numerator = fractionList[0];&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; denominator = fractionList[1];&lt;br&gt;                 numerators.Add(numerator);&lt;br&gt;                 denominators.Add(denominator);&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numeratorTotal = 1;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; denominatorTotal = 1;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; numerator &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; numerators)&lt;br&gt;             {&lt;br&gt;                 numeratorTotal *= numerator;&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//multiply all denominators&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; denominator &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; denominators)&lt;br&gt;             {&lt;br&gt;                 denominatorTotal *= denominator;&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//find lowest common term&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() {numeratorTotal, denominatorTotal};&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;&amp;gt; GetNonTrivialFractions()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; list = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;&amp;gt;();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 10; i &amp;lt; 100; i++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; j = 10; j &amp;lt; 100; j++)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i != j)&lt;br&gt;                     {&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (i &amp;lt; j)&lt;br&gt;                         {&lt;br&gt;                             &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = IsNonTrivialFraction(i, j);&lt;br&gt;                             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (result)&lt;br&gt;                             {&lt;br&gt;                                 &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; x = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;() {i, j};&lt;br&gt;                                 list.Add(x);&lt;br&gt;                             }&lt;br&gt;                         }&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; list;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsNonTrivialFraction(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; b)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//does a number appear on the top and bottom?&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; firstTopDigit = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(a.ToString().Substring(0, 1));&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; secondTopDigit = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(a.ToString().Substring(1, 1));&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; firstBottomDigit = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(b.ToString().Substring(0, 1));&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; secondBottomDigit = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(b.ToString().Substring(1, 1));&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//if we take that number away on top and bottom&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#008000"&gt;//does it make the same fraction?&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; newTop = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; newBottom = 0;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//trivial&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; ((secondTopDigit == 0) &amp;amp;&amp;amp; (secondBottomDigit == 0))&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (firstTopDigit == firstBottomDigit)&lt;br&gt;             {&lt;br&gt;                 newTop = secondTopDigit;&lt;br&gt;                 newBottom = secondBottomDigit;&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;else&lt;/span&gt; &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (firstTopDigit == secondBottomDigit)&lt;br&gt;             {&lt;br&gt;                 newTop = secondTopDigit;&lt;br&gt;                 newBottom = firstBottomDigit;&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;else&lt;/span&gt; &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (secondTopDigit == firstBottomDigit)&lt;br&gt;             {&lt;br&gt;                 newTop = firstTopDigit;&lt;br&gt;                 newBottom = secondBottomDigit;&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;else&lt;/span&gt; &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (secondTopDigit == secondBottomDigit)&lt;br&gt;             {&lt;br&gt;                 newTop = firstTopDigit;&lt;br&gt;                 newBottom = firstBottomDigit;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;else&lt;/span&gt; &lt;span style="color:#008000"&gt;//not curious&lt;/span&gt;&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (newBottom == 0)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; oldFraction = a * 1000 / b * 1000;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; newFraction = newTop * 1000 / newBottom * 1000;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (oldFraction == newFraction)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-06-26T13:26:04.0397828-04:00</Created>
      <Modified>2012-06-26T13:26:04.0397828-04:00</Modified>
      <EntryId>bf4106d5-80a1-4c2a-bce1-9e66d6c718cd</EntryId>
      <Description />
      <Title>Euler 33–Fractions</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;TDD doing well.&lt;/p&gt;  &lt;p&gt;   &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:72064a0c-0029-414f-96e5-ccaedc6e56b4" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E32Tests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPanDigital_GivenPDNumbers_ShouldReturnTrue()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E32&lt;/span&gt;.IsPandigital(39, 186, 7254);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsTrue(result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPanDigital_GivenNonPDNumbersDouble_ShouldReturnFalse()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E32&lt;/span&gt;.IsPandigital(39, 286, 7254);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; IsPanDigital_GivenNonPDNumbersTooFew_ShouldReturnFalse()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E32&lt;/span&gt;.IsPandigital(39, 86, 7254);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.IsFalse(result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SumOfAllProductsPandigital_GivenNothing_ReturnAnswer()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E32&lt;/span&gt;.SumOfAllProductsPandigital();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(45228, result);&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E32&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; SumOfAllProductsPandigital()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; results = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; 5000; i++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; j = 1; j &amp;lt; 5000; j++)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; product = i*j;&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsPandigital(i, j, product))&lt;br&gt;                     {&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (!results.Contains(product))&lt;br&gt;                         {&lt;br&gt;                             results.Add(product);&lt;br&gt;                         }&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; results)&lt;br&gt;             {&lt;br&gt;                 result += i;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsPandigital(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; b, &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; c)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; found = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; panDigital = &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; number = a.ToString();&lt;br&gt;             GetValue(found, number);&lt;br&gt; &lt;br&gt;             number = b.ToString();&lt;br&gt;             GetValue(found, number);&lt;br&gt; &lt;br&gt;             number = c.ToString();&lt;br&gt;             GetValue(found, number);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; 10; i++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (found.Count != 9)&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;                 }&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt;(!found.Contains(i))&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;private&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetValue(&lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; found, &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; number)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt; number.Length; i++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; digit = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(number.Substring(i, 1));&lt;br&gt;                 found.Add(digit);&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;     }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/p&gt;</Content>
      <Created>2012-06-26T12:29:10.628585-04:00</Created>
      <Modified>2012-06-26T12:29:10.628585-04:00</Modified>
      <EntryId>31aa8983-e656-4006-a6df-5a9528851e82</EntryId>
      <Description />
      <Title>Euler 32–Pandigital</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a3f8b36b-d337-4af2-8216-4b926251ab03" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E40Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ConcatenatePositiveIntegers_Given31AsLengthOfDecimal_ReturnDecimal()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E40&lt;/span&gt;.ConcatenatePositiveIntegers(31);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;0.123456789101112131415161718192021&amp;quot;&lt;/span&gt;, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetNthDigit_Given2_Return2()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E40&lt;/span&gt;.GetNthDigit(2);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(2, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetNthDigit_Given12_Return1()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E40&lt;/span&gt;.GetNthDigit(12);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(1, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E40&lt;/span&gt;.GetNthDigit(15);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(2, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindValueOfExpression_Given_ReturnAnswer()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E40&lt;/span&gt;.FindValueOfExpression();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(210, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E40&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; FindValueOfExpression()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; d1 = GetNthDigit(1);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; d2 = GetNthDigit(10);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; d3 = GetNthDigit(100);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; d4 = GetNthDigit(1000);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; d5 = GetNthDigit(10000);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; d6 = GetNthDigit(100000);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; d7 = GetNthDigit(1000000);&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = d1*d2*d3*d4*d5*d6*d7;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; GetNthDigit(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; n)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; fullFraction = ConcatenatePositiveIntegers(n);&lt;br&gt;         fullFraction = fullFraction.Substring(2);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; numberAsString = fullFraction.Substring(n - 1, 1);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number = &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(numberAsString);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; number;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; ConcatenatePositiveIntegers(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; lengthOfDecimal)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; result = &lt;span style="color:#a31515"&gt;&amp;quot;0.&amp;quot;&lt;/span&gt;;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;while&lt;/span&gt; (result.Length &amp;lt; lengthOfDecimal + 3)&lt;br&gt;         {&lt;br&gt;             result += i;&lt;br&gt;             i++;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; result;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-06-26T19:45:22.7941633-04:00</Created>
      <Modified>2012-06-26T19:45:22.7941633-04:00</Modified>
      <EntryId>e1d39fce-a670-40ea-9f20-6518fafa9b76</EntryId>
      <Description />
      <Title>Euler 40–Large Concat Decimal</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>