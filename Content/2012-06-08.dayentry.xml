<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-06-07T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:72799c08-9c88-42a3-9d15-52e6405cda2d" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E21Tests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SumOfProperDivisors_Given220_Return284()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E21&lt;/span&gt;.SumOfProperDivisors(220);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(284, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; SumOfProperDivisors_Given284_Return220()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E21&lt;/span&gt;.SumOfProperDivisors(284);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(220, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindAllAmicableNumbersUnder10000_GivenNothing_ReturnListOfAmicableNumbers()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E21&lt;/span&gt;.FindAllAmicableNumbersUnder10000();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.IsNotEmpty(result);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; distinct = result.Distinct();&lt;br&gt;             &lt;span style="color:#008000"&gt;//var distinct = result;&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; sum = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; distinct)&lt;br&gt;             {&lt;br&gt;                 sum += number;&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(number);&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(31626, sum);&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E21&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; FindAllAmicableNumbersUnder10000()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfInts = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 0; i &amp;lt;= 10000; i++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#008000"&gt;//eg 220 will give 284 as result&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = SumOfProperDivisors(i);&lt;br&gt;                 &lt;span style="color:#008000"&gt;//284 as result will give 220 as result2&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result2 = SumOfProperDivisors(result);&lt;br&gt;                 &lt;span style="color:#008000"&gt;// i != result   ie must be different numbers&lt;/span&gt;&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (result2 == i &amp;amp;&amp;amp; i != result)&lt;br&gt;                 {&lt;br&gt;                     listOfInts.Add(i); &lt;span style="color:#008000"&gt;//eg 220&lt;/span&gt;&lt;br&gt;                     listOfInts.Add(result); &lt;span style="color:#008000"&gt;//eg 284&lt;/span&gt;&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; listOfInts;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; SumOfProperDivisors(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; number)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfDivisors = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; number; i++)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (number % i == 0)&lt;br&gt;                 {&lt;br&gt;                     listOfDivisors.Add(i);&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; sum = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; divisor &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; listOfDivisors)&lt;br&gt;             {&lt;br&gt;                 sum += divisor;&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; sum;&lt;br&gt;         }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-06-07T21:31:44.703125-04:00</Created>
      <Modified>2012-06-07T21:31:44.703125-04:00</Modified>
      <EntryId>ac5b03bf-3c70-4c7b-ac22-595877f3a120</EntryId>
      <Description />
      <Title>Euler 21–Amicable Pairs</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:21ffefa9-e4a3-4ed3-a2e6-ab459fb9c2f3" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;    [&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E22Tests&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; LoadFile_CallMethod_ReturnFileAsListOfStrings()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E22&lt;/span&gt;.LoadFile();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(5163, result.Count);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; AlphabeticalValueMultiplyByPosition_GivenColin_Return49714()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E22&lt;/span&gt;.AlphabeticalValueMultiplyByPosition(&lt;span style="color:#a31515"&gt;&amp;quot;COLIN&amp;quot;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(49714, result);&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Solve_GivenNothing_GetAnswer()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E22&lt;/span&gt;.Solve();&lt;br&gt;             &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(1, result);&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E22&lt;/span&gt;&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; Solve()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfNames = LoadFile();&lt;br&gt;             listOfNames.Sort();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; sum = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; name &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; listOfNames)&lt;br&gt;             {&lt;br&gt;                 sum += AlphabeticalValueMultiplyByPosition(name);&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; sum;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; LoadFile()&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#008000"&gt;//eg &amp;quot;MARY&amp;quot;,&amp;quot;PATRICIA&amp;quot;,&amp;quot;LINDA&amp;quot;   all on one line&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; text = &lt;span style="color:#2b91af"&gt;File&lt;/span&gt;.ReadAllText(&lt;span style="color:#a31515"&gt;@&amp;quot;e:&amp;#92;temp&amp;#92;names.txt&amp;quot;&lt;/span&gt;);&lt;br&gt; &lt;br&gt;             text = text.Replace(&lt;span style="color:#a31515"&gt;&amp;quot;&amp;#92;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span style="color:#a31515"&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;string&lt;/span&gt;[] words = text.Split(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#0000ff"&gt;char&lt;/span&gt;[] { &lt;span style="color:#a31515"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; }, &lt;span style="color:#2b91af"&gt;StringSplitOptions&lt;/span&gt;.RemoveEmptyEntries);&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; listOfNames = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt;();&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; line &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; words)&lt;br&gt;             {&lt;br&gt;                 listOfNames.Add(line);&lt;br&gt;             }&lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; listOfNames;&lt;br&gt;         }&lt;br&gt; &lt;br&gt;         &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; AlphabeticalValueMultiplyByPosition(&lt;span style="color:#0000ff"&gt;string&lt;/span&gt; name)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;string&lt;/span&gt;&amp;gt; listOfNames = LoadFile();&lt;br&gt;             listOfNames.Sort();&lt;br&gt;             &lt;span style="color:#008000"&gt;//go over each character in name eg C is 3&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; sum = 0;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;char&lt;/span&gt; c &lt;span style="color:#0000ff"&gt;in&lt;/span&gt; name.ToCharArray())&lt;br&gt;             {&lt;br&gt;                 sum += &lt;span style="color:#2b91af"&gt;Convert&lt;/span&gt;.ToInt32(c) - 64;&lt;br&gt;             }&lt;br&gt; &lt;br&gt;             &lt;span style="color:#008000"&gt;//find which position in the list eg COLIN is 938&lt;/span&gt;&lt;br&gt;             &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; positionInSortedList = listOfNames.IndexOf(name) + 1;&lt;br&gt; &lt;br&gt;             &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; positionInSortedList*sum;&lt;br&gt;         }&lt;br&gt;     }&lt;br&gt;     &lt;span style="color:#008000"&gt;/*&lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical &lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;position in the list to obtain a name score.&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. &lt;/span&gt;&lt;br&gt; &lt;span style="color:#008000"&gt;So, COLIN would obtain a score of 938  53 = 49714.&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style="color:#008000"&gt;What is the total of all the name scores in the file?&lt;/span&gt;&lt;br&gt;      &lt;span style="color:#008000"&gt;* */&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-06-08T19:08:10.65625-04:00</Created>
      <Modified>2012-06-08T19:08:10.65625-04:00</Modified>
      <EntryId>368a09b8-868f-4867-b9dc-fcb3a3f17c5c</EntryId>
      <Description />
      <Title>Euler 22–Reading Text File</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>