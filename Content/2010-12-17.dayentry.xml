<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2010-12-16T19:00:00-05:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;Unit testing paying dividends now.. this was my first try, and importantly I got the answer right first time.&amp;#160; This is what is good about TDD.&amp;#160; Refactoring (which this code needs!) comes later. &lt;/p&gt;  &lt;p&gt;A Pythagorean triplet is a set of three natural numbers, &lt;var&gt;a&lt;/var&gt; &lt;img border="0" alt="&amp;lt;" src="http://projecteuler.net/images/symbol_lt.gif" width="10" height="10" /&gt; &lt;var&gt;b&lt;/var&gt; &lt;img border="0" alt="&amp;lt;" src="http://projecteuler.net/images/symbol_lt.gif" width="10" height="10" /&gt; &lt;var&gt;c&lt;/var&gt;, for which,&lt;/p&gt;  &lt;p&gt;&lt;var&gt;a&lt;/var&gt;&lt;sup&gt;2&lt;/sup&gt; + &lt;var&gt;b&lt;/var&gt;&lt;sup&gt;2&lt;/sup&gt; = &lt;var&gt;c&lt;/var&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;  &lt;p&gt;For example, 3&lt;sup&gt;2&lt;/sup&gt; + 4&lt;sup&gt;2&lt;/sup&gt; = 9 + 16 = 25 = 5&lt;sup&gt;2&lt;/sup&gt;.&lt;/p&gt;  &lt;p&gt;There exists exactly one Pythagorean triplet for which &lt;var&gt;a&lt;/var&gt; + &lt;var&gt;b&lt;/var&gt; + &lt;var&gt;c&lt;/var&gt; = 1000.    &lt;br /&gt;Find the product &lt;var&gt;abc&lt;/var&gt;.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;[TestClass]&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; UnitTest1&lt;br /&gt;{&lt;br /&gt;    [TestMethod]&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; maxValueOf5()&lt;br /&gt;    {&lt;br /&gt;        pythag pythag = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; pythag();&lt;br /&gt;        List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; listOfStrings = pythag.findAllPythagorasTripletsUnder(5);&lt;br /&gt;        Assert.IsNotNull(listOfStrings);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    [TestMethod]&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; passInAStringOfNumbersAndGetBackProduct()&lt;br /&gt;    {&lt;br /&gt;        pythag pythag = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; pythag();&lt;br /&gt;        List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; listOfStrings = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt;();&lt;br /&gt;        listOfStrings.Add(&lt;span style="color: #006080"&gt;&amp;quot;5,4,3&amp;quot;&lt;/span&gt;);&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = pythag.doNumberCrunch(listOfStrings);&lt;br /&gt;        Assert.AreEqual(60, result);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    [TestMethod]&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; mainRun()&lt;br /&gt;    {&lt;br /&gt;        pythag pythag = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; pythag();&lt;br /&gt;        List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; listOfStrings = pythag.findAllPythagorasTripletsUnder(600);&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; result = pythag.doNumberCrunch(listOfStrings);&lt;br /&gt;        Assert.AreEqual(123, result); &lt;span style="color: #008000"&gt;// 31875000&lt;/span&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; pythag&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; findAllPythagorasTripletsUnder(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; maxValueOfHypotenuse)&lt;br /&gt;    {&lt;br /&gt;        List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; listOfString = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt;();&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; c = 1; c &amp;lt;= maxValueOfHypotenuse; c++)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; b = 1; b &amp;lt;= maxValueOfHypotenuse; b++)&lt;br /&gt;            {&lt;br /&gt;                &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; a = 1; a &amp;lt;= maxValueOfHypotenuse; a++)&lt;br /&gt;                {&lt;br /&gt;                    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (Math.Pow(a,2) == Math.Pow(b,2) + Math.Pow(c,2))&lt;br /&gt;                        listOfString.Add(a.ToString() + &lt;span style="color: #006080"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; + b.ToString() + &lt;span style="color: #006080"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; + c.ToString());&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; listOfString;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; doNumberCrunch(List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; listOfStrings)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; product = 0;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;string&lt;/span&gt; item &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; listOfStrings)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;string&lt;/span&gt;[] numbers = item.Split(&lt;span style="color: #006080"&gt;','&lt;/span&gt;);&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; a = Convert.ToInt32(numbers[0]);&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; b = Convert.ToInt32(numbers[1]);&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; c = Convert.ToInt32(numbers[2]);&lt;br /&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (a + b + c == 1000)&lt;br /&gt;                product = a * b * c;&lt;br /&gt;        }&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; product;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;And Phils (and Iâ€™ve made it fit into testing runner).&amp;#160;&amp;#160; Goto.. but it works and is simple to read!&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;[TestMethod]&lt;br /&gt;   &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; testPhilsWayByCheckingAnswerIsCorrect()&lt;br /&gt;   {&lt;br /&gt;       philsWay philsWay = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; philsWay();&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; result = philsWay.solveProblem();&lt;br /&gt;       Assert.AreEqual(31875000, result); &lt;span style="color: #008000"&gt;// 31875000 is correct&lt;/span&gt;&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; philsWay&lt;br /&gt;{&lt;br /&gt;   &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; solveProblem()&lt;br /&gt;   {&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; answer = 0;&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; a = 1; a &amp;lt; 100000; a++)&lt;br /&gt;       {&lt;br /&gt;           &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; b = a; b &amp;lt; 100000; b++)&lt;br /&gt;           {&lt;br /&gt;&lt;br /&gt;               &lt;span style="color: #0000ff"&gt;double&lt;/span&gt; c = Math.Sqrt((a * a) + (b * b));&lt;br /&gt;               &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (a + b + c == 1000)&lt;br /&gt;               {&lt;br /&gt;                   Console.WriteLine(a + &lt;span style="color: #006080"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; + b + &lt;span style="color: #006080"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; + c);&lt;br /&gt;                   answer = a * b * c;&lt;br /&gt;                   &lt;span style="color: #0000ff"&gt;goto&lt;/span&gt; Foo;&lt;br /&gt;               }&lt;br /&gt;           }&lt;br /&gt;       }&lt;br /&gt;&lt;br /&gt;   Foo:&lt;br /&gt;       &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; answer;&lt;br /&gt;   }&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;and here is refactored version of my code:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; findAllPythagorasTripletsUnder(&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; maxValueOfHypotenuse)&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt; listOfString = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt;();&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; a = 1; a &amp;lt;= maxValueOfHypotenuse; a++)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;for&lt;/span&gt; (&lt;span style="color: #0000ff"&gt;int&lt;/span&gt; b = 1; b &amp;lt;= maxValueOfHypotenuse; b++)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; c = Convert.ToInt32(Math.Sqrt((a * a) + (b * b))); &lt;span style="color: #008000"&gt;// converting to int to avoid getting positive double results&lt;/span&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (Math.Pow(c, 2) == Math.Pow(a, 2) + Math.Pow(b, 2))&lt;br /&gt;                listOfString.Add(a.ToString() + &lt;span style="color: #006080"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; + b.ToString() + &lt;span style="color: #006080"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; + c.ToString());&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; listOfString;&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;</Content>
      <Created>2010-12-16T23:03:33.97175-05:00</Created>
      <Modified>2010-12-19T04:57:37.456125-05:00</Modified>
      <EntryId>0b0580f2-77a1-4231-a35b-65c1f2c5f3fd</EntryId>
      <Description />
      <Title>Euler #9 - Pythagorean triplet</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>