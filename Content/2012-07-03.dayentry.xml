<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2012-07-02T20:00:00-04:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;&lt;a href="http://www.programgood.net/content/binary/Windows-Live-Writer/a7fd48ee9da2_9D/image_2.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.programgood.net/content/binary/Windows-Live-Writer/a7fd48ee9da2_9D/image_thumb.png" width="732" height="474" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;8 Core laptop with NVidia GT 550M GPU all going 100%.&amp;#160; GPU is being programmed via CUDA. &lt;/p&gt;  &lt;p&gt;GPU Caps viewer / GPU Shark showing&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.geeks3d.com/20110331/download-gpu-caps-viewer-1-11-1-and-gpu-shark-0-4-4/"&gt;http://www.geeks3d.com/20110331/download-gpu-caps-viewer-1-11-1-and-gpu-shark-0-4-4/&lt;/a&gt;&amp;#160; &lt;/p&gt;  &lt;p&gt;BOINC&lt;/p&gt;  &lt;p&gt;&lt;a href="http://boinc.berkeley.edu/wiki/GPU_computing"&gt;http://boinc.berkeley.edu/wiki/GPU_computing&lt;/a&gt;&amp;#160;&amp;#160; - Shows which projects support which GPU’s&lt;/p&gt;  &lt;p&gt;PyCuda – example here showing the speedup using the GPU&lt;/p&gt;  &lt;p&gt;&lt;a href="http://wiki.tiker.net/PyCuda/Examples/MeasureGpuarraySpeedRandom"&gt;http://wiki.tiker.net/PyCuda/Examples/MeasureGpuarraySpeedRandom&lt;/a&gt;&lt;/p&gt;</Content>
      <Created>2012-07-03T03:10:46.4763619-04:00</Created>
      <Modified>2012-07-03T11:37:10.6695526-04:00</Modified>
      <EntryId>d2d28cdc-8d23-4543-b45c-8b354fa63aed</EntryId>
      <Description />
      <Title>Grid Computing</Title>
      <Categories>Grid Computing;SETI</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:aac65b39-3fd8-4ff9-93b2-0703cdf8a9f3" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E48Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Power_Given2_4()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E48&lt;/span&gt;.Power(2);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt;(4), result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; Power_Given3_27()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E48&lt;/span&gt;.Power(3);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt;(27), result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReturnSeries_Given10_Return10405071317()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E48&lt;/span&gt;.ReturnSeries(10);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt;(10405071317), result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; ReturnLast10DigitsOfSeries_Given1000_Return()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;String&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E48&lt;/span&gt;.ReturnLast10DigitsOfSeries(1000);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(&lt;span style="color:#a31515"&gt;&amp;quot;9110846700&amp;quot;&lt;/span&gt;, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E48&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; ReturnLast10DigitsOfSeries(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; result = ReturnSeries(1000);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; s = result.ToString();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;string&lt;/span&gt; s2 = s.Substring(s.Length - 10, 10);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; s2;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; ReturnSeries(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; number = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt;();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt;= a; i++)&lt;br&gt;         {&lt;br&gt;             number += Power(i);&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; number;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; Power(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt; number = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;BigInteger&lt;/span&gt;(a);&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 1; i &amp;lt; a; i++)&lt;br&gt;         {&lt;br&gt;             number = number*a;&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; number;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-07-02T23:04:27.0334824-04:00</Created>
      <Modified>2012-07-02T23:04:27.0334824-04:00</Modified>
      <EntryId>9578b470-3bb7-4afc-9bff-d49662fea045</EntryId>
      <Description />
      <Title>Euler48–Last 10 Digits</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2830e7f4-2fb7-4b8a-b978-36df6dd41ad6" class="wlWriterEditableSmartContent"&gt; &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"&gt; &lt;div style="background-color: #ffffff; max-height: 400px; overflow: auto; padding: 2px 5px;"&gt;[&lt;span style="color:#2b91af"&gt;TestFixture&lt;/span&gt;]&lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E47Tests&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetPrimeFactors_Given14_Return2and7()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E47&lt;/span&gt;.GetPrimeFactors(14);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; {2, 7}, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetPrimeFactors_Given15_Return3and5()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E47&lt;/span&gt;.GetPrimeFactors(15);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; { 3, 5 }, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetPrimeFactors_Given644_Return2and7and23()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E47&lt;/span&gt;.GetPrimeFactors(644);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; { 2, 7,23 }, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; GetPrimeFactors_Given645_Return()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; result = &lt;span style="color:#2b91af"&gt;E47&lt;/span&gt;.GetPrimeFactors(645);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; { 3,5,43 }, result);&lt;br&gt;         result = &lt;span style="color:#2b91af"&gt;E47&lt;/span&gt;.GetPrimeFactors(646);&lt;br&gt;         &lt;span style="color:#2b91af"&gt;CollectionAssert&lt;/span&gt;.AreEqual(&lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; { 2,17,19 }, result);&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     [&lt;span style="color:#2b91af"&gt;Test&lt;/span&gt;]&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;void&lt;/span&gt; FindFirstFourConsecutiveIntegersToHaveDistinctPrimeFactors_Give_ReturnLowestPrimeFactor()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; result = &lt;span style="color:#2b91af"&gt;E47&lt;/span&gt;.FindFirstFourConsecutiveIntegersToHaveDistinctPrimeFactors();&lt;br&gt;         &lt;span style="color:#2b91af"&gt;Assert&lt;/span&gt;.AreEqual(134043, result);&lt;br&gt;     }&lt;br&gt; }&lt;br&gt; &lt;br&gt; &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;class&lt;/span&gt; &lt;span style="color:#2b91af"&gt;E47&lt;/span&gt;&lt;br&gt; {&lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;int&lt;/span&gt; FindFirstFourConsecutiveIntegersToHaveDistinctPrimeFactors()&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; consecIntegers = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 10; i &amp;lt; 10000000; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; result = GetPrimeFactors(i);&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (result.Count == 4)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#2b91af"&gt;Console&lt;/span&gt;.WriteLine(&lt;span style="color:#a31515"&gt;&amp;quot;{&lt;/span&gt;&lt;span style="color:#3cb371"&gt;0}&lt;/span&gt;&lt;span style="color:#a31515"&gt;, count: {&lt;/span&gt;&lt;span style="color:#3cb371"&gt;1}&lt;/span&gt;&lt;span style="color:#a31515"&gt;&amp;quot;&lt;/span&gt;,i, consecIntegers.Count);&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (consecIntegers.Contains(i - 1))&lt;br&gt;                 {&lt;br&gt;                     consecIntegers.Add(i);&lt;br&gt;                     &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (consecIntegers.Count == 4)&lt;br&gt;                     {&lt;br&gt;                         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; consecIntegers[0];&lt;br&gt;                     }&lt;br&gt;                 }&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;else&lt;/span&gt;&lt;br&gt;                 {&lt;br&gt;                     &lt;span style="color:#008000"&gt;//creating a new list, or using Clear&lt;/span&gt;&lt;br&gt;                     &lt;span style="color:#008000"&gt;//consecIntegers = new List&amp;lt;int&amp;gt;();&lt;/span&gt;&lt;br&gt;                     consecIntegers.Clear();&lt;br&gt;                     consecIntegers.Add(i);&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; 0;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt; GetPrimeFactors(&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; a)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;var&lt;/span&gt; primeFactors = &lt;span style="color:#0000ff"&gt;new&lt;/span&gt; &lt;span style="color:#2b91af"&gt;List&lt;/span&gt;&amp;lt;&lt;span style="color:#0000ff"&gt;int&lt;/span&gt;&amp;gt;();&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 2; i &amp;lt;= a/2; i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a%i == 0)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (IsPrime(i))&lt;br&gt;                 {&lt;br&gt;                     primeFactors.Add(i);&lt;br&gt;                 }&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; primeFactors;&lt;br&gt;     }&lt;br&gt; &lt;br&gt;     &lt;span style="color:#0000ff"&gt;public&lt;/span&gt; &lt;span style="color:#0000ff"&gt;static&lt;/span&gt; &lt;span style="color:#0000ff"&gt;bool&lt;/span&gt; IsPrime(&lt;span style="color:#0000ff"&gt;long&lt;/span&gt; a)&lt;br&gt;     {&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a == 1) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a == 2) &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;         &lt;span style="color:#0000ff"&gt;for&lt;/span&gt; (&lt;span style="color:#0000ff"&gt;int&lt;/span&gt; i = 2; i &amp;lt;= &lt;span style="color:#2b91af"&gt;Math&lt;/span&gt;.Sqrt(a); i++)&lt;br&gt;         {&lt;br&gt;             &lt;span style="color:#0000ff"&gt;if&lt;/span&gt; (a%i == 0)&lt;br&gt;             {&lt;br&gt;                 &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;false&lt;/span&gt;;&lt;br&gt;             }&lt;br&gt;         }&lt;br&gt;         &lt;span style="color:#0000ff"&gt;return&lt;/span&gt; &lt;span style="color:#0000ff"&gt;true&lt;/span&gt;;&lt;br&gt;     }&lt;br&gt; }&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</Content>
      <Created>2012-07-02T22:35:13.0788151-04:00</Created>
      <Modified>2012-07-02T22:38:06.4507144-04:00</Modified>
      <EntryId>87737e2a-9122-427f-ba97-e4add58994d5</EntryId>
      <Description />
      <Title>Euler47–Prime Factors</Title>
      <Categories>Euler</Categories>
      <Author>admin</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>